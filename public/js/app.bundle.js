(()=>{"use strict";var e,n,o,t,r,a={204:(e,n,o)=>{o.d(n,{N:()=>O});const t=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");var r=o(587);const a=document.getElementById("villeSelect"),i=document.getElementById("zonageSelect"),l=document.getElementById("zoneSelect"),u=(document.getElementById("typologieSelect"),document.getElementById("synthesisBtn")),c=document.getElementById("statusMessage"),s=document.getElementById("villeSpinner"),d=document.getElementById("zonageSpinner"),m=document.getElementById("zoneSpinner"),g=(document.getElementById("typologieSpinner"),document.getElementById("documentSpinner")),f=document.getElementById("userStatus"),p=document.getElementById("logoutBtn"),h=document.getElementById("loginLink"),v=document.getElementById("signupLink");function z(e,n="info"){c?(c.textContent=e,c.className=`status-message alert alert-${n}`,c.classList.remove("d-none")):console.warn("Status message element not found.")}function b(e,n){e&&e.classList.toggle("d-none",!n)}function _(e,n){e?(e.innerHTML=`<option value="">${n||"Sélectionnez une option"}</option>`,e.disabled=!0):console.warn("Select element not found for reset.")}function U(e){return e?e.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())):""}function y(e,n,o,t,a){return e?(_(e,o),n&&0!==n.length?(n.forEach((n=>{const o=document.createElement("option");o.value=n.id;let t="";t="zone"===a&&r.P.hasOwnProperty(n.nom)?r.P[n.nom]:U(n.nom),o.textContent=t,e.appendChild(o)})),e.disabled=!1,!0):(e.innerHTML=`<option value="">${t}</option>`,e.disabled=!0,!1)):(console.warn("Select element not found for population."),!1)}let E=null;function S(){return E}let w=null,Z=!1;function I(e){w=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function C(e=!0){if(e&&!Z&&await async function(){try{const{data:{session:e},error:n}=await t.auth.getSession();if(n||!e)return console.log("No valid session found"),I(null),Z=!1,!1;const{error:o}=await t.auth.refreshSession();return o?(console.warn("Session validation failed:",o),await t.auth.signOut(),I(null),Z=!1,!1):(I(e.user),Z=!0,!0)}catch(e){return console.error("Session validation error:",e),I(null),Z=!1,!1}}(),!e&&!w){const e=localStorage.getItem("currentUser");if(e)try{w=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return w}let O=null;function A(e){if(O=e,e){f&&f.classList.remove("hidden"),h&&h.classList.add("hidden"),v&&v.classList.add("hidden"),p&&p.classList.remove("hidden");const e=S();e&&e.id?(u&&(u.disabled=!1),z(`Document trouvé (Source: ${U(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")):u&&(u.disabled=!0)}else f&&f.classList.add("hidden"),h&&h.classList.remove("hidden"),v&&v.classList.remove("hidden"),p&&p.classList.add("hidden"),u&&(u.disabled=!0)}t.auth.onAuthStateChange(((e,n)=>{const o=n?.user||null;I(o),A(o),"SIGNED_OUT"===e?(console.log("Event SIGNED_OUT received. Redirecting."),window.location.href="/"):"SIGNED_IN"===e?console.log("Event SIGNED_IN received. User data:",o.email):"INITIAL_SESSION"===e?console.log("Event INITIAL_SESSION received. User data:",o.email):"TOKEN_REFRESHED"===e&&console.log("Event TOKEN_REFRESHED received. User data:",o.email)})),p.addEventListener("click",(async()=>{z("Déconnexion...","info");const{error:e}=await t.auth.signOut();e?(console.error("Error logging out with Supabase:",e.message),z(`Erreur lors de la déconnexion: ${e.message}`,"danger")):console.log("Supabase signOut successful. onAuthStateChange will handle UI and redirect.")})),a.addEventListener("change",(e=>{!async function(e){if(_(i,"Sélectionnez d'abord une ville"),_(l,"Sélectionnez d'abord un zonage"),u.disabled=!0,E=null,e){b(d,!0),z("Chargement des zonages...","info"),i.disabled=!0;try{const{data:n,error:o}=await t.from("zonages").select("id, nom").eq("ville_id",e).order("nom");if(o)throw o;y(i,n.map((e=>({id:e.id,nom:e.nom}))),"Sélectionnez un zonage","Aucun zonage disponible","zonage")?z(`Zonages chargés : ${n.length}`,"info"):z("Aucun zonage trouvé pour cette ville.","warning")}catch(e){console.error("Erreur lors du chargement des zonages:",e),_(i,"Erreur chargement")}finally{b(d,!1)}}else z("Veuillez sélectionner une ville.","info")}(e.target.value)})),i.addEventListener("change",(e=>{!async function(e){if(_(l,"Sélectionnez d'abord un zonage"),u.disabled=!0,E=null,e){b(m,!0),z("Chargement des zones...","info"),l.disabled=!0;try{const{data:n,error:o}=await t.from("zones").select("id, nom").eq("zonage_id",e).order("nom");if(o)throw o;y(l,n.map((e=>({id:e.id,nom:e.nom}))),"Sélectionnez une zone","Aucune zone disponible","zone")?z(`Zones chargées : ${n.length}`,"info"):z("Aucune zone trouvée pour ce zonage.","warning")}catch(e){console.error("Erreur lors du chargement des zones:",e),_(l,"Erreur chargement")}finally{b(m,!1)}}else z("Veuillez sélectionner un zonage.","info")}(e.target.value)})),l.addEventListener("change",(e=>{const n=e.target.value,o=i.value;n&&o?async function(e,n){if(u.disabled=!0,E=null,O)if(e&&n){b(g,!0),z("Recherche du document...","info");try{const{data:o,error:r}=await t.from("documents").select("id, source_plu_date").eq("zonage_id",e).eq("zone_id",n).eq("typologie_id","d6cd2337-5803-4802-a208-1cfa4eeba905").single();if(r){if("PGRST116"===r.code)return void z("Aucun document trouvé pour cette zone.","warning");throw r}E=o,O&&o?.id?(u.disabled=!1,z(`Document trouvé (Source: ${U(o.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")):(E=null,z("Document trouvé mais lien manquant.","warning"))}catch(e){console.error("Erreur lors de la recherche du document:",e),E=null}finally{b(g,!1)}}else z("Sélection incomplète pour rechercher le document.","info");else z("Veuillez vous connecter pour accéder aux documents.","warning")}(o,n):z("Veuillez d'abord sélectionner un zonage.","warning")})),u.addEventListener("click",(function(){if(!O)return z("Authentification requise pour télécharger.","warning"),void(u.disabled=!0);const e=S();e&&e.id?(z("Ouverture du document...","info"),window.open(`/plu-summary?id=${e.id}`,"_blank"),setTimeout((()=>{u.disabled||z(`Document trouvé (Source: ${U(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")}),1500)):(z("Lien du document non disponible.","warning"),u.disabled=!0)})),document.addEventListener("DOMContentLoaded",(async()=>{_(a,"Chargement..."),_(i,"Sélectionnez d'abord une ville"),_(l,"Sélectionnez d'abord un zonage"),u&&(u.disabled=!0),A(C()),a&&i&&l&&(z("Initialisation...","info"),_(a,"Chargement..."),_(i,"Sélectionnez d'abord une ville"),_(l,"Sélectionnez d'abord un zonage"),await async function(){b(s,!0),z("Chargement des villes...","info"),a.disabled=!0;try{const{data:e,error:n}=await t.from("villes").select("id, nom").order("nom");if(n)throw n;y(a,e.map((e=>({id:e.id,nom:e.nom}))),"Sélectionnez une ville","Aucune ville disponible","ville")?z(`Villes chargées : ${e.length}`,"info"):z(null===O?"Veuillez vous connecter pour accéder aux données.":"Aucune ville n'a été trouvée.","warning")}catch(e){console.error("Erreur lors du chargement des villes:",e),_(a,"Erreur chargement")}finally{b(s,!1)}}())}))},587:(e,n,o)=>{o.d(n,{P:()=>t});const t={zone_au:"Zone AU",zone_auc1:"Zone AUC1",zone_auc2:"Zone AUC2",zone_auc3:"Zone AUC3",zone_aucru10:"Zone AUCRU10",zone_aud1:"Zone AUD1",zone_aud2:"Zone AUD2",zone_aud3:"Zone AUD3",zone_aud4:"Zone AUD4",zone_aue1:"Zone AUE1",zone_aup1r:"Zone AUP1r",zone_a:"Zone A",zone_al:"Zone AL",zone_n:"Zone N",zone_nl:"Zone NL",zone_ue1:"Zone UE1",zone_ue2:"Zone UE2",zone_ue3:"Zone UE3",zone_ue4:"Zone UE4",zone_uv:"Zone UV",zone_uz1:"Zone UZ1",zone_uz2:"Zone UZ2",zone_uz3:"Zone UZ3",zone_uz4:"Zone UZ4",zone_ua1:"Zone UA1",zone_ua2:"Zone UA2",zone_ua3:"Zone UA3",zone_ub:"Zone UB",zone_uc1:"Zone UC1",zone_uc2:"Zone UC2",zone_uc3:"Zone UC3",zone_ucru1:"Zone UCRU1",zone_ucru2:"Zone UCRU2",zone_ucru3:"Zone UCRU3",zone_ucru4:"Zone UCRU4",zone_ucru5:"Zone UCRU5",zone_ucru6:"Zone UCRU6",zone_ucru7:"Zone UCRU7",zone_ucru8:"Zone UCRU8",zone_ucru9:"Zone UCRU9",zone_ucru11:"Zone UCRU11",zone_ud1:"Zone UD1",zone_ud2:"Zone UD2",zone_ud3:"Zone UD3",zone_ud4:"Zone UD4"}}},i={};function l(e){var n=i[e];if(void 0!==n)return n.exports;var o=i[e]={exports:{}};return a[e].call(o.exports,o,o.exports,l),o.exports}l.m=a,e=[],l.O=(n,o,t,r)=>{if(!o){var a=1/0;for(s=0;s<e.length;s++){for(var[o,t,r]=e[s],i=!0,u=0;u<o.length;u++)(!1&r||a>=r)&&Object.keys(l.O).every((e=>l.O[e](o[u])))?o.splice(u--,1):(i=!1,r<a&&(a=r));if(i){e.splice(s--,1);var c=t();void 0!==c&&(n=c)}}return n}r=r||0;for(var s=e.length;s>0&&e[s-1][2]>r;s--)e[s]=e[s-1];e[s]=[o,t,r]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var r=Object.create(null);l.r(r);var a={};n=n||[null,o({}),o([]),o(o)];for(var i=2&t&&e;"object"==typeof i&&!~n.indexOf(i);i=o(i))Object.getOwnPropertyNames(i).forEach((n=>a[n]=()=>e[n]));return a.default=()=>e,l.d(r,a),r},l.d=(e,n)=>{for(var o in n)l.o(n,o)&&!l.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((n,o)=>(l.f[o](e,n),n)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t={},r="urbandocs_webapp:",l.l=(e,n,o,a)=>{if(t[e])t[e].push(n);else{var i,u;if(void 0!==o)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var d=c[s];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==r+o){i=d;break}}i||(u=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",r+o),i.src=e),t[e]=[n];var m=(n,o)=>{i.onerror=i.onload=null,clearTimeout(g);var r=t[e];if(delete t[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(o))),n)return n(o)},g=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),u&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var n=l.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var t=o.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=o[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={54:0,524:0};l.f.j=(n,o)=>{var t=l.o(e,n)?e[n]:void 0;if(0!==t)if(t)o.push(t[2]);else{var r=new Promise(((o,r)=>t=e[n]=[o,r]));o.push(t[2]=r);var a=l.p+l.u(n),i=new Error;l.l(a,(o=>{if(l.o(e,n)&&(0!==(t=e[n])&&(e[n]=void 0),t)){var r=o&&("load"===o.type?"missing":o.type),a=o&&o.target&&o.target.src;i.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,t[1](i)}}),"chunk-"+n,n)}},l.O.j=n=>0===e[n];var n=(n,o)=>{var t,r,[a,i,u]=o,c=0;if(a.some((n=>0!==e[n]))){for(t in i)l.o(i,t)&&(l.m[t]=i[t]);if(u)var s=u(l)}for(n&&n(o);c<a.length;c++)r=a[c],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(s)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))})();var u=l.O(void 0,[303],(()=>l(204)));u=l.O(u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,