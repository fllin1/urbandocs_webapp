(()=>{"use strict";var e,t,n,r,o,i={1900:(e,t,n)=>{var r=n(9660),o=n(1235),i=n(141),s=n(6354);async function c(){const e=s.Aw.get("citySelect"),t=s.Aw.get("citySpinner");if(e){(0,s.Oh)(t,!0),o.n.setLoading(!0);try{const t=await i.K.loadCities();if((0,s.fM)(e,t,"Sélectionnez une ville","Aucune ville disponible","city"))(0,s.wc)("Nouvelle ville disponible ! Retrouvez les synthèses de Lille","success"),o.n.setCities(t);else{const e=null===o.n.getState("user")?"Veuillez vous connecter pour accéder aux données.":"Aucune ville trouvée.";(0,s.wc)(e,"warning")}}catch(t){console.error("Erreur lors du chargement des villes:",t),(0,s.wc)("Erreur de chargement des villes","error"),(0,s.kD)(e,"Erreur chargement")}finally{(0,s.Oh)(t,!1),o.n.setLoading(!1)}}}function a(){return o.n.getState("selectedDocument")}n(3715);var l=n(9251),u=n(2387);let d=null;r.N.auth.onAuthStateChange(((e,t)=>{!function(e){if(d=e,o.n.setUser(e),e){const e=a();e&&e.id?(s.X2&&(s.X2.disabled=!1),(0,s.wc)(`Document trouvé (Source: ${(0,s.rf)(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")):s.X2&&(s.X2.disabled=!0)}else s.X2&&(s.X2.disabled=!0)}(t?.user||null),"SIGNED_OUT"===e?(console.log("App: User signed out"),o.n.resetSelections()):"SIGNED_IN"===e?(console.log("App: User signed in"),s.ss&&s.wZ&&s.zA&&c()):"INITIAL_SESSION"===e?console.log("App: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("App: Token refreshed")})),s.ss.addEventListener("change",(e=>{!async function(e){const t=s.Aw.get("zoningSelect"),n=s.Aw.get("zoneSelect"),r=s.Aw.get("zoningSpinner"),c=s.Aw.get("synthesisBtn");if((0,s.kD)(t,"Sélectionnez d'abord une ville"),(0,s.kD)(n,"Sélectionnez d'abord un zonage"),c&&(c.disabled=!0),o.n.clearSelectedDocument(),e){(0,s.Oh)(r,!0),o.n.setLoading(!0);try{const n=await i.K.loadZonings(e);(0,s.fM)(t,n,"Sélectionnez un zonage","Aucun zonage disponible","zoning")?((0,s.wc)(`${n.length} zonages chargés`,"success"),o.n.setZonings(n)):(0,s.wc)("Aucun zonage trouvé pour cette ville.","warning")}catch(e){console.error("Erreur lors du chargement des zonages:",e),(0,s.wc)("Erreur de chargement des zonages","error"),(0,s.kD)(t,"Erreur chargement")}finally{(0,s.Oh)(r,!1),o.n.setLoading(!1)}}else(0,s.wc)("Veuillez sélectionner une ville.","info")}(e.target.value)})),s.wZ.addEventListener("change",(e=>{!async function(e){const t=s.Aw.get("zoneSelect"),n=s.Aw.get("zoneSpinner"),r=s.Aw.get("synthesisBtn");if((0,s.kD)(t,"Sélectionnez d'abord un zonage"),r&&(r.disabled=!0),o.n.clearSelectedDocument(),e){(0,s.Oh)(n,!0),o.n.setLoading(!0);try{const n=await i.K.loadZones(e);(0,s.fM)(t,n,"Sélectionnez une zone","Aucune zone disponible","zone")?((0,s.wc)(`${n.length} zones chargées`,"success"),o.n.setZones(n)):(0,s.wc)("Aucune zone trouvée pour ce zonage.","warning")}catch(e){console.error("Erreur lors du chargement des zones:",e),(0,s.wc)("Erreur de chargement des zones","error"),(0,s.kD)(t,"Erreur chargement")}finally{(0,s.Oh)(n,!1),o.n.setLoading(!1)}}else(0,s.wc)("Veuillez sélectionner un zonage.","info")}(e.target.value)})),s.zA.addEventListener("change",(e=>{const t=e.target.value,n=s.wZ.value;t&&n?async function(e,t,n=null){const r=s.Aw.get("synthesisBtn"),c=s.Aw.get("documentSpinner");if(r&&(r.disabled=!0),o.n.clearSelectedDocument(),!o.n.getState("user"))return(0,s.wc)("Veuillez vous connecter pour accéder aux documents.","warning"),null;if(!e||!t)return(0,s.wc)("Sélection incomplète pour rechercher le document.","info"),null;(0,s.Oh)(c,!0),o.n.setLoading(!0);try{const c=await i.K.findDocument(e,t,n);return c?(o.n.setSelectedDocument(c),r&&(r.disabled=!1),(0,s.wc)("Document trouvé !","success"),c):((0,s.wc)("Aucun document trouvé pour cette sélection.","warning"),null)}catch(e){return console.error("Erreur lors de la recherche du document:",e),(0,s.wc)("Erreur lors de la recherche du document","error"),null}finally{(0,s.Oh)(c,!1),o.n.setLoading(!1)}}(n,t,"7c0f2830-f3fc-4c69-911c-470286f91982"):(0,s.wc)("Veuillez d'abord sélectionner un zoning.","warning")})),s.X2.addEventListener("click",(function(){if(!(0,l.HW)())return(0,s.wc)("Authentification requise pour télécharger.","warning"),void(s.X2.disabled=!0);const e=a();e&&e.id?((0,s.wc)("Ouverture du document...","info"),window.open(`/plu-summary?id=${e.id}`,"_blank"),setTimeout((()=>{s.X2.disabled||(0,s.wc)(`Document trouvé (Source: ${(0,s.rf)(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")}),1500)):((0,s.wc)("Lien du document non disponible.","warning"),s.X2.disabled=!0)})),document.addEventListener("DOMContentLoaded",(async()=>{try{if(!await(0,u.Kv)(!1))return;(0,l.Mt)(),(0,s.kD)(s.ss,"Chargement..."),(0,s.kD)(s.wZ,"Sélectionnez d'abord une ville"),(0,s.kD)(s.zA,"Sélectionnez d'abord un zonage"),s.X2&&(s.X2.disabled=!0),s.ss&&s.wZ&&s.zA&&((0,s.wc)("Initialisation...","info"),await c())}catch(e){console.error("Error initializing app:",e)}}))},6354:(e,t,n)=>{n.d(t,{Aw:()=>i,Oh:()=>c,X2:()=>h,fM:()=>u,kD:()=>a,rf:()=>l,ss:()=>d,wZ:()=>g,wc:()=>s,zA:()=>p}),n(4587);const r={showToast:(e,t)=>console.log(`Toast: ${e} (${t})`)},o={setUIState:()=>{},setLoading:()=>{}},i=new class{constructor(){this.elements=new Map,this.initializeElements()}initializeElements(){this.register("citySelect","citySelect"),this.register("zoningSelect","zoningSelect"),this.register("zoneSelect","zoneSelect"),this.register("typologieSelect","typologieSelect"),this.register("synthesisBtn","synthesisBtn"),this.register("statusMessage","statusMessage"),this.register("citySpinner","citySpinner"),this.register("zoningSpinner","zoningSpinner"),this.register("zoneSpinner","zoneSpinner"),this.register("typologieSpinner","typologieSpinner"),this.register("documentSpinner","documentSpinner"),this.register("userStatus","userStatus"),this.register("logoutBtn","logoutBtn"),this.register("loginLink","loginLink"),this.register("signupLink","signupLink")}register(e,t){const n=document.getElementById(t);n&&this.elements.set(e,n)}get(e){return this.elements.get(e)||null}exists(e){return this.elements.has(e)&&null!==this.elements.get(e)}};function s(e,t="info"){const n=i.get("statusMessage");if(n&&(n.textContent=e,n.className=`status-message alert alert-${t}`,n.classList.remove("d-none")),"error"===t||"warning"===t)try{r.showToast(e,t,8e3)}catch(e){console.warn("Toast not available:",e)}try{o.setUIState(t,e)}catch(e){console.warn("State manager not available:",e)}}function c(e,t){const n="string"==typeof e?i.get(e):e;n&&(n.classList.toggle("d-none",!t),n.classList.toggle("hidden",!t));try{o.setLoading(t)}catch(e){console.warn("State manager not available:",e)}}function a(e,t){const n="string"==typeof e?i.get(e):e;n&&(n.innerHTML=`<option value="">${t||"Sélectionnez une option"}</option>`,n.disabled=!0,n.classList.remove("error"))}function l(e){return e?e.replace(/_/g," ").replace(/(^|\s)\w/g,(e=>e.toUpperCase())).trim():""}function u(e,t,n,r,o){const s="string"==typeof e?i.get(e):e;if(!s)return console.warn(`Select element not found: ${e}`),!1;if(a(s,n),!t||0===t.length)return s.innerHTML=`<option value="">${r}</option>`,s.disabled=!0,!1;const c=document.createDocumentFragment(),u=document.createElement("option");return u.value="",u.textContent=n,u.disabled=!0,u.selected=!0,c.appendChild(u),t.forEach((e=>{const t=document.createElement("option");t.value=e.id;let n="";n="city"===o?l(e.name):e.name,t.textContent=n,t.setAttribute("data-raw-name",e.name),c.appendChild(t)})),s.innerHTML="",s.appendChild(c),s.disabled=!1,s.classList.add("fade-in"),!0}const d=i.get("citySelect"),g=i.get("zoningSelect"),p=i.get("zoneSelect"),h=(i.get("typologieSelect"),i.get("synthesisBtn"));i.get("statusMessage"),i.get("citySpinner"),i.get("zoningSpinner"),i.get("zoneSpinner"),i.get("typologieSpinner"),i.get("documentSpinner"),i.get("userStatus"),i.get("logoutBtn"),i.get("loginLink"),i.get("signupLink")}},s={};function c(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e].call(n.exports,n,n.exports,c),n.exports}c.m=i,e=[],c.O=(t,n,r,o)=>{if(!n){var i=1/0;for(u=0;u<e.length;u++){for(var[n,r,o]=e[u],s=!0,a=0;a<n.length;a++)(!1&o||i>=o)&&Object.keys(c.O).every((e=>c.O[e](n[a])))?n.splice(a--,1):(s=!1,o<i&&(i=o));if(s){e.splice(u--,1);var l=r();void 0!==l&&(t=l)}}return t}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);c.r(o);var i={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,c.d(o,i),o},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>"js/"+e+".chunk.js",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",c.l=(e,t,n,i)=>{if(r[e])r[e].push(t);else{var s,a;if(void 0!==n)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var d=l[u];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==o+n){s=d;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,c.nc&&s.setAttribute("nonce",c.nc),s.setAttribute("data-webpack",o+n),s.src=e),r[e]=[t];var g=(t,n)=>{s.onerror=s.onload=null,clearTimeout(p);var o=r[e];if(delete r[e],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(g.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=g.bind(null,s.onerror),s.onload=g.bind(null,s.onload),a&&document.head.appendChild(s)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.j=524,c.p="/",(()=>{var e={209:0,524:0};c.f.j=(t,n)=>{var r=c.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var i=c.p+c.u(t),s=new Error;c.l(i,(n=>{if(c.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",s.name="ChunkLoadError",s.type=o,s.request=i,r[1](s)}}),"chunk-"+t,t)}},c.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[i,s,a]=n,l=0;if(i.some((t=>0!==e[t]))){for(r in s)c.o(s,r)&&(c.m[r]=s[r]);if(a)var u=a(c)}for(t&&t(n);l<i.length;l++)o=i[l],c.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return c.O(u)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=c.O(void 0,[76,671],(()=>c(1900)));a=c.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,