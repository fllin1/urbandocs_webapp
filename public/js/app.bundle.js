(()=>{"use strict";var e,n,o,t,r,i={587:(e,n,o)=>{o.d(n,{P:()=>t});const t={zone_au:"Zone AU",zone_auc1:"Zone AUC1",zone_auc2:"Zone AUC2",zone_auc3:"Zone AUC3",zone_aucru10:"Zone AUCRU10",zone_aud1:"Zone AUD1",zone_aud2:"Zone AUD2",zone_aud3:"Zone AUD3",zone_aud4:"Zone AUD4",zone_aue1:"Zone AUE1",zone_aup1r:"Zone AUP1r",zone_a:"Zone A",zone_al:"Zone AL",zone_n:"Zone N",zone_nl:"Zone NL",zone_ue1:"Zone UE1",zone_ue2:"Zone UE2",zone_ue3:"Zone UE3",zone_ue4:"Zone UE4",zone_uv:"Zone UV",zone_uz1:"Zone UZ1",zone_uz2:"Zone UZ2",zone_uz3:"Zone UZ3",zone_uz4:"Zone UZ4",zone_ua1:"Zone UA1",zone_ua2:"Zone UA2",zone_ua3:"Zone UA3",zone_ub:"Zone UB",zone_uc1:"Zone UC1",zone_uc2:"Zone UC2",zone_uc3:"Zone UC3",zone_ucru1:"Zone UCRU1",zone_ucru2:"Zone UCRU2",zone_ucru3:"Zone UCRU3",zone_ucru4:"Zone UCRU4",zone_ucru5:"Zone UCRU5",zone_ucru6:"Zone UCRU6",zone_ucru7:"Zone UCRU7",zone_ucru8:"Zone UCRU8",zone_ucru9:"Zone UCRU9",zone_ucru11:"Zone UCRU11",zone_ud1:"Zone UD1",zone_ud2:"Zone UD2",zone_ud3:"Zone UD3",zone_ud4:"Zone UD4"}},753:(e,n,o)=>{o.d(n,{N:()=>Z});const t=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");var r=o(587);const i=document.getElementById("citySelect"),a=document.getElementById("zoningSelect"),u=document.getElementById("zoneSelect"),c=(document.getElementById("typologieSelect"),document.getElementById("synthesisBtn")),l=document.getElementById("statusMessage"),s=document.getElementById("citySpinner"),d=document.getElementById("zoningSpinner"),g=document.getElementById("zoneSpinner"),m=(document.getElementById("typologieSpinner"),document.getElementById("documentSpinner"));function f(e,n="info"){l?(l.textContent=e,l.className=`status-message alert alert-${n}`,l.classList.remove("d-none")):console.warn("Status message element not found.")}function p(e,n){e&&e.classList.toggle("d-none",!n)}function h(e,n){e?(e.innerHTML=`<option value="">${n||"Sélectionnez une option"}</option>`,e.disabled=!0):console.warn("Select element not found for reset.")}function z(e){return e?e.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())):""}function y(e,n,o,t,i){return e?(h(e,o),n&&0!==n.length?(n.forEach((n=>{const o=document.createElement("option");o.value=n.id;let t="";t="zone"===i&&r.P.hasOwnProperty(n.name)?r.P[n.name]:z(n.name),o.textContent=t,e.appendChild(o)})),e.disabled=!1,!0):(e.innerHTML=`<option value="">${t}</option>`,e.disabled=!0,!1)):(console.warn("Select element not found for population."),!1)}document.getElementById("userStatus"),document.getElementById("logoutBtn"),document.getElementById("loginLink"),document.getElementById("signupLink");let b=null;function v(){return b}let _=null,U=!1;function E(e){_=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function S(e=!0){if(e&&!U&&await async function(){try{const{data:{session:e},error:n}=await t.auth.getSession();if(n||!e)return console.log("No valid session found"),E(null),U=!1,!1;const{error:o}=await t.auth.refreshSession();return o?(console.warn("Session validation failed:",o),await t.auth.signOut(),E(null),U=!1,!1):(E(e.user),U=!0,!0)}catch(e){return console.error("Session validation error:",e),E(null),U=!1,!1}}(),!e&&!_){const e=localStorage.getItem("currentUser");if(e)try{_=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return _}let I=null;function w(e){I=e;const n=document.getElementById("userStatus"),o=document.getElementById("loginLink"),t=document.getElementById("signupLink"),r=document.getElementById("logoutBtn");e?(n&&(n.classList.remove("hidden"),n.textContent="Votre compte"),o&&o.classList.add("hidden"),t&&t.classList.add("hidden"),r&&r.classList.remove("hidden"),console.log("Header updated: User is authenticated")):(n&&n.classList.add("hidden"),o&&o.classList.remove("hidden"),t&&t.classList.remove("hidden"),r&&r.classList.add("hidden"),console.log("Header updated: User is not authenticated"))}let Z=null;t.auth.onAuthStateChange(((e,n)=>{!function(e){if(Z=e,e){const e=v();e&&e.id?(c&&(c.disabled=!1),f(`Document trouvé (Source: ${z(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")):c&&(c.disabled=!0)}else c&&(c.disabled=!0)}(n?.user||null),"SIGNED_OUT"===e?console.log("App: User signed out"):"SIGNED_IN"===e?console.log("App: User signed in"):"INITIAL_SESSION"===e?console.log("App: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("App: Token refreshed")})),i.addEventListener("change",(e=>{!async function(e){if(h(a,"Sélectionnez d'abord une city"),h(u,"Sélectionnez d'abord un zoning"),c.disabled=!0,b=null,e){p(d,!0),f("Chargement des zonings...","info"),a.disabled=!0;try{const{data:n,error:o}=await t.from("zonings").select("id, name").eq("city_id",e).order("name");if(o)throw o;y(a,n.map((e=>({id:e.id,name:e.name}))),"Sélectionnez un zoning","Aucun zonage disponible","zoning")?f(`Zonages chargés : ${n.length}`,"info"):f("Aucun zonage trouvé pour cette city.","warning")}catch(e){console.error("Erreur lors du chargement des zonings:",e),h(a,"Erreur chargement")}finally{p(d,!1)}}else f("Veuillez sélectionner une city.","info")}(e.target.value)})),a.addEventListener("change",(e=>{!async function(e){if(h(u,"Sélectionnez d'abord un zoning"),c.disabled=!0,b=null,e){p(g,!0),f("Chargement des zones...","info"),u.disabled=!0;try{const{data:n,error:o}=await t.from("zones").select("id, name").eq("zoning_id",e).order("name");if(o)throw o;y(u,n.map((e=>({id:e.id,name:e.name}))),"Sélectionnez une zone","Aucune zone disponible","zone")?f(`Zones chargées : ${n.length}`,"info"):f("Aucune zone trouvée pour ce zoning.","warning")}catch(e){console.error("Erreur lors du chargement des zones:",e),h(u,"Erreur chargement")}finally{p(g,!1)}}else f("Veuillez sélectionner un zoning.","info")}(e.target.value)})),u.addEventListener("change",(e=>{const n=e.target.value,o=a.value;n&&o?async function(e,n){if(c.disabled=!0,b=null,Z)if(e&&n){p(m,!0),f("Recherche du document...","info");try{const{data:o,error:r}=await t.from("documents").select("id, source_plu_date").eq("zoning_id",e).eq("zone_id",n).eq("typology_id","7c0f2830-f3fc-4c69-911c-470286f91982").single();if(r){if("PGRST116"===r.code)return void f("Aucun document trouvé pour cette zone.","warning");throw r}b=o,Z&&o?.id?(c.disabled=!1,f(`Document trouvé (Source: ${z(o.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")):(b=null,f("Document trouvé mais lien manquant.","warning"))}catch(e){console.error("Erreur lors de la recherche du document:",e),b=null}finally{p(m,!1)}}else f("Sélection incomplète pour rechercher le document.","info");else f("Veuillez vous connecter pour accéder aux documents.","warning")}(o,n):f("Veuillez d'abord sélectionner un zoning.","warning")})),c.addEventListener("click",(function(){if(!I)return f("Authentification requise pour télécharger.","warning"),void(c.disabled=!0);const e=v();e&&e.id?(f("Ouverture du document...","info"),window.open(`/plu-summary?id=${e.id}`,"_blank"),setTimeout((()=>{c.disabled||f(`Document trouvé (Source: ${z(e.source_plu_date)||"Non spécifiée"}). Prêt à consulter.`,"success")}),1500)):(f("Lien du document non disponible.","warning"),c.disabled=!0)})),document.addEventListener("DOMContentLoaded",(async()=>{console.log("Initializing header authentication..."),function(){const e=document.getElementById("logoutBtn");e&&(e.replaceWith(e.cloneNode(!0)),document.getElementById("logoutBtn").addEventListener("click",(async e=>{e.preventDefault(),console.log("Logout initiated from header");try{const{error:e}=await t.auth.signOut();e?(console.error("Error logging out:",e.message),alert("Erreur lors de la déconnexion. Veuillez réessayer.")):console.log("Logout successful, redirecting to home")}catch(e){console.error("Exception during logout:",e),alert("Une erreur inattendue s'est produite lors de la déconnexion.")}})))}(),t.auth.onAuthStateChange(((e,n)=>{const o=n?.user||null;E(o),w(o),"SIGNED_OUT"===e?(console.log("Header auth: User signed out, redirecting to home"),setTimeout((()=>{window.location.href="/"}),100)):"SIGNED_IN"===e?console.log("Header auth: User signed in"):"INITIAL_SESSION"===e?console.log("Header auth: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("Header auth: Token refreshed")})),w(S()),console.log("Header authentication initialized"),h(i,"Chargement..."),h(a,"Sélectionnez d'abord une ville"),h(u,"Sélectionnez d'abord un zonage"),c&&(c.disabled=!0),i&&a&&u&&(f("Initialisation...","info"),await async function(){p(s,!0),f("Chargement des cities...","info"),i.disabled=!0;try{const{data:e,error:n}=await t.from("cities").select("id, name").order("name");if(n)throw n;y(i,e.map((e=>({id:e.id,name:e.name}))),"Sélectionnez une city","Aucune ville disponible","city")?f(`Villes chargées : ${e.length}`,"info"):f(null===Z?"Veuillez vous connecter pour accéder aux données.":"Aucune ville n'a été trouvée.","warning")}catch(e){console.error("Erreur lors du chargement des cities:",e),h(i,"Erreur chargement")}finally{p(s,!1)}}())}))}},a={};function u(e){var n=a[e];if(void 0!==n)return n.exports;var o=a[e]={exports:{}};return i[e].call(o.exports,o,o.exports,u),o.exports}u.m=i,e=[],u.O=(n,o,t,r)=>{if(!o){var i=1/0;for(s=0;s<e.length;s++){for(var[o,t,r]=e[s],a=!0,c=0;c<o.length;c++)(!1&r||i>=r)&&Object.keys(u.O).every((e=>u.O[e](o[c])))?o.splice(c--,1):(a=!1,r<i&&(i=r));if(a){e.splice(s--,1);var l=t();void 0!==l&&(n=l)}}return n}r=r||0;for(var s=e.length;s>0&&e[s-1][2]>r;s--)e[s]=e[s-1];e[s]=[o,t,r]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,u.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var r=Object.create(null);u.r(r);var i={};n=n||[null,o({}),o([]),o(o)];for(var a=2&t&&e;"object"==typeof a&&!~n.indexOf(a);a=o(a))Object.getOwnPropertyNames(a).forEach((n=>i[n]=()=>e[n]));return i.default=()=>e,u.d(r,i),r},u.d=(e,n)=>{for(var o in n)u.o(n,o)&&!u.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},u.f={},u.e=e=>Promise.all(Object.keys(u.f).reduce(((n,o)=>(u.f[o](e,n),n)),[])),u.u=e=>"js/"+e+".bundle.js",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t={},r="urbandocs_webapp:",u.l=(e,n,o,i)=>{if(t[e])t[e].push(n);else{var a,c;if(void 0!==o)for(var l=document.getElementsByTagName("script"),s=0;s<l.length;s++){var d=l[s];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==r+o){a=d;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,u.nc&&a.setAttribute("nonce",u.nc),a.setAttribute("data-webpack",r+o),a.src=e),t[e]=[n];var g=(n,o)=>{a.onerror=a.onload=null,clearTimeout(m);var r=t[e];if(delete t[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(o))),n)return n(o)},m=setTimeout(g.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=g.bind(null,a.onerror),a.onload=g.bind(null,a.onload),c&&document.head.appendChild(a)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var n=u.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var t=o.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=o[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e+"../"})(),(()=>{var e={54:0,524:0};u.f.j=(n,o)=>{var t=u.o(e,n)?e[n]:void 0;if(0!==t)if(t)o.push(t[2]);else{var r=new Promise(((o,r)=>t=e[n]=[o,r]));o.push(t[2]=r);var i=u.p+u.u(n),a=new Error;u.l(i,(o=>{if(u.o(e,n)&&(0!==(t=e[n])&&(e[n]=void 0),t)){var r=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;a.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,t[1](a)}}),"chunk-"+n,n)}},u.O.j=n=>0===e[n];var n=(n,o)=>{var t,r,[i,a,c]=o,l=0;if(i.some((n=>0!==e[n]))){for(t in a)u.o(a,t)&&(u.m[t]=a[t]);if(c)var s=c(u)}for(n&&n(o);l<i.length;l++)r=i[l],u.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return u.O(s)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))})();var c=u.O(void 0,[303],(()=>u(753)));c=u.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,