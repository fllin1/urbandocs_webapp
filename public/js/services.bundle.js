"use strict";(self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[]).push([[671],{141:(e,t,r)=>{r.d(t,{K:()=>a});var n=r(9660),i=r(1235);const a=new class{constructor(){this.cache=new Map,this.cacheTimeout=12e4,this.retryAttempts=3,this.retryDelay=1e3}async withRetry(e,t=this.retryAttempts){for(let r=0;r<t;r++)try{return await e()}catch(e){if(r===t-1)throw e;await new Promise((e=>setTimeout(e,this.retryDelay*(r+1))))}}async withCache(e,t,r=this.cacheTimeout){const n=this.cache.get(e);if(n&&Date.now()-n.timestamp<r)return n.data;const i=await t();return this.cache.set(e,{data:i,timestamp:Date.now()}),i}handleError(e,t){console.error(`API Error in ${t}:`,e);let r="Une erreur inattendue s'est produite";throw"PGRST116"===e.code?r="Aucune donnée trouvée":"42P01"===e.code?r="Service temporairement indisponible":e.message?.includes("network")&&(r="Problème de connexion réseau"),i.n.setError({message:r,code:e.code}),new Error(r)}async loadCities(){try{return await this.withCache("cities",(async()=>await this.withRetry((async()=>{const{data:e,error:t}=await n.N.from("cities").select("id, name").order("name");if(t)throw t;return e}))))}catch(e){this.handleError(e,"loadCities")}}async loadZonings(e){if(!e)throw new Error("City ID is required");try{return await this.withCache(`zonings-${e}`,(async()=>await this.withRetry((async()=>{const{data:t,error:r}=await n.N.from("zonings").select("id, name").eq("city_id",e).order("name");if(r)throw r;return t}))))}catch(e){this.handleError(e,"loadZonings")}}async loadZones(e){if(!e)throw new Error("Zoning ID is required");try{return await this.withCache(`zones-${e}`,(async()=>await this.withRetry((async()=>{const{data:t,error:r}=await n.N.from("zones").select("id, name").eq("zoning_id",e).order("name");if(r)throw r;return t}))))}catch(e){this.handleError(e,"loadZones")}}async findDocument(e,t,r){if(!e||!t)throw new Error("Zoning ID and Zone ID are required");try{return await this.withRetry((async()=>{const{data:i,error:a}=await n.N.from("documents").select("\n            id,\n            html_content,\n            pdf_storage_path,\n            source_plu_date,\n            source_plu_url,\n            zoning:zonings(name, city:cities(name)),\n            zone:zones(name)\n          ").eq("zoning_id",e).eq("zone_id",t).eq("typology_id",r).single();if(a)throw a;return i}))}catch(e){this.handleError(e,"findDocument")}}async loadCitiesWithZonings(){try{return await this.withCache("cities-with-zonings",(async()=>await this.withRetry((async()=>{const{data:e,error:t}=await n.N.from("cities").select("\n              id,\n              name,\n              zonings(id, name)\n            ").order("name");if(t)throw t;return e}))))}catch(e){this.handleError(e,"loadCitiesWithZonings")}}clearCache(e){if(e)for(const t of this.cache.keys())t.includes(e)&&this.cache.delete(t);else this.cache.clear()}getCacheStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,