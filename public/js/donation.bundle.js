(()=>{"use strict";var e,t,r,n,o,i={5835:(e,t,r)=>{var n,o=r(9251),i="basil",a="https://js.stripe.com",s="".concat(a,"/").concat(i,"/stripe.js"),c=/^https:\/\/js\.stripe\.com\/v3\/?(\?.*)?$/,l=/^https:\/\/js\.stripe\.com\/(v3|[a-z]+)\/stripe\.js(\?.*)?$/,d="loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used",u=function(e){var t=e&&!e.advancedFraudSignals?"?advancedFraudSignals=false":"",r=document.createElement("script");r.src="".concat(s).concat(t);var n=document.head||document.body;if(!n)throw new Error("Expected document.body not to be null. Stripe.js requires a <body> element.");return n.appendChild(r),r},p=null,f=null,m=null,h=!1,v=function(){return n||(n=(e=null,null!==p?p:(p=new Promise((function(t,r){if("undefined"!=typeof window&&"undefined"!=typeof document)if(window.Stripe&&e&&console.warn(d),window.Stripe)t(window.Stripe);else try{var n=function(){for(var e,t=document.querySelectorAll('script[src^="'.concat(a,'"]')),r=0;r<t.length;r++){var n=t[r];if(e=n.src,c.test(e)||l.test(e))return n}return null}();if(n&&e)console.warn(d);else if(n){if(n&&null!==m&&null!==f){var o;n.removeEventListener("load",m),n.removeEventListener("error",f),null===(o=n.parentNode)||void 0===o||o.removeChild(n),n=u(e)}}else n=u(e);m=function(e,t){return function(){window.Stripe?e(window.Stripe):t(new Error("Stripe.js not available"))}}(t,r),f=function(e){return function(t){e(new Error("Failed to load Stripe.js",{cause:t}))}}(r),n.addEventListener("load",m),n.addEventListener("error",f)}catch(e){return void r(e)}else t(null)}))).catch((function(e){return p=null,Promise.reject(e)}))).catch((function(e){return n=null,Promise.reject(e)})));var e};Promise.resolve().then((function(){return v()})).catch((function(e){h||console.warn(e)}));let b;function y(e){const t=document.getElementById("donateBtn");t&&e>0?(t.disabled=!1,t.innerHTML=`Faire un don de&nbsp;<span id="selectedAmount">${e}</span>€`):t&&(t.disabled=!0)}function g(e,t="info"){document.querySelectorAll(".notification").forEach((e=>e.remove()));const r=document.createElement("div");return r.className=`notification notification-${t}`,r.textContent=e,Object.assign(r.style,{position:"fixed",top:"20px",right:"20px",padding:"15px 20px",borderRadius:"5px",color:"white",fontWeight:"bold",zIndex:"10000",maxWidth:"400px",backgroundColor:"success"===t?"#10b981":"error"===t?"#ef4444":"#3b82f6"}),document.body.appendChild(r),setTimeout((()=>{r.parentNode&&r.remove()}),5e3),r}async function w(){try{if(!await async function(){try{if(b=await function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];h=!0;var n=Date.now();return v().then((function(e){return function(e,t,r){if(null===e)return null;var n=t[0].match(/^pk_test/),o=function(e){return 3===e?"v3":e}(e.version),a=i;n&&o!==a&&console.warn("Stripe.js@".concat(o," was loaded on the page, but @stripe/stripe-js@").concat("7.3.1"," expected Stripe.js@").concat(a,". This may result in unexpected behavior. For more information, see https://docs.stripe.com/sdks/stripejs-versioning"));var s=e.apply(void 0,t);return function(e,t){e&&e._registerWrapper&&e._registerWrapper({name:"stripe-js",version:"7.3.1",startTime:t})}(s,r),s}(e,t,n)}))}("pk_test_..."),!b)throw new Error("Stripe failed to load");return console.log("Stripe initialized successfully"),!0}catch(e){return console.error("Error loading Stripe:",e),g("Erreur de chargement du système de paiement","error"),!1}}())throw new Error("Failed to initialize Stripe");if(!function(){const e=document.querySelectorAll(".amount-btn"),t=document.getElementById("customAmount"),r=document.getElementById("selectedAmount"),n=document.getElementById("donateBtn");if(!(e.length&&t&&r&&n))return console.error("Required donation form elements not found"),!1;let o=5;return e.forEach((n=>{n.addEventListener("click",(()=>{e.forEach((e=>e.classList.remove("selected"))),n.classList.add("selected"),o=parseInt(n.dataset.amount),r.textContent=o,t.value="",y(o)}))})),t.addEventListener("input",(t=>{const n=parseInt(t.target.value);if(n&&n>0)e.forEach((e=>e.classList.remove("selected"))),o=n,r.textContent=o,y(o);else if(!t.target.value){const e=document.querySelector('.amount-btn[data-amount="5"]');e&&(e.classList.add("selected"),o=5,r.textContent=o,y(o))}})),n.addEventListener("click",(()=>{o>0&&async function(e){if(!b)return void g("Système de paiement non disponible","error");const t=document.getElementById("donateBtn"),r=t.innerHTML;t.disabled=!0,t.innerHTML="Préparation du paiement...";try{const t=await fetch("https://ofeyssipibktmbfebibo.supabase.co/functions/v1/create-donation-session",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU"},body:JSON.stringify({amount:100*e,currency:"eur"})});if(!t.ok)throw new Error("Failed to create checkout session");const{sessionId:r}=await t.json(),{error:n}=await b.redirectToCheckout({sessionId:r});if(n)throw n}catch(e){console.error("Error processing donation:",e),g("Erreur lors du traitement du don. Veuillez réessayer.","error"),t.disabled=!1,t.innerHTML=r}}(o)})),console.log("Donation amount selection setup complete"),!0}())throw new Error("Failed to setup amount selection");return console.log("Donation system initialized successfully"),!0}catch(e){return console.error("Error initializing donation system:",e),g("Erreur d'initialisation du système de don","error"),!1}}document.addEventListener("DOMContentLoaded",(async()=>{try{(0,o.Mt)(),await w()?console.log("Donation page initialized successfully"):console.error("Failed to initialize donation system")}catch(e){console.error("Error initializing donation page:",e)}}))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return i[e].call(r.exports,r,r.exports,s),r.exports}s.m=i,e=[],s.O=(t,r,n,o)=>{if(!r){var i=1/0;for(d=0;d<e.length;d++){for(var[r,n,o]=e[d],a=!0,c=0;c<r.length;c++)(!1&o||i>=o)&&Object.keys(s.O).every((e=>s.O[e](r[c])))?r.splice(c--,1):(a=!1,o<i&&(i=o));if(a){e.splice(d--,1);var l=n();void 0!==l&&(t=l)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[r,n,o]},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var o=Object.create(null);s.r(o);var i={};t=t||[null,r({}),r([]),r(r)];for(var a=2&n&&e;"object"==typeof a&&!~t.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(o,i),o},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},o="urbandocs_webapp:",s.l=(e,t,r,i)=>{if(n[e])n[e].push(t);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==o+r){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",o+r),a.src=e),n[e]=[t];var p=(t,r)=>{a.onerror=a.onload=null,clearTimeout(f);var o=n[e];if(delete n[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(r))),t)return t(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=357,(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={357:0};s.f.j=(t,r)=>{var n=s.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var o=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=o);var i=s.p+s.u(t),a=new Error;s.l(i,(r=>{if(s.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",a.name="ChunkLoadError",a.type=o,a.request=i,n[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[i,a,c]=r,l=0;if(i.some((t=>0!==e[t]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);if(c)var d=c(s)}for(t&&t(r);l<i.length;l++)o=i[l],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return s.O(d)},r=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var c=s.O(void 0,[76],(()=>s(5835)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,