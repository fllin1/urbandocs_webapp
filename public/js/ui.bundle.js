(()=>{"use strict";var e,t,n,r={6354:(e,t,n)=>{n(4587);const r=new class{constructor(){this.elements=new Map,this.initializeElements()}initializeElements(){this.register("citySelect","citySelect"),this.register("zoningSelect","zoningSelect"),this.register("zoneSelect","zoneSelect"),this.register("typologieSelect","typologieSelect"),this.register("synthesisBtn","synthesisBtn"),this.register("statusMessage","statusMessage"),this.register("citySpinner","citySpinner"),this.register("zoningSpinner","zoningSpinner"),this.register("zoneSpinner","zoneSpinner"),this.register("typologieSpinner","typologieSpinner"),this.register("documentSpinner","documentSpinner"),this.register("userStatus","userStatus"),this.register("logoutBtn","logoutBtn"),this.register("loginLink","loginLink"),this.register("signupLink","signupLink")}register(e,t){const n=document.getElementById(t);n&&this.elements.set(e,n)}get(e){return this.elements.get(e)||null}exists(e){return this.elements.has(e)&&null!==this.elements.get(e)}};r.get("citySelect"),r.get("zoningSelect"),r.get("zoneSelect"),r.get("typologieSelect"),r.get("synthesisBtn"),r.get("statusMessage"),r.get("citySpinner"),r.get("zoningSpinner"),r.get("zoneSpinner"),r.get("typologieSpinner"),r.get("documentSpinner"),r.get("userStatus"),r.get("logoutBtn"),r.get("loginLink"),r.get("signupLink")}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,s),n.exports}s.m=r,e=[],s.O=(t,n,r,i)=>{if(!n){var o=1/0;for(c=0;c<e.length;c++){for(var[n,r,i]=e[c],g=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(s.O).every((e=>s.O[e](n[l])))?n.splice(l--,1):(g=!1,i<o&&(o=i));if(g){e.splice(c--,1);var u=r();void 0!==u&&(t=u)}}return t}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[n,r,i]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);s.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var g=2&r&&e;"object"==typeof g&&!~t.indexOf(g);g=n(g))Object.getOwnPropertyNames(g).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,s.d(i,o),i},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.e=()=>Promise.resolve(),s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=209,(()=>{var e={209:0};s.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,g,l]=n,u=0;if(o.some((t=>0!==e[t]))){for(r in g)s.o(g,r)&&(s.m[r]=g[r]);if(l)var c=l(s)}for(t&&t(n);u<o.length;u++)i=o[u],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return s.O(c)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=s.O(void 0,[76],(()=>s(6354)));o=s.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvdWkuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ1QkFBSUEsRUNDQUMsRUFEQUMsRSwwQkN3RUosTUFBTUMsRUFBYyxJQTlDcEIsTUFDRSxXQUFBQyxHQUNFQyxLQUFLQyxTQUFXLElBQUlDLElBQ3BCRixLQUFLRyxvQkFDUCxDQUVBLGtCQUFBQSxHQUVFSCxLQUFLSSxTQUFTLGFBQWMsY0FDNUJKLEtBQUtJLFNBQVMsZUFBZ0IsZ0JBQzlCSixLQUFLSSxTQUFTLGFBQWMsY0FDNUJKLEtBQUtJLFNBQVMsa0JBQW1CLG1CQUNqQ0osS0FBS0ksU0FBUyxlQUFnQixnQkFDOUJKLEtBQUtJLFNBQVMsZ0JBQWlCLGlCQUcvQkosS0FBS0ksU0FBUyxjQUFlLGVBQzdCSixLQUFLSSxTQUFTLGdCQUFpQixpQkFDL0JKLEtBQUtJLFNBQVMsY0FBZSxlQUM3QkosS0FBS0ksU0FBUyxtQkFBb0Isb0JBQ2xDSixLQUFLSSxTQUFTLGtCQUFtQixtQkFHakNKLEtBQUtJLFNBQVMsYUFBYyxjQUM1QkosS0FBS0ksU0FBUyxZQUFhLGFBQzNCSixLQUFLSSxTQUFTLFlBQWEsYUFDM0JKLEtBQUtJLFNBQVMsYUFBYyxhQUM5QixDQUVBLFFBQUFBLENBQVNDLEVBQU1DLEdBQ2IsTUFBTUMsRUFBVUMsU0FBU0MsZUFBZUgsR0FDcENDLEdBQ0ZQLEtBQUtDLFNBQVNTLElBQUlMLEVBQU1FLEVBRTVCLENBRUEsR0FBQUksQ0FBSU4sR0FDRixPQUFPTCxLQUFLQyxTQUFTVSxJQUFJTixJQUFTLElBQ3BDLENBRUEsTUFBQU8sQ0FBT1AsR0FDTCxPQUFPTCxLQUFLQyxTQUFTWSxJQUFJUixJQUFxQyxPQUE1QkwsS0FBS0MsU0FBU1UsSUFBSU4sRUFDdEQsR0E2TmlCUCxFQUFZYSxJQUFJLGNBQ2RiLEVBQVlhLElBQUksZ0JBQ2xCYixFQUFZYSxJQUFJLGNBQ1hiLEVBQVlhLElBQUksbUJBQ25CYixFQUFZYSxJQUFJLGdCQUNmYixFQUFZYSxJQUFJLGlCQUVsQmIsRUFBWWEsSUFBSSxlQUNkYixFQUFZYSxJQUFJLGlCQUNsQmIsRUFBWWEsSUFBSSxlQUNYYixFQUFZYSxJQUFJLG9CQUNqQmIsRUFBWWEsSUFBSSxtQkFFckJiLEVBQVlhLElBQUksY0FDakJiLEVBQVlhLElBQUksYUFDaEJiLEVBQVlhLElBQUksYUFDZmIsRUFBWWEsSUFBSSxhLEdDaFQvQkcsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JMLEdBQVVNLEtBQUtGLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNKLEdBR3BFSyxFQUFPRCxPQUNmLENBR0FKLEVBQW9CUSxFQUFJRixFSHpCcEIxQixFQUFXLEdBQ2ZvQixFQUFvQlMsRUFBSSxDQUFDQyxFQUFRQyxFQUFVQyxFQUFJQyxLQUM5QyxJQUFHRixFQUFILENBTUEsSUFBSUcsRUFBZUMsSUFDbkIsSUFBU0MsRUFBSSxFQUFHQSxFQUFJcEMsRUFBU3FDLE9BQVFELElBQUssQ0FHekMsSUFGQSxJQUFLTCxFQUFVQyxFQUFJQyxHQUFZakMsRUFBU29DLEdBQ3BDRSxHQUFZLEVBQ1BDLEVBQUksRUFBR0EsRUFBSVIsRUFBU00sT0FBUUUsTUFDcEIsRUFBWE4sR0FBc0JDLEdBQWdCRCxJQUFhTyxPQUFPQyxLQUFLckIsRUFBb0JTLEdBQUdhLE9BQU9DLEdBQVN2QixFQUFvQlMsRUFBRWMsR0FBS1osRUFBU1EsTUFDOUlSLEVBQVNhLE9BQU9MLElBQUssSUFFckJELEdBQVksRUFDVEwsRUFBV0MsSUFBY0EsRUFBZUQsSUFHN0MsR0FBR0ssRUFBVyxDQUNidEMsRUFBUzRDLE9BQU9SLElBQUssR0FDckIsSUFBSVMsRUFBSWIsU0FDRVQsSUFBTnNCLElBQWlCZixFQUFTZSxFQUMvQixDQUNELENBQ0EsT0FBT2YsQ0FuQlAsQ0FKQ0csRUFBV0EsR0FBWSxFQUN2QixJQUFJLElBQUlHLEVBQUlwQyxFQUFTcUMsT0FBUUQsRUFBSSxHQUFLcEMsRUFBU29DLEVBQUksR0FBRyxHQUFLSCxFQUFVRyxJQUFLcEMsRUFBU29DLEdBQUtwQyxFQUFTb0MsRUFBSSxHQUNyR3BDLEVBQVNvQyxHQUFLLENBQUNMLEVBQVVDLEVBQUlDLElDTDNCL0IsRUFBV3NDLE9BQU9NLGVBQWtCQyxHQUFTUCxPQUFPTSxlQUFlQyxHQUFTQSxHQUFTQSxFQUFhLFVBUXRHM0IsRUFBb0I0QixFQUFJLFNBQVNDLEVBQU9DLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUQsRUFBUTVDLEtBQUs0QyxJQUNoQixFQUFQQyxFQUFVLE9BQU9ELEVBQ3BCLEdBQW9CLGlCQUFWQSxHQUFzQkEsRUFBTyxDQUN0QyxHQUFXLEVBQVBDLEdBQWFELEVBQU1FLFdBQVksT0FBT0YsRUFDMUMsR0FBVyxHQUFQQyxHQUFvQyxtQkFBZkQsRUFBTUcsS0FBcUIsT0FBT0gsQ0FDNUQsQ0FDQSxJQUFJSSxFQUFLYixPQUFPYyxPQUFPLE1BQ3ZCbEMsRUFBb0J5QixFQUFFUSxHQUN0QixJQUFJRSxFQUFNLENBQUMsRUFDWHRELEVBQWlCQSxHQUFrQixDQUFDLEtBQU1DLEVBQVMsQ0FBQyxHQUFJQSxFQUFTLElBQUtBLEVBQVNBLElBQy9FLElBQUksSUFBSXNELEVBQWlCLEVBQVBOLEdBQVlELEVBQXlCLGlCQUFYTyxLQUF5QnZELEVBQWV3RCxRQUFRRCxHQUFVQSxFQUFVdEQsRUFBU3NELEdBQ3hIaEIsT0FBT2tCLG9CQUFvQkYsR0FBU0csU0FBU2hCLEdBQVNZLEVBQUlaLEdBQU8sSUFBT00sRUFBTU4sS0FJL0UsT0FGQVksRUFBYSxRQUFJLElBQU0sRUFDdkJuQyxFQUFvQndDLEVBQUVQLEVBQUlFLEdBQ25CRixDQUNSLEVHeEJBakMsRUFBb0J3QyxFQUFJLENBQUNwQyxFQUFTcUMsS0FDakMsSUFBSSxJQUFJbEIsS0FBT2tCLEVBQ1h6QyxFQUFvQjBDLEVBQUVELEVBQVlsQixLQUFTdkIsRUFBb0IwQyxFQUFFdEMsRUFBU21CLElBQzVFSCxPQUFPdUIsZUFBZXZDLEVBQVNtQixFQUFLLENBQUVxQixZQUFZLEVBQU1oRCxJQUFLNkMsRUFBV2xCLE1DRDNFdkIsRUFBb0I2QyxFQUFJLElBQU9DLFFBQVFDLFVDSHZDL0MsRUFBb0JnRCxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmQyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU9oRSxNQUFRLElBQUlpRSxTQUFTLGNBQWIsRUFDaEIsQ0FBRSxNQUFPTCxHQUNSLEdBQXNCLGlCQUFYTSxPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCbkQsRUFBb0IwQyxFQUFJLENBQUNmLEVBQUt5QixJQUFVaEMsT0FBT2lDLFVBQVVDLGVBQWUvQyxLQUFLb0IsRUFBS3lCLEdDQ2xGcEQsRUFBb0J5QixFQUFLckIsSUFDSCxvQkFBWG1ELFFBQTBCQSxPQUFPQyxhQUMxQ3BDLE9BQU91QixlQUFldkMsRUFBU21ELE9BQU9DLFlBQWEsQ0FBRTNCLE1BQU8sV0FFN0RULE9BQU91QixlQUFldkMsRUFBUyxhQUFjLENBQUV5QixPQUFPLEtDTHZEN0IsRUFBb0JtQixFQUFJLEksTUNLeEIsSUFBSXNDLEVBQWtCLENBQ3JCLElBQUssR0FhTnpELEVBQW9CUyxFQUFFVSxFQUFLdUMsR0FBMEMsSUFBN0JELEVBQWdCQyxHQUd4RCxJQUFJQyxFQUF1QixDQUFDQyxFQUE0QkMsS0FDdkQsSUFHSTVELEVBQVV5RCxHQUhUL0MsRUFBVW1ELEVBQWFDLEdBQVdGLEVBR2hCN0MsRUFBSSxFQUMzQixHQUFHTCxFQUFTcUQsTUFBTXpFLEdBQWdDLElBQXhCa0UsRUFBZ0JsRSxLQUFhLENBQ3RELElBQUlVLEtBQVk2RCxFQUNaOUQsRUFBb0IwQyxFQUFFb0IsRUFBYTdELEtBQ3JDRCxFQUFvQlEsRUFBRVAsR0FBWTZELEVBQVk3RCxJQUdoRCxHQUFHOEQsRUFBUyxJQUFJckQsRUFBU3FELEVBQVEvRCxFQUNsQyxDQUVBLElBREc0RCxHQUE0QkEsRUFBMkJDLEdBQ3JEN0MsRUFBSUwsRUFBU00sT0FBUUQsSUFDekIwQyxFQUFVL0MsRUFBU0ssR0FDaEJoQixFQUFvQjBDLEVBQUVlLEVBQWlCQyxJQUFZRCxFQUFnQkMsSUFDckVELEVBQWdCQyxHQUFTLEtBRTFCRCxFQUFnQkMsR0FBVyxFQUU1QixPQUFPMUQsRUFBb0JTLEVBQUVDLElBRzFCdUQsRUFBcUJDLEtBQW1DLDZCQUFJQSxLQUFtQyw4QkFBSyxHQUN4R0QsRUFBbUIxQixRQUFRb0IsRUFBcUJRLEtBQUssS0FBTSxJQUMzREYsRUFBbUJHLEtBQU9ULEVBQXFCUSxLQUFLLEtBQU1GLEVBQW1CRyxLQUFLRCxLQUFLRixHLEtDN0N2RixJQUFJSSxFQUFzQnJFLEVBQW9CUyxPQUFFTixFQUFXLENBQUMsS0FBSyxJQUFPSCxFQUFvQixRQUM1RnFFLEVBQXNCckUsRUFBb0JTLEVBQUU0RCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy91aS5qcyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9ydW50aW1lSWQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCIvLyBwdWJsaWMvanMvdWkuanNcbi8qKlxuICogVUkgTW9kdWxlXG4gKiBAbW9kdWxlIHVpXG4gKiBAZGVzY3JpcHRpb24gVXBncmFkZWQgVUkgbW9kdWxlIHdpdGggZW5oYW5jZWQgY29tcG9uZW50cyBhbmQgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICogQHZlcnNpb24gMC4xLjBcbiAqIEBhdXRob3IgR3JleVBhbmRhXG4gKlxuICogQGNoYW5nZWxvZ1xuICogLSAwLjEuMCAoMjAyNS0wMS0yOSk6IE1ham9yIHJlZmFjdG9yIHdpdGggZW5oYW5jZWQgY29tcG9uZW50cyBhbmQgc3RhdGUgbWFuYWdlbWVudCBpbnRlZ3JhdGlvblxuICogLSAwLjAuMSAoMjAyNS0wNC0yNik6IEluaXRpYWwgdmVyc2lvbiB3aXRoIGJhc2ljIFVJIGZ1bmN0aW9ucyBhbmQgZWxlbWVudCByZWZlcmVuY2VzXG4gKi9cblxuaW1wb3J0IHsgem9uZU5hbWVNYXBwaW5ncyB9IGZyb20gXCIuL21hcHBpbmdzLmpzXCI7XG5cbi8vIFNpbXBsZSBmYWxsYmFja3MgZm9yIGVuaGFuY2VkIGZlYXR1cmVzXG5jb25zdCBVSUNvbXBvbmVudHMgPSB7XG4gIHNob3dUb2FzdDogKG1lc3NhZ2UsIHR5cGUpID0+IGNvbnNvbGUubG9nKGBUb2FzdDogJHttZXNzYWdlfSAoJHt0eXBlfSlgKSxcbn07XG5cbmNvbnN0IHN0YXRlTWFuYWdlciA9IHtcbiAgc2V0VUlTdGF0ZTogKCkgPT4ge30sXG4gIHNldExvYWRpbmc6ICgpID0+IHt9LFxufTtcblxuLy8gLS0tIEVuaGFuY2VkIERPTSBFbGVtZW50IE1hbmFnZW1lbnQgLS0tXG5jbGFzcyBET01FbGVtZW50cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5pbml0aWFsaXplRWxlbWVudHMoKTtcbiAgfVxuXG4gIGluaXRpYWxpemVFbGVtZW50cygpIHtcbiAgICAvLyBGb3JtIGVsZW1lbnRzXG4gICAgdGhpcy5yZWdpc3RlcihcImNpdHlTZWxlY3RcIiwgXCJjaXR5U2VsZWN0XCIpO1xuICAgIHRoaXMucmVnaXN0ZXIoXCJ6b25pbmdTZWxlY3RcIiwgXCJ6b25pbmdTZWxlY3RcIik7XG4gICAgdGhpcy5yZWdpc3RlcihcInpvbmVTZWxlY3RcIiwgXCJ6b25lU2VsZWN0XCIpO1xuICAgIHRoaXMucmVnaXN0ZXIoXCJ0eXBvbG9naWVTZWxlY3RcIiwgXCJ0eXBvbG9naWVTZWxlY3RcIik7XG4gICAgdGhpcy5yZWdpc3RlcihcInN5bnRoZXNpc0J0blwiLCBcInN5bnRoZXNpc0J0blwiKTtcbiAgICB0aGlzLnJlZ2lzdGVyKFwic3RhdHVzTWVzc2FnZVwiLCBcInN0YXR1c01lc3NhZ2VcIik7XG5cbiAgICAvLyBTcGlubmVyIGVsZW1lbnRzXG4gICAgdGhpcy5yZWdpc3RlcihcImNpdHlTcGlubmVyXCIsIFwiY2l0eVNwaW5uZXJcIik7XG4gICAgdGhpcy5yZWdpc3RlcihcInpvbmluZ1NwaW5uZXJcIiwgXCJ6b25pbmdTcGlubmVyXCIpO1xuICAgIHRoaXMucmVnaXN0ZXIoXCJ6b25lU3Bpbm5lclwiLCBcInpvbmVTcGlubmVyXCIpO1xuICAgIHRoaXMucmVnaXN0ZXIoXCJ0eXBvbG9naWVTcGlubmVyXCIsIFwidHlwb2xvZ2llU3Bpbm5lclwiKTtcbiAgICB0aGlzLnJlZ2lzdGVyKFwiZG9jdW1lbnRTcGlubmVyXCIsIFwiZG9jdW1lbnRTcGlubmVyXCIpO1xuXG4gICAgLy8gQXV0aCBlbGVtZW50c1xuICAgIHRoaXMucmVnaXN0ZXIoXCJ1c2VyU3RhdHVzXCIsIFwidXNlclN0YXR1c1wiKTtcbiAgICB0aGlzLnJlZ2lzdGVyKFwibG9nb3V0QnRuXCIsIFwibG9nb3V0QnRuXCIpO1xuICAgIHRoaXMucmVnaXN0ZXIoXCJsb2dpbkxpbmtcIiwgXCJsb2dpbkxpbmtcIik7XG4gICAgdGhpcy5yZWdpc3RlcihcInNpZ251cExpbmtcIiwgXCJzaWdudXBMaW5rXCIpO1xuICB9XG5cbiAgcmVnaXN0ZXIobmFtZSwgaWQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnRzLnNldChuYW1lLCBlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmdldChuYW1lKSB8fCBudWxsO1xuICB9XG5cbiAgZXhpc3RzKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5oYXMobmFtZSkgJiYgdGhpcy5lbGVtZW50cy5nZXQobmFtZSkgIT09IG51bGw7XG4gIH1cbn1cblxuLy8gQ3JlYXRlIHNpbmdsZXRvbiBpbnN0YW5jZVxuY29uc3QgZG9tRWxlbWVudHMgPSBuZXcgRE9NRWxlbWVudHMoKTtcblxuLy8gLS0tIEVuaGFuY2VkIFVJIEZ1bmN0aW9ucyAtLS1cblxuLyoqXG4gKiBFbmhhbmNlZCBzdGF0dXMgbWVzc2FnZSBkaXNwbGF5IHdpdGggdG9hc3QgaW50ZWdyYXRpb25cbiAqL1xuZnVuY3Rpb24gc2hvd1N0YXR1cyhtZXNzYWdlLCB0eXBlID0gXCJpbmZvXCIpIHtcbiAgY29uc3Qgc3RhdHVzRWxlbWVudCA9IGRvbUVsZW1lbnRzLmdldChcInN0YXR1c01lc3NhZ2VcIik7XG5cbiAgaWYgKHN0YXR1c0VsZW1lbnQpIHtcbiAgICAvLyBVcGRhdGUgdGhlIGV4aXN0aW5nIHN0YXR1cyBtZXNzYWdlIGVsZW1lbnRcbiAgICBzdGF0dXNFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTmFtZSA9IGBzdGF0dXMtbWVzc2FnZSBhbGVydCBhbGVydC0ke3R5cGV9YDtcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XG4gIH1cblxuICAvLyBBbHNvIHNob3cgYSB0b2FzdCBmb3IgYmV0dGVyIFVYIChvcHRpb25hbCwgY2FuIGJlIGRpc2FibGVkKVxuICBpZiAodHlwZSA9PT0gXCJlcnJvclwiIHx8IHR5cGUgPT09IFwid2FybmluZ1wiKSB7XG4gICAgdHJ5IHtcbiAgICAgIFVJQ29tcG9uZW50cy5zaG93VG9hc3QobWVzc2FnZSwgdHlwZSwgODAwMCk7IC8vIExvbmdlciBkdXJhdGlvbiBmb3IgZXJyb3JzXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlRvYXN0IG5vdCBhdmFpbGFibGU6XCIsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgc3RhdGVcbiAgdHJ5IHtcbiAgICBzdGF0ZU1hbmFnZXIuc2V0VUlTdGF0ZSh0eXBlLCBtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oXCJTdGF0ZSBtYW5hZ2VyIG5vdCBhdmFpbGFibGU6XCIsIGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuaGFuY2VkIHNwaW5uZXIgbWFuYWdlbWVudCB3aXRoIGZhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZVNwaW5uZXIoZWxlbWVudE5hbWUsIHNob3cpIHtcbiAgY29uc3Qgc3Bpbm5lckVsZW1lbnQgPVxuICAgIHR5cGVvZiBlbGVtZW50TmFtZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBkb21FbGVtZW50cy5nZXQoZWxlbWVudE5hbWUpXG4gICAgICA6IGVsZW1lbnROYW1lO1xuXG4gIGlmIChzcGlubmVyRWxlbWVudCkge1xuICAgIHNwaW5uZXJFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJkLW5vbmVcIiwgIXNob3cpO1xuICAgIHNwaW5uZXJFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJoaWRkZW5cIiwgIXNob3cpO1xuICB9XG5cbiAgLy8gVXBkYXRlIGdsb2JhbCBsb2FkaW5nIHN0YXRlXG4gIHRyeSB7XG4gICAgc3RhdGVNYW5hZ2VyLnNldExvYWRpbmcoc2hvdyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKFwiU3RhdGUgbWFuYWdlciBub3QgYXZhaWxhYmxlOlwiLCBlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmhhbmNlZCBzZWxlY3QgcmVzZXQgd2l0aCBiZXR0ZXIgVVhcbiAqL1xuZnVuY3Rpb24gcmVzZXRTZWxlY3Qoc2VsZWN0RWxlbWVudCwgZGVmYXVsdFRleHQpIHtcbiAgY29uc3QgZWxlbWVudCA9XG4gICAgdHlwZW9mIHNlbGVjdEVsZW1lbnQgPT09IFwic3RyaW5nXCJcbiAgICAgID8gZG9tRWxlbWVudHMuZ2V0KHNlbGVjdEVsZW1lbnQpXG4gICAgICA6IHNlbGVjdEVsZW1lbnQ7XG5cbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGA8b3B0aW9uIHZhbHVlPVwiXCI+JHtcbiAgICAgIGRlZmF1bHRUZXh0IHx8IFwiU8OpbGVjdGlvbm5leiB1bmUgb3B0aW9uXCJcbiAgICB9PC9vcHRpb24+YDtcbiAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJlcnJvclwiKTsgLy8gUmVtb3ZlIGFueSBlcnJvciBzdGF0ZVxuICB9XG59XG5cbi8qKlxuICogRW5oYW5jZWQgbmFtZSBmb3JtYXR0aW5nIHdpdGggYmV0dGVyIFVuaWNvZGUgc3VwcG9ydFxuICovXG5mdW5jdGlvbiBmb3JtYXRBcGlOYW1lKG5hbWUpIHtcbiAgaWYgKCFuYW1lKSByZXR1cm4gXCJcIjtcblxuICByZXR1cm4gbmFtZVxuICAgIC5yZXBsYWNlKC9fL2csIFwiIFwiKVxuICAgIC5yZXBsYWNlKC8oXnxcXHMpXFx3L2csIChtYXRjaCkgPT4gbWF0Y2gudG9VcHBlckNhc2UoKSlcbiAgICAudHJpbSgpO1xufVxuXG4vKipcbiAqIEVuaGFuY2VkIHNlbGVjdCBwb3B1bGF0aW9uIHdpdGggZXJyb3IgaGFuZGxpbmcgYW5kIGFuaW1hdGlvbnNcbiAqL1xuZnVuY3Rpb24gcG9wdWxhdGVTZWxlY3QoXG4gIHNlbGVjdEVsZW1lbnQsXG4gIGRhdGEsXG4gIGRlZmF1bHRPcHRpb25UZXh0LFxuICBlbXB0eURhdGFUZXh0LFxuICBkYXRhVHlwZVxuKSB7XG4gIGNvbnN0IGVsZW1lbnQgPVxuICAgIHR5cGVvZiBzZWxlY3RFbGVtZW50ID09PSBcInN0cmluZ1wiXG4gICAgICA/IGRvbUVsZW1lbnRzLmdldChzZWxlY3RFbGVtZW50KVxuICAgICAgOiBzZWxlY3RFbGVtZW50O1xuXG4gIGlmICghZWxlbWVudCkge1xuICAgIGNvbnNvbGUud2FybihgU2VsZWN0IGVsZW1lbnQgbm90IGZvdW5kOiAke3NlbGVjdEVsZW1lbnR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gUmVzZXQgZmlyc3RcbiAgcmVzZXRTZWxlY3QoZWxlbWVudCwgZGVmYXVsdE9wdGlvblRleHQpO1xuXG4gIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gYDxvcHRpb24gdmFsdWU9XCJcIj4ke2VtcHR5RGF0YVRleHR9PC9vcHRpb24+YDtcbiAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBDcmVhdGUgZG9jdW1lbnQgZnJhZ21lbnQgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAvLyBBZGQgZGVmYXVsdCBvcHRpb25cbiAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gIGRlZmF1bHRPcHRpb24udmFsdWUgPSBcIlwiO1xuICBkZWZhdWx0T3B0aW9uLnRleHRDb250ZW50ID0gZGVmYXVsdE9wdGlvblRleHQ7XG4gIGRlZmF1bHRPcHRpb24uZGlzYWJsZWQgPSB0cnVlO1xuICBkZWZhdWx0T3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZGVmYXVsdE9wdGlvbik7XG5cbiAgLy8gQWRkIGRhdGEgb3B0aW9uc1xuICBkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIG9wdGlvbi52YWx1ZSA9IGl0ZW0uaWQ7XG5cbiAgICAvLyBFbmhhbmNlZCBmb3JtYXR0aW5nIGxvZ2ljXG4gICAgbGV0IGRpc3BsYXlUZXh0ID0gXCJcIjtcbiAgICBpZiAoZGF0YVR5cGUgPT09IFwiY2l0eVwiKSB7XG4gICAgICBkaXNwbGF5VGV4dCA9IGZvcm1hdEFwaU5hbWUoaXRlbS5uYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheVRleHQgPSBpdGVtLm5hbWU7XG4gICAgfVxuXG4gICAgb3B0aW9uLnRleHRDb250ZW50ID0gZGlzcGxheVRleHQ7XG4gICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcImRhdGEtcmF3LW5hbWVcIiwgaXRlbS5uYW1lKTsgLy8gU3RvcmUgb3JpZ2luYWwgbmFtZVxuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSBET00gaW4gb25lIG9wZXJhdGlvblxuICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICBlbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG5cbiAgLy8gQWRkIGZhZGUtaW4gYW5pbWF0aW9uXG4gIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZhZGUtaW5cIik7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIC0tLSBFbmhhbmNlZCBIZWxwZXIgRnVuY3Rpb25zIC0tLVxuXG4vKipcbiAqIENyZWF0ZSBlbmhhbmNlZCBmb3JtIGZpZWxkIHdpdGggdmFsaWRhdGlvblxuICovXG5mdW5jdGlvbiBjcmVhdGVFbmhhbmNlZEZpZWxkKGNvbmZpZykge1xuICBjb25zb2xlLndhcm4oXCJFbmhhbmNlZCBmaWVsZCBjcmVhdGlvbiBub3QgYXZhaWxhYmxlIGluIGZhbGxiYWNrIG1vZGVcIik7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEJhdGNoIHVwZGF0ZSBtdWx0aXBsZSBzZWxlY3RzIGVmZmljaWVudGx5XG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVNlbGVjdFN0YXRlcyh1cGRhdGVzKSB7XG4gIHVwZGF0ZXMuZm9yRWFjaCgoeyBlbGVtZW50LCBkYXRhLCBjb25maWcgfSkgPT4ge1xuICAgIHBvcHVsYXRlU2VsZWN0KFxuICAgICAgZWxlbWVudCxcbiAgICAgIGRhdGEsXG4gICAgICBjb25maWcuZGVmYXVsdFRleHQsXG4gICAgICBjb25maWcuZW1wdHlUZXh0LFxuICAgICAgY29uZmlnLmRhdGFUeXBlXG4gICAgKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRW5oYW5jZWQgZXJyb3IgZGlzcGxheSB3aXRoIGJldHRlciBVWFxuICovXG5mdW5jdGlvbiBzaG93RmllbGRFcnJvcihmaWVsZE5hbWUsIGVycm9yKSB7XG4gIGNvbnN0IGZpZWxkID0gZG9tRWxlbWVudHMuZ2V0KGZpZWxkTmFtZSk7XG4gIGlmIChmaWVsZCkge1xuICAgIGZpZWxkLmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiKTtcblxuICAgIC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuICAgIGxldCBlcnJvckVsZW1lbnQgPSBmaWVsZC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuZmllbGQtZXJyb3JcIik7XG4gICAgaWYgKCFlcnJvckVsZW1lbnQpIHtcbiAgICAgIGVycm9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlcnJvckVsZW1lbnQuY2xhc3NOYW1lID0gXCJmaWVsZC1lcnJvclwiO1xuICAgICAgZmllbGQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlcnJvckVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG59XG5cbi8qKlxuICogQ2xlYXIgZmllbGQgZXJyb3Igc3RhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJGaWVsZEVycm9yKGZpZWxkTmFtZSkge1xuICBjb25zdCBmaWVsZCA9IGRvbUVsZW1lbnRzLmdldChmaWVsZE5hbWUpO1xuICBpZiAoZmllbGQpIHtcbiAgICBmaWVsZC5jbGFzc0xpc3QucmVtb3ZlKFwiZXJyb3JcIik7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gZmllbGQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiLmZpZWxkLWVycm9yXCIpO1xuICAgIGlmIChlcnJvckVsZW1lbnQpIHtcbiAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAtLS0gQmFja3dhcmQgQ29tcGF0aWJpbGl0eSBMYXllciAtLS1cbi8vIEV4cG9ydCBpbmRpdmlkdWFsIGVsZW1lbnRzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5jb25zdCBjaXR5U2VsZWN0ID0gZG9tRWxlbWVudHMuZ2V0KFwiY2l0eVNlbGVjdFwiKTtcbmNvbnN0IHpvbmluZ1NlbGVjdCA9IGRvbUVsZW1lbnRzLmdldChcInpvbmluZ1NlbGVjdFwiKTtcbmNvbnN0IHpvbmVTZWxlY3QgPSBkb21FbGVtZW50cy5nZXQoXCJ6b25lU2VsZWN0XCIpO1xuY29uc3QgdHlwb2xvZ2llU2VsZWN0ID0gZG9tRWxlbWVudHMuZ2V0KFwidHlwb2xvZ2llU2VsZWN0XCIpO1xuY29uc3Qgc3ludGhlc2lzQnRuID0gZG9tRWxlbWVudHMuZ2V0KFwic3ludGhlc2lzQnRuXCIpO1xuY29uc3Qgc3RhdHVzTWVzc2FnZSA9IGRvbUVsZW1lbnRzLmdldChcInN0YXR1c01lc3NhZ2VcIik7XG5cbmNvbnN0IGNpdHlTcGlubmVyID0gZG9tRWxlbWVudHMuZ2V0KFwiY2l0eVNwaW5uZXJcIik7XG5jb25zdCB6b25pbmdTcGlubmVyID0gZG9tRWxlbWVudHMuZ2V0KFwiem9uaW5nU3Bpbm5lclwiKTtcbmNvbnN0IHpvbmVTcGlubmVyID0gZG9tRWxlbWVudHMuZ2V0KFwiem9uZVNwaW5uZXJcIik7XG5jb25zdCB0eXBvbG9naWVTcGlubmVyID0gZG9tRWxlbWVudHMuZ2V0KFwidHlwb2xvZ2llU3Bpbm5lclwiKTtcbmNvbnN0IGRvY3VtZW50U3Bpbm5lciA9IGRvbUVsZW1lbnRzLmdldChcImRvY3VtZW50U3Bpbm5lclwiKTtcblxuY29uc3QgdXNlclN0YXR1cyA9IGRvbUVsZW1lbnRzLmdldChcInVzZXJTdGF0dXNcIik7XG5jb25zdCBsb2dvdXRCdG4gPSBkb21FbGVtZW50cy5nZXQoXCJsb2dvdXRCdG5cIik7XG5jb25zdCBsb2dpbkxpbmsgPSBkb21FbGVtZW50cy5nZXQoXCJsb2dpbkxpbmtcIik7XG5jb25zdCBzaWdudXBMaW5rID0gZG9tRWxlbWVudHMuZ2V0KFwic2lnbnVwTGlua1wiKTtcblxuLy8gLS0tIEVuaGFuY2VkIEV4cG9ydHMgLS0tXG5leHBvcnQge1xuICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IC0gaW5kaXZpZHVhbCBlbGVtZW50c1xuICBjaXR5U2VsZWN0LFxuICB6b25pbmdTZWxlY3QsXG4gIHpvbmVTZWxlY3QsXG4gIHR5cG9sb2dpZVNlbGVjdCxcbiAgc3ludGhlc2lzQnRuLFxuICBzdGF0dXNNZXNzYWdlLFxuICBjaXR5U3Bpbm5lcixcbiAgem9uaW5nU3Bpbm5lcixcbiAgem9uZVNwaW5uZXIsXG4gIHR5cG9sb2dpZVNwaW5uZXIsXG4gIGRvY3VtZW50U3Bpbm5lcixcbiAgdXNlclN0YXR1cyxcbiAgbG9nb3V0QnRuLFxuICBsb2dpbkxpbmssXG4gIHNpZ251cExpbmssXG5cbiAgLy8gRW5oYW5jZWQgZnVuY3Rpb25zXG4gIHNob3dTdGF0dXMsXG4gIHRvZ2dsZVNwaW5uZXIsXG4gIHJlc2V0U2VsZWN0LFxuICBmb3JtYXRBcGlOYW1lLFxuICBwb3B1bGF0ZVNlbGVjdCxcblxuICAvLyBOZXcgZW5oYW5jZWQgZnVuY3Rpb25zXG4gIGNyZWF0ZUVuaGFuY2VkRmllbGQsXG4gIHVwZGF0ZVNlbGVjdFN0YXRlcyxcbiAgc2hvd0ZpZWxkRXJyb3IsXG4gIGNsZWFyRmllbGRFcnJvcixcblxuICAvLyBFbmhhbmNlZCBlbGVtZW50cyBtYW5hZ2VyXG4gIGRvbUVsZW1lbnRzLFxuXG4gIC8vIFJlLWV4cG9ydCBVSSBjb21wb25lbnRzIGZvciBjb252ZW5pZW5jZVxuICBVSUNvbXBvbmVudHMsXG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbi8vIFNpbmNlIGFsbCByZWZlcmVuY2VkIGNodW5rcyBhcmUgYWxyZWFkeSBpbmNsdWRlZFxuLy8gaW4gdGhpcyBmaWxlLCB0aGlzIGZ1bmN0aW9uIGlzIGVtcHR5IGhlcmUuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoKSA9PiAoUHJvbWlzZS5yZXNvbHZlKCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaiA9IDIwOTsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MjA5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt1cmJhbmRvY3Nfd2ViYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3VyYmFuZG9jc193ZWJhcHBcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs3Nl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDYzNTQpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiZG9tRWxlbWVudHMiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJlbGVtZW50cyIsIk1hcCIsImluaXRpYWxpemVFbGVtZW50cyIsInJlZ2lzdGVyIiwibmFtZSIsImlkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXQiLCJnZXQiLCJleGlzdHMiLCJoYXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImZ1bGZpbGxlZCIsImoiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJzcGxpY2UiLCJyIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmoiLCJ0IiwidmFsdWUiLCJtb2RlIiwiX19lc01vZHVsZSIsInRoZW4iLCJucyIsImNyZWF0ZSIsImRlZiIsImN1cnJlbnQiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImRhdGEiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsImJpbmQiLCJwdXNoIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=