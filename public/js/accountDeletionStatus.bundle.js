(()=>{"use strict";var e,t,n,o,r,i={3688:(e,t,n)=>{var o=n(9660),r=n(3715),i=n(2387);let a=null,s=null,d=null;async function c(){try{if(!await(0,i.Kv)(!0))return;if(!await(0,r.z6)())return;if(a=await(0,r.HW)(),!a)return void(window.location.href="/auth/login");await async function(){try{document.getElementById("loading-state").style.display="flex",document.getElementById("main-content").style.display="none",document.getElementById("error-state").style.display="none";const{data:e}=await o.N.auth.getSession();if(!e?.session?.access_token)throw new Error("No valid session");const t=await fetch(`${o.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.session.access_token}`},body:JSON.stringify({action:"status"})}),n=await t.json();if(!n.success)throw new Error(n.error||"Failed to get deletion status");if(s=n.data,!s.deletion_scheduled)return void(window.location.href="/user/profile");if(s.time_remaining_seconds<=0)return void function(){f();const e=document.getElementById("main-content");e&&(e.innerHTML='\n      <div class="container">\n        <div class="deletion-status-card">\n          <div class="deletion-header">\n            <div class="deletion-icon">\n              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <circle cx="12" cy="12" r="10"></circle>\n                <line x1="15" y1="9" x2="9" y2="15"></line>\n                <line x1="9" y1="9" x2="15" y2="15"></line>\n              </svg>\n            </div>\n            <h1>Compte supprimé</h1>\n          </div>\n          \n          <div class="deletion-details">\n            <p class="deletion-message">\n              Votre compte a été définitivement supprimé.\n            </p>\n            <p class="deletion-warning">\n              Toutes vos données ont été effacées de nos serveurs.\n            </p>\n          </div>\n          \n          <div class="deletion-actions">\n            <button id="logout-btn" class="btn btn-primary">\n              Retour à l\'accueil\n            </button>\n          </div>\n        </div>\n      </div>\n    ',document.getElementById("logout-btn").addEventListener("click",(async()=>{await o.N.auth.signOut(),window.location.href="/"})),e.style.display="block"),setTimeout((async()=>{await o.N.auth.signOut(),window.location.href="/"}),5e3)}();!function(){const e=new Date(s.deletion_scheduled_for).toLocaleDateString("fr-FR",{weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit"});if(document.getElementById("deletion-date").textContent=e,s.deletion_reason&&"User requested account deletion"!==s.deletion_reason){const e=document.getElementById("deletion-reason-container");document.getElementById("deletion-reason").textContent=s.deletion_reason,e.style.display="block"}l()}(),l(),d=setInterval(l,1e3),f()}catch(e){console.error("Error loading deletion status:",e),y("Erreur lors du chargement du statut de suppression")}}(),function(){const e=document.getElementById("cancel-deletion-btn");e&&e.addEventListener("click",u);const t=document.getElementById("logout-btn");t&&t.addEventListener("click",m)}(),await async function(){try{document.getElementById("footer-placeholder")&&window.loadFooter&&await window.loadFooter()}catch(e){console.warn("Could not load footer:",e)}}()}catch(e){console.error("Error initializing account deletion status page:",e),y("Erreur lors du chargement de la page")}}function l(){const e=new Date,t=new Date(s.deletion_scheduled_for).getTime()-e.getTime();if(t<=0){document.getElementById("days-remaining").textContent="0",document.getElementById("hours-remaining").textContent="0",d&&clearInterval(d),g("Votre compte a été supprimé.","error");const e=document.getElementById("cancel-deletion-btn");return e&&(e.disabled=!0,e.textContent="Compte supprimé"),void setTimeout((async()=>{await o.N.auth.signOut(),window.location.href="/"}),3e3)}const n=Math.floor(t/1e3),r=Math.floor(n/60),i=n%60;document.getElementById("days-remaining").textContent=r.toString(),document.getElementById("hours-remaining").textContent=i.toString();const a=document.querySelector(".countdown-item:first-child .countdown-label"),c=document.querySelector(".countdown-item:last-child .countdown-label");a&&(a.textContent="minutes"),c&&(c.textContent="secondes")}async function u(){if(confirm("Êtes-vous sûr de vouloir annuler la suppression de votre compte ?"))try{const e=document.getElementById("cancel-deletion-btn");e.textContent,e.textContent="Annulation...",e.disabled=!0;const{data:t}=await o.N.auth.getSession();if(!t?.session?.access_token)throw new Error("No valid session");const n=await fetch(`${o.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.session.access_token}`},body:JSON.stringify({action:"cancel"})}),r=await n.json();if(!r.success)throw new Error(r.error||"Failed to cancel deletion");g("Suppression de compte annulée avec succès !","success"),setTimeout((()=>{window.location.href="/user/profile"}),2e3)}catch(e){console.error("Error canceling deletion:",e),g("Erreur lors de l'annulation de la suppression","error");const t=document.getElementById("cancel-deletion-btn");t.textContent="Annuler la suppression",t.disabled=!1}}async function m(){try{await o.N.auth.signOut(),window.location.href="/"}catch(e){console.error("Error during logout:",e),window.location.href="/"}}function f(){document.getElementById("loading-state").style.display="none",document.getElementById("main-content").style.display="block",document.getElementById("error-state").style.display="none"}function y(e){document.getElementById("loading-state").style.display="none",document.getElementById("main-content").style.display="none",document.getElementById("error-state").style.display="flex",document.getElementById("error-message").textContent=e}function g(e,t="info"){const n=document.getElementById("status-message");n&&(n.textContent=e,n.className=`status-message ${t}`,n.classList.remove("hidden"),"success"===t&&setTimeout((()=>{n.classList.add("hidden")}),5e3))}window.addEventListener("beforeunload",(function(){d&&(clearInterval(d),d=null)})),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",c):c(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",c):c()}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return i[e].call(n.exports,n,n.exports,s),n.exports}s.m=i,e=[],s.O=(t,n,o,r)=>{if(!n){var i=1/0;for(l=0;l<e.length;l++){for(var[n,o,r]=e[l],a=!0,d=0;d<n.length;d++)(!1&r||i>=r)&&Object.keys(s.O).every((e=>s.O[e](n[d])))?n.splice(d--,1):(a=!1,r<i&&(i=r));if(a){e.splice(l--,1);var c=o();void 0!==c&&(t=c)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);s.r(r);var i={};t=t||[null,n({}),n([]),n(n)];for(var a=2&o&&e;"object"==typeof a&&!~t.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(r,i),r},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>"js/"+e+".chunk.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",s.l=(e,t,n,i)=>{if(o[e])o[e].push(t);else{var a,d;if(void 0!==n)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){a=u;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+n),a.src=e),o[e]=[t];var m=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(n))),t)return t(n)},f=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),d&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=368,s.p="/",(()=>{var e={368:0};s.f.j=(t,n)=>{var o=s.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var i=s.p+s.u(t),a=new Error;s.l(i,(n=>{if(s.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,o[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[i,a,d]=n,c=0;if(i.some((t=>0!==e[t]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(d)var l=d(s)}for(t&&t(n);c<i.length;c++)r=i[c],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(l)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var d=s.O(void 0,[76],(()=>s(3688)));d=s.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,