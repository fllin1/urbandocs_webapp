(()=>{"use strict";var e,t,n,o,r,i={3688:(e,t,n)=>{var o=n(9660),r=n(3715),i=n(2387);let a=null,s=null,d=null;async function c(){try{if(!await(0,i.Kv)(!0))return;if(!await(0,r.z6)())return;if(a=await(0,r.HW)(),!a)return void(window.location.href="/auth/login");await async function(){try{document.getElementById("loading-state").style.display="flex",document.getElementById("main-content").style.display="none",document.getElementById("error-state").style.display="none";const{data:e}=await o.N.auth.getSession();if(!e?.session?.access_token)throw new Error("No valid session");const t=await fetch(`${o.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.session.access_token}`},body:JSON.stringify({action:"status"})}),n=await t.json();if(!n.success)throw new Error(n.error||"Failed to get deletion status");if(s=n.data,!s.deletion_scheduled)return void(window.location.href="/user/profile");if(s.time_remaining_seconds<=0)return void function(){f();const e=document.getElementById("main-content");e&&(e.innerHTML='\n      <div class="container">\n        <div class="deletion-status-card">\n          <div class="deletion-header">\n            <div class="deletion-icon">\n              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <circle cx="12" cy="12" r="10"></circle>\n                <line x1="15" y1="9" x2="9" y2="15"></line>\n                <line x1="9" y1="9" x2="15" y2="15"></line>\n              </svg>\n            </div>\n            <h1>Compte supprimé</h1>\n          </div>\n          \n          <div class="deletion-details">\n            <p class="deletion-message">\n              Votre compte a été définitivement supprimé.\n            </p>\n            <p class="deletion-warning">\n              Toutes vos données ont été effacées de nos serveurs.\n            </p>\n          </div>\n          \n          <div class="deletion-actions">\n            <button id="logout-btn" class="btn btn-primary">\n              Retour à l\'accueil\n            </button>\n          </div>\n        </div>\n      </div>\n    ',document.getElementById("logout-btn").addEventListener("click",(async()=>{await o.N.auth.signOut(),window.location.href="/"})),e.style.display="block"),setTimeout((async()=>{await o.N.auth.signOut(),window.location.href="/"}),5e3)}();!function(){const e=new Date(s.deletion_scheduled_for).toLocaleDateString("fr-FR",{weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit"});if(document.getElementById("deletion-date").textContent=e,s.deletion_reason&&"User requested account deletion"!==s.deletion_reason){const e=document.getElementById("deletion-reason-container");document.getElementById("deletion-reason").textContent=s.deletion_reason,e.style.display="block"}l()}(),l(),d=setInterval(l,1e3),f()}catch(e){console.error("Error loading deletion status:",e),y("Erreur lors du chargement du statut de suppression")}}(),function(){const e=document.getElementById("cancel-deletion-btn");e&&e.addEventListener("click",u);const t=document.getElementById("logout-btn");t&&t.addEventListener("click",m)}(),await async function(){try{document.getElementById("footer-placeholder")&&window.loadFooter&&await window.loadFooter()}catch(e){console.warn("Could not load footer:",e)}}()}catch(e){console.error("Error initializing account deletion status page:",e),y("Erreur lors du chargement de la page")}}function l(){const e=new Date,t=new Date(s.deletion_scheduled_for).getTime()-e.getTime();if(t<=0){document.getElementById("days-remaining").textContent="0",document.getElementById("hours-remaining").textContent="0",d&&clearInterval(d),g("Votre compte a été supprimé.","error");const e=document.getElementById("cancel-deletion-btn");return e&&(e.disabled=!0,e.textContent="Compte supprimé"),void setTimeout((async()=>{await o.N.auth.signOut(),window.location.href="/"}),3e3)}const n=Math.floor(t/1e3),r=Math.floor(n/60),i=n%60;document.getElementById("days-remaining").textContent=r.toString(),document.getElementById("hours-remaining").textContent=i.toString();const a=document.querySelector(".countdown-item:first-child .countdown-label"),c=document.querySelector(".countdown-item:last-child .countdown-label");a&&(a.textContent="minutes"),c&&(c.textContent="secondes")}async function u(){if(confirm("Êtes-vous sûr de vouloir annuler la suppression de votre compte ?"))try{const e=document.getElementById("cancel-deletion-btn");e.textContent,e.textContent="Annulation...",e.disabled=!0;const{data:t}=await o.N.auth.getSession();if(!t?.session?.access_token)throw new Error("No valid session");const n=await fetch(`${o.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.session.access_token}`},body:JSON.stringify({action:"cancel"})}),r=await n.json();if(!r.success)throw new Error(r.error||"Failed to cancel deletion");g("Suppression de compte annulée avec succès !","success"),setTimeout((()=>{window.location.href="/user/profile"}),2e3)}catch(e){console.error("Error canceling deletion:",e),g("Erreur lors de l'annulation de la suppression","error");const t=document.getElementById("cancel-deletion-btn");t.textContent="Annuler la suppression",t.disabled=!1}}async function m(){try{await o.N.auth.signOut(),window.location.href="/"}catch(e){console.error("Error during logout:",e),window.location.href="/"}}function f(){document.getElementById("loading-state").style.display="none",document.getElementById("main-content").style.display="block",document.getElementById("error-state").style.display="none"}function y(e){document.getElementById("loading-state").style.display="none",document.getElementById("main-content").style.display="none",document.getElementById("error-state").style.display="flex",document.getElementById("error-message").textContent=e}function g(e,t="info"){const n=document.getElementById("status-message");n&&(n.textContent=e,n.className=`status-message ${t}`,n.classList.remove("hidden"),"success"===t&&setTimeout((()=>{n.classList.add("hidden")}),5e3))}window.addEventListener("beforeunload",(function(){d&&(clearInterval(d),d=null)})),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",c):c(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",c):c()}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return i[e].call(n.exports,n,n.exports,s),n.exports}s.m=i,e=[],s.O=(t,n,o,r)=>{if(!n){var i=1/0;for(l=0;l<e.length;l++){for(var[n,o,r]=e[l],a=!0,d=0;d<n.length;d++)(!1&r||i>=r)&&Object.keys(s.O).every((e=>s.O[e](n[d])))?n.splice(d--,1):(a=!1,r<i&&(i=r));if(a){e.splice(l--,1);var c=o();void 0!==c&&(t=c)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);s.r(r);var i={};t=t||[null,n({}),n([]),n(n)];for(var a=2&o&&e;"object"==typeof a&&!~t.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(r,i),r},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>"js/"+e+".chunk.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",s.l=(e,t,n,i)=>{if(o[e])o[e].push(t);else{var a,d;if(void 0!==n)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){a=u;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+n),a.src=e),o[e]=[t];var m=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(n))),t)return t(n)},f=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),d&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=368,s.p="/",(()=>{var e={368:0};s.f.j=(t,n)=>{var o=s.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var i=s.p+s.u(t),a=new Error;s.l(i,(n=>{if(s.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,o[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[i,a,d]=n,c=0;if(i.some((t=>0!==e[t]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(d)var l=d(s)}for(t&&t(n);c<i.length;c++)r=i[c],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(l)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var d=s.O(void 0,[76],(()=>s(3688)));d=s.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RVMsRUFBSzhCLEdBQTBDLElBQTdCNEMsRUFBZ0I1QyxHQUd4RCxJQUFJcUQsRUFBdUIsQ0FBQ0MsRUFBNEJ2TCxLQUN2RCxJQUdJa0YsRUFBVStDLEdBSFR0QyxFQUFVNkYsRUFBYUMsR0FBV3pMLEVBR2hCZ0csRUFBSSxFQUMzQixHQUFHTCxFQUFTK0YsTUFBTUMsR0FBZ0MsSUFBeEJkLEVBQWdCYyxLQUFhLENBQ3RELElBQUl6RyxLQUFZc0csRUFDWnZHLEVBQW9CMEMsRUFBRTZELEVBQWF0RyxLQUNyQ0QsRUFBb0JRLEVBQUVQLEdBQVlzRyxFQUFZdEcsSUFHaEQsR0FBR3VHLEVBQVMsSUFBSXpLLEVBQVN5SyxFQUFReEcsRUFDbEMsQ0FFQSxJQURHc0csR0FBNEJBLEVBQTJCdkwsR0FDckRnRyxFQUFJTCxFQUFTTSxPQUFRRCxJQUN6QmlDLEVBQVV0QyxFQUFTSyxHQUNoQmYsRUFBb0IwQyxFQUFFa0QsRUFBaUI1QyxJQUFZNEMsRUFBZ0I1QyxJQUNyRTRDLEVBQWdCNUMsR0FBUyxLQUUxQjRDLEVBQWdCNUMsR0FBVyxFQUU1QixPQUFPaEQsRUFBb0JTLEVBQUUxRSxJQUcxQjRLLEVBQXFCQyxLQUFtQyw2QkFBSUEsS0FBbUMsOEJBQUssR0FDeEdELEVBQW1CcEUsUUFBUThELEVBQXFCaEIsS0FBSyxLQUFNLElBQzNEc0IsRUFBbUI1QyxLQUFPc0MsRUFBcUJoQixLQUFLLEtBQU1zQixFQUFtQjVDLEtBQUtzQixLQUFLc0IsRyxLQ2xGdkYsSUFBSUUsRUFBc0I3RyxFQUFvQlMsT0FBRU4sRUFBVyxDQUFDLEtBQUssSUFBT0gsRUFBb0IsUUFDNUY2RyxFQUFzQjdHLEVBQW9CUyxFQUFFb0csRSIsInNvdXJjZXMiOlsid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvLi9zcmMvanMvYWNjb3VudC1kZWxldGlvbi1zdGF0dXMuanMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy9lbnRyaWVzL2FjY291bnQtZGVsZXRpb24tc3RhdHVzLmpzIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL3J1bnRpbWVJZCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwidXJiYW5kb2NzX3dlYmFwcDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblxuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIi8qKlxuICogQWNjb3VudCBEZWxldGlvbiBTdGF0dXMgTW9kdWxlXG4gKiBAbW9kdWxlIGFjY291bnREZWxldGlvblN0YXR1c1xuICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgdGhlIGFjY291bnQgZGVsZXRpb24gc3RhdHVzIHBhZ2UgZnVuY3Rpb25hbGl0eVxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuXG5pbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gXCIuL3N1cGFiYXNlLWNsaWVudC5qc1wiO1xuaW1wb3J0IHsgcHJvdGVjdFBhZ2UsIGdldEN1cnJlbnRVc2VyIH0gZnJvbSBcIi4vYXV0aC9hdXRoLmpzXCI7XG5pbXBvcnQgeyBpbml0RGVsZXRpb25HdWFyZCB9IGZyb20gXCIuL2F1dGgvZGVsZXRpb24tZ3VhcmQuanNcIjtcblxubGV0IGN1cnJlbnRVc2VyID0gbnVsbDtcbmxldCBkZWxldGlvblN0YXR1cyA9IG51bGw7XG5sZXQgY291bnRkb3duSW50ZXJ2YWwgPSBudWxsO1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGFjY291bnQgZGVsZXRpb24gc3RhdHVzIHBhZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRBY2NvdW50RGVsZXRpb25TdGF0dXNQYWdlKCkge1xuICB0cnkge1xuICAgIC8vIEluaXRpYWxpemUgZGVsZXRpb24gZ3VhcmQgKGFsbG93IGFjY2VzcyB0byB0aGlzIHBhZ2UpXG4gICAgY29uc3QgY2FuQWNjZXNzID0gYXdhaXQgaW5pdERlbGV0aW9uR3VhcmQodHJ1ZSk7XG4gICAgaWYgKCFjYW5BY2Nlc3MpIHtcbiAgICAgIHJldHVybjsgLy8gQWNjZXNzIHdhcyBibG9ja2VkXG4gICAgfVxuXG4gICAgLy8gUHJvdGVjdCB0aGUgcGFnZSBhbmQgZ2V0IGN1cnJlbnQgdXNlclxuICAgIGlmICghKGF3YWl0IHByb3RlY3RQYWdlKCkpKSByZXR1cm47XG5cbiAgICBjdXJyZW50VXNlciA9IGF3YWl0IGdldEN1cnJlbnRVc2VyKCk7XG4gICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9hdXRoL2xvZ2luXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTG9hZCBkZWxldGlvbiBzdGF0dXNcbiAgICBhd2FpdCBsb2FkRGVsZXRpb25TdGF0dXMoKTtcblxuICAgIC8vIFNldHVwIGV2ZW50IGxpc3RlbmVyc1xuICAgIHNldHVwRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIExvYWQgZm9vdGVyXG4gICAgYXdhaXQgbG9hZEZvb3RlcigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbml0aWFsaXppbmcgYWNjb3VudCBkZWxldGlvbiBzdGF0dXMgcGFnZTpcIiwgZXJyb3IpO1xuICAgIHNob3dFcnJvcihcIkVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZGUgbGEgcGFnZVwiKTtcbiAgfVxufVxuXG4vKipcbiAqIExvYWQgdGhlIGFjY291bnQgZGVsZXRpb24gc3RhdHVzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWREZWxldGlvblN0YXR1cygpIHtcbiAgdHJ5IHtcbiAgICBzaG93TG9hZGluZygpO1xuXG4gICAgLy8gQ2FsbCB0aGUgYWNjb3VudCBtYW5hZ2VtZW50IGVkZ2UgZnVuY3Rpb24gdG8gZ2V0IHN0YXR1c1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbiB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgaWYgKCFzZXNzaW9uPy5zZXNzaW9uPy5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIHNlc3Npb25cIik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke3N1cGFiYXNlLnN1cGFiYXNlVXJsfS9mdW5jdGlvbnMvdjEvYWNjb3VudC1tYW5hZ2VtZW50YCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtzZXNzaW9uLnNlc3Npb24uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBhY3Rpb246IFwic3RhdHVzXCIsXG4gICAgICAgIH0pLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yIHx8IFwiRmFpbGVkIHRvIGdldCBkZWxldGlvbiBzdGF0dXNcIik7XG4gICAgfVxuXG4gICAgZGVsZXRpb25TdGF0dXMgPSByZXN1bHQuZGF0YTtcblxuICAgIC8vIENoZWNrIGlmIGFjY291bnQgaXMgYWN0dWFsbHkgc2NoZWR1bGVkIGZvciBkZWxldGlvblxuICAgIGlmICghZGVsZXRpb25TdGF0dXMuZGVsZXRpb25fc2NoZWR1bGVkKSB7XG4gICAgICAvLyBSZWRpcmVjdCB0byBwcm9maWxlIGlmIG5vIGRlbGV0aW9uIGlzIHNjaGVkdWxlZFxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi91c2VyL3Byb2ZpbGVcIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBhY2NvdW50IGhhcyBhbHJlYWR5IGV4cGlyZWRcbiAgICBpZiAoZGVsZXRpb25TdGF0dXMudGltZV9yZW1haW5pbmdfc2Vjb25kcyA8PSAwKSB7XG4gICAgICAvLyBBY2NvdW50IHNob3VsZCBiZSBkZWxldGVkLCBzaG93IGV4cGlyZWQgbWVzc2FnZSBhbmQgbG9nb3V0XG4gICAgICBzaG93QWNjb3VudEV4cGlyZWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEaXNwbGF5IHRoZSBkZWxldGlvbiBzdGF0dXNcbiAgICBkaXNwbGF5RGVsZXRpb25TdGF0dXMoKTtcblxuICAgIC8vIFN0YXJ0IGNvdW50ZG93blxuICAgIHN0YXJ0Q291bnRkb3duKCk7XG5cbiAgICBoaWRlTG9hZGluZygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGRlbGV0aW9uIHN0YXR1czpcIiwgZXJyb3IpO1xuICAgIHNob3dFcnJvcihcIkVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZHUgc3RhdHV0IGRlIHN1cHByZXNzaW9uXCIpO1xuICB9XG59XG5cbi8qKlxuICogU2hvdyBhY2NvdW50IGV4cGlyZWQgbWVzc2FnZVxuICovXG5mdW5jdGlvbiBzaG93QWNjb3VudEV4cGlyZWQoKSB7XG4gIGhpZGVMb2FkaW5nKCk7XG5cbiAgY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW4tY29udGVudFwiKTtcbiAgaWYgKG1haW5Db250ZW50KSB7XG4gICAgbWFpbkNvbnRlbnQuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVsZXRpb24tc3RhdHVzLWNhcmRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVsZXRpb24taGVhZGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVsZXRpb24taWNvblwiPlxuICAgICAgICAgICAgICA8c3ZnIHdpZHRoPVwiNDhcIiBoZWlnaHQ9XCI0OFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjEwXCI+PC9jaXJjbGU+XG4gICAgICAgICAgICAgICAgPGxpbmUgeDE9XCIxNVwiIHkxPVwiOVwiIHgyPVwiOVwiIHkyPVwiMTVcIj48L2xpbmU+XG4gICAgICAgICAgICAgICAgPGxpbmUgeDE9XCI5XCIgeTE9XCI5XCIgeDI9XCIxNVwiIHkyPVwiMTVcIj48L2xpbmU+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8aDE+Q29tcHRlIHN1cHByaW3DqTwvaDE+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRlbGV0aW9uLWRldGFpbHNcIj5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwiZGVsZXRpb24tbWVzc2FnZVwiPlxuICAgICAgICAgICAgICBWb3RyZSBjb21wdGUgYSDDqXTDqSBkw6lmaW5pdGl2ZW1lbnQgc3VwcHJpbcOpLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJkZWxldGlvbi13YXJuaW5nXCI+XG4gICAgICAgICAgICAgIFRvdXRlcyB2b3MgZG9ubsOpZXMgb250IMOpdMOpIGVmZmFjw6llcyBkZSBub3Mgc2VydmV1cnMuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRlbGV0aW9uLWFjdGlvbnNcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJsb2dvdXQtYnRuXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgUmV0b3VyIMOgIGwnYWNjdWVpbFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcblxuICAgIC8vIEFkZCBsb2dvdXQgZXZlbnQgbGlzdGVuZXJcbiAgICBkb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRCeUlkKFwibG9nb3V0LWJ0blwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL1wiO1xuICAgICAgfSk7XG5cbiAgICBtYWluQ29udGVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICB9XG5cbiAgLy8gQXV0byBsb2dvdXQgYWZ0ZXIgNSBzZWNvbmRzXG4gIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvXCI7XG4gIH0sIDUwMDApO1xufVxuXG4vKipcbiAqIERpc3BsYXkgdGhlIGRlbGV0aW9uIHN0YXR1cyBpbmZvcm1hdGlvblxuICovXG5mdW5jdGlvbiBkaXNwbGF5RGVsZXRpb25TdGF0dXMoKSB7XG4gIGNvbnN0IGRlbGV0aW9uRGF0ZSA9IG5ldyBEYXRlKGRlbGV0aW9uU3RhdHVzLmRlbGV0aW9uX3NjaGVkdWxlZF9mb3IpO1xuICBjb25zdCBmb3JtYXR0ZWREYXRlID0gZGVsZXRpb25EYXRlLnRvTG9jYWxlRGF0ZVN0cmluZyhcImZyLUZSXCIsIHtcbiAgICB3ZWVrZGF5OiBcImxvbmdcIixcbiAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICBtb250aDogXCJsb25nXCIsXG4gICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgIHNlY29uZDogXCIyLWRpZ2l0XCIsIC8vIEFkZCBzZWNvbmRzIGZvciB0ZXN0aW5nXG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSBkZWxldGlvbiBkYXRlXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVsZXRpb24tZGF0ZVwiKS50ZXh0Q29udGVudCA9IGZvcm1hdHRlZERhdGU7XG5cbiAgLy8gU2hvdyBkZWxldGlvbiByZWFzb24gaWYgYXZhaWxhYmxlXG4gIGlmIChcbiAgICBkZWxldGlvblN0YXR1cy5kZWxldGlvbl9yZWFzb24gJiZcbiAgICBkZWxldGlvblN0YXR1cy5kZWxldGlvbl9yZWFzb24gIT09IFwiVXNlciByZXF1ZXN0ZWQgYWNjb3VudCBkZWxldGlvblwiXG4gICkge1xuICAgIGNvbnN0IHJlYXNvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgXCJkZWxldGlvbi1yZWFzb24tY29udGFpbmVyXCJcbiAgICApO1xuICAgIGNvbnN0IHJlYXNvbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlbGV0aW9uLXJlYXNvblwiKTtcbiAgICByZWFzb25FbGVtZW50LnRleHRDb250ZW50ID0gZGVsZXRpb25TdGF0dXMuZGVsZXRpb25fcmVhc29uO1xuICAgIHJlYXNvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICB9XG5cbiAgLy8gVXBkYXRlIGNvdW50ZG93blxuICB1cGRhdGVDb3VudGRvd24oKTtcbn1cblxuLyoqXG4gKiBTdGFydCB0aGUgY291bnRkb3duIHRpbWVyXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0Q291bnRkb3duKCkge1xuICAvLyBVcGRhdGUgaW1tZWRpYXRlbHlcbiAgdXBkYXRlQ291bnRkb3duKCk7XG5cbiAgLy8gVXBkYXRlIGV2ZXJ5IHNlY29uZCBmb3IgdGVzdGluZyAod2FzIGV2ZXJ5IG1pbnV0ZSlcbiAgY291bnRkb3duSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGVDb3VudGRvd24sIDEwMDApO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgY291bnRkb3duIGRpc3BsYXlcbiAqL1xuZnVuY3Rpb24gdXBkYXRlQ291bnRkb3duKCkge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBkZWxldGlvbkRhdGUgPSBuZXcgRGF0ZShkZWxldGlvblN0YXR1cy5kZWxldGlvbl9zY2hlZHVsZWRfZm9yKTtcbiAgY29uc3QgdGltZURpZmYgPSBkZWxldGlvbkRhdGUuZ2V0VGltZSgpIC0gbm93LmdldFRpbWUoKTtcblxuICBpZiAodGltZURpZmYgPD0gMCkge1xuICAgIC8vIEFjY291bnQgc2hvdWxkIGJlIGRlbGV0ZWRcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRheXMtcmVtYWluaW5nXCIpLnRleHRDb250ZW50ID0gXCIwXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJob3Vycy1yZW1haW5pbmdcIikudGV4dENvbnRlbnQgPSBcIjBcIjtcblxuICAgIGlmIChjb3VudGRvd25JbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChjb3VudGRvd25JbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgc2hvd1N0YXR1c01lc3NhZ2UoXCJWb3RyZSBjb21wdGUgYSDDqXTDqSBzdXBwcmltw6kuXCIsIFwiZXJyb3JcIik7XG5cbiAgICAvLyBEaXNhYmxlIGNhbmNlbCBidXR0b25cbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbmNlbC1kZWxldGlvbi1idG5cIik7XG4gICAgaWYgKGNhbmNlbEJ0bikge1xuICAgICAgY2FuY2VsQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIGNhbmNlbEJ0bi50ZXh0Q29udGVudCA9IFwiQ29tcHRlIHN1cHByaW3DqVwiO1xuICAgIH1cblxuICAgIC8vIEF1dG8gbG9nb3V0IGFmdGVyIDMgc2Vjb25kc1xuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduT3V0KCk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL1wiO1xuICAgIH0sIDMwMDApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yIHRlc3Rpbmcgd2l0aCBzZWNvbmRzLCBzaG93IHNlY29uZHMgaW5zdGVhZCBvZiBkYXlzL2hvdXJzXG4gIGNvbnN0IHRvdGFsU2Vjb25kcyA9IE1hdGguZmxvb3IodGltZURpZmYgLyAxMDAwKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gNjApO1xuICBjb25zdCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7XG5cbiAgLy8gVXBkYXRlIGRpc3BsYXkgdG8gc2hvdyBtaW51dGVzIGFuZCBzZWNvbmRzIGZvciB0ZXN0aW5nXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF5cy1yZW1haW5pbmdcIikudGV4dENvbnRlbnQgPSBtaW51dGVzLnRvU3RyaW5nKCk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaG91cnMtcmVtYWluaW5nXCIpLnRleHRDb250ZW50ID0gc2Vjb25kcy50b1N0cmluZygpO1xuXG4gIC8vIFVwZGF0ZSBsYWJlbHMgZm9yIHRlc3RpbmdcbiAgY29uc3QgZGF5c0xhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICBcIi5jb3VudGRvd24taXRlbTpmaXJzdC1jaGlsZCAuY291bnRkb3duLWxhYmVsXCJcbiAgKTtcbiAgY29uc3QgaG91cnNMYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgXCIuY291bnRkb3duLWl0ZW06bGFzdC1jaGlsZCAuY291bnRkb3duLWxhYmVsXCJcbiAgKTtcbiAgaWYgKGRheXNMYWJlbCkgZGF5c0xhYmVsLnRleHRDb250ZW50ID0gXCJtaW51dGVzXCI7XG4gIGlmIChob3Vyc0xhYmVsKSBob3Vyc0xhYmVsLnRleHRDb250ZW50ID0gXCJzZWNvbmRlc1wiO1xufVxuXG4vKipcbiAqIFNldHVwIGV2ZW50IGxpc3RlbmVyc1xuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAvLyBDYW5jZWwgZGVsZXRpb24gYnV0dG9uXG4gIGNvbnN0IGNhbmNlbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FuY2VsLWRlbGV0aW9uLWJ0blwiKTtcbiAgaWYgKGNhbmNlbEJ0bikge1xuICAgIGNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQ2FuY2VsRGVsZXRpb24pO1xuICB9XG5cbiAgLy8gTG9nb3V0IGJ1dHRvblxuICBjb25zdCBsb2dvdXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ291dC1idG5cIik7XG4gIGlmIChsb2dvdXRCdG4pIHtcbiAgICBsb2dvdXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUxvZ291dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBIYW5kbGUgY2FuY2VsaW5nIGFjY291bnQgZGVsZXRpb25cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2FuY2VsRGVsZXRpb24oKSB7XG4gIGlmIChcbiAgICAhY29uZmlybShcbiAgICAgIFwiw4p0ZXMtdm91cyBzw7tyIGRlIHZvdWxvaXIgYW5udWxlciBsYSBzdXBwcmVzc2lvbiBkZSB2b3RyZSBjb21wdGUgP1wiXG4gICAgKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNhbmNlbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FuY2VsLWRlbGV0aW9uLWJ0blwiKTtcbiAgICBjb25zdCBvcmlnaW5hbFRleHQgPSBjYW5jZWxCdG4udGV4dENvbnRlbnQ7XG4gICAgY2FuY2VsQnRuLnRleHRDb250ZW50ID0gXCJBbm51bGF0aW9uLi4uXCI7XG4gICAgY2FuY2VsQnRuLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgIC8vIENhbGwgdGhlIGFjY291bnQgbWFuYWdlbWVudCBlZGdlIGZ1bmN0aW9uIHRvIGNhbmNlbCBkZWxldGlvblxuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbiB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgaWYgKCFzZXNzaW9uPy5zZXNzaW9uPy5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIHNlc3Npb25cIik7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGAke3N1cGFiYXNlLnN1cGFiYXNlVXJsfS9mdW5jdGlvbnMvdjEvYWNjb3VudC1tYW5hZ2VtZW50YCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtzZXNzaW9uLnNlc3Npb24uYWNjZXNzX3Rva2VufWAsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBhY3Rpb246IFwiY2FuY2VsXCIsXG4gICAgICAgIH0pLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yIHx8IFwiRmFpbGVkIHRvIGNhbmNlbCBkZWxldGlvblwiKTtcbiAgICB9XG5cbiAgICBzaG93U3RhdHVzTWVzc2FnZShcIlN1cHByZXNzaW9uIGRlIGNvbXB0ZSBhbm51bMOpZSBhdmVjIHN1Y2PDqHMgIVwiLCBcInN1Y2Nlc3NcIik7XG5cbiAgICAvLyBSZWRpcmVjdCB0byBwcm9maWxlIGFmdGVyIGEgc2hvcnQgZGVsYXlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvdXNlci9wcm9maWxlXCI7XG4gICAgfSwgMjAwMCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNhbmNlbGluZyBkZWxldGlvbjpcIiwgZXJyb3IpO1xuICAgIHNob3dTdGF0dXNNZXNzYWdlKFwiRXJyZXVyIGxvcnMgZGUgbCdhbm51bGF0aW9uIGRlIGxhIHN1cHByZXNzaW9uXCIsIFwiZXJyb3JcIik7XG5cbiAgICAvLyBSZS1lbmFibGUgYnV0dG9uXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW5jZWwtZGVsZXRpb24tYnRuXCIpO1xuICAgIGNhbmNlbEJ0bi50ZXh0Q29udGVudCA9IFwiQW5udWxlciBsYSBzdXBwcmVzc2lvblwiO1xuICAgIGNhbmNlbEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGxvZ291dFxuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dvdXQoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduT3V0KCk7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9cIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZHVyaW5nIGxvZ291dDpcIiwgZXJyb3IpO1xuICAgIC8vIEZvcmNlIHJlZGlyZWN0IGV2ZW4gaWYgbG9nb3V0IGZhaWxzXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9cIjtcbiAgfVxufVxuXG4vKipcbiAqIExvYWQgZm9vdGVyIGNvbXBvbmVudFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkRm9vdGVyKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGZvb3RlclBsYWNlaG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290ZXItcGxhY2Vob2xkZXJcIik7XG4gICAgaWYgKGZvb3RlclBsYWNlaG9sZGVyICYmIHdpbmRvdy5sb2FkRm9vdGVyKSB7XG4gICAgICBhd2FpdCB3aW5kb3cubG9hZEZvb3RlcigpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgbG9hZCBmb290ZXI6XCIsIGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIFNob3cgbG9hZGluZyBzdGF0ZVxuICovXG5mdW5jdGlvbiBzaG93TG9hZGluZygpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkaW5nLXN0YXRlXCIpLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLWNvbnRlbnRcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yLXN0YXRlXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbn1cblxuLyoqXG4gKiBIaWRlIGxvYWRpbmcgc3RhdGVcbiAqL1xuZnVuY3Rpb24gaGlkZUxvYWRpbmcoKSB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZy1zdGF0ZVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbi1jb250ZW50XCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3Itc3RhdGVcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xufVxuXG4vKipcbiAqIFNob3cgZXJyb3Igc3RhdGVcbiAqL1xuZnVuY3Rpb24gc2hvd0Vycm9yKG1lc3NhZ2UpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkaW5nLXN0YXRlXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLWNvbnRlbnRcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yLXN0YXRlXCIpLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlcnJvci1tZXNzYWdlXCIpLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBTaG93IHN0YXR1cyBtZXNzYWdlXG4gKi9cbmZ1bmN0aW9uIHNob3dTdGF0dXNNZXNzYWdlKG1lc3NhZ2UsIHR5cGUgPSBcImluZm9cIikge1xuICBjb25zdCBzdGF0dXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGF0dXMtbWVzc2FnZVwiKTtcbiAgaWYgKHN0YXR1c0VsZW1lbnQpIHtcbiAgICBzdGF0dXNFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTmFtZSA9IGBzdGF0dXMtbWVzc2FnZSAke3R5cGV9YDtcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG5cbiAgICAvLyBBdXRvLWhpZGUgYWZ0ZXIgNSBzZWNvbmRzIGZvciBzdWNjZXNzIG1lc3NhZ2VzXG4gICAgaWYgKHR5cGUgPT09IFwic3VjY2Vzc1wiKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3RhdHVzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgfSwgNTAwMCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2xlYW51cCBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjbGVhbnVwKCkge1xuICBpZiAoY291bnRkb3duSW50ZXJ2YWwpIHtcbiAgICBjbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKTtcbiAgICBjb3VudGRvd25JbnRlcnZhbCA9IG51bGw7XG4gIH1cbn1cblxuLy8gQ2xlYW51cCBvbiBwYWdlIHVubG9hZFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2xlYW51cCk7XG5cbi8vIEluaXRpYWxpemUgd2hlbiBET00gaXMgbG9hZGVkXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgaW5pdEFjY291bnREZWxldGlvblN0YXR1c1BhZ2UpO1xufSBlbHNlIHtcbiAgaW5pdEFjY291bnREZWxldGlvblN0YXR1c1BhZ2UoKTtcbn1cbiIsIi8qKlxuICogQWNjb3VudCBEZWxldGlvbiBTdGF0dXMgRW50cnkgUG9pbnRcbiAqIEBtb2R1bGUgYWNjb3VudERlbGV0aW9uU3RhdHVzRW50cnlcbiAqIEBkZXNjcmlwdGlvbiBFbnRyeSBwb2ludCBmb3IgdGhlIGFjY291bnQgZGVsZXRpb24gc3RhdHVzIHBhZ2VcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKi9cblxuaW1wb3J0IHsgaW5pdEFjY291bnREZWxldGlvblN0YXR1c1BhZ2UgfSBmcm9tIFwiLi4vYWNjb3VudC1kZWxldGlvbi1zdGF0dXMuanNcIjtcblxuLy8gSW5pdGlhbGl6ZSB0aGUgcGFnZSB3aGVuIERPTSBpcyBsb2FkZWRcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0QWNjb3VudERlbGV0aW9uU3RhdHVzUGFnZSk7XG59IGVsc2Uge1xuICBpbml0QWNjb3VudERlbGV0aW9uU3RhdHVzUGFnZSgpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwianMvXCIgKyBjaHVua0lkICsgXCIuY2h1bmsuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5qID0gMzY4OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQzNjg6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt1cmJhbmRvY3Nfd2ViYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3VyYmFuZG9jc193ZWJhcHBcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs3Nl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDM2ODgpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiY3VycmVudFVzZXIiLCJkZWxldGlvblN0YXR1cyIsImNvdW50ZG93bkludGVydmFsIiwiYXN5bmMiLCJpbml0QWNjb3VudERlbGV0aW9uU3RhdHVzUGFnZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJkYXRhIiwic2Vzc2lvbiIsImF1dGgiLCJnZXRTZXNzaW9uIiwiYWNjZXNzX3Rva2VuIiwiRXJyb3IiLCJyZXNwb25zZSIsImZldGNoIiwic3VwYWJhc2VVcmwiLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWN0aW9uIiwicmVzdWx0IiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsImRlbGV0aW9uX3NjaGVkdWxlZCIsInRpbWVfcmVtYWluaW5nX3NlY29uZHMiLCJoaWRlTG9hZGluZyIsIm1haW5Db250ZW50IiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNpZ25PdXQiLCJzZXRUaW1lb3V0Iiwic2hvd0FjY291bnRFeHBpcmVkIiwiZm9ybWF0dGVkRGF0ZSIsIkRhdGUiLCJkZWxldGlvbl9zY2hlZHVsZWRfZm9yIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwid2Vla2RheSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0ZXh0Q29udGVudCIsImRlbGV0aW9uX3JlYXNvbiIsInJlYXNvbkNvbnRhaW5lciIsInVwZGF0ZUNvdW50ZG93biIsImRpc3BsYXlEZWxldGlvblN0YXR1cyIsInNldEludGVydmFsIiwiY29uc29sZSIsInNob3dFcnJvciIsImxvYWREZWxldGlvblN0YXR1cyIsImNhbmNlbEJ0biIsImhhbmRsZUNhbmNlbERlbGV0aW9uIiwibG9nb3V0QnRuIiwiaGFuZGxlTG9nb3V0Iiwic2V0dXBFdmVudExpc3RlbmVycyIsImxvYWRGb290ZXIiLCJ3YXJuIiwibm93IiwidGltZURpZmYiLCJnZXRUaW1lIiwiY2xlYXJJbnRlcnZhbCIsInNob3dTdGF0dXNNZXNzYWdlIiwiZGlzYWJsZWQiLCJ0b3RhbFNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJtaW51dGVzIiwic2Vjb25kcyIsInRvU3RyaW5nIiwiZGF5c0xhYmVsIiwicXVlcnlTZWxlY3RvciIsImhvdXJzTGFiZWwiLCJjb25maXJtIiwibWVzc2FnZSIsInR5cGUiLCJzdGF0dXNFbGVtZW50IiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwicmVhZHlTdGF0ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwibGVuZ3RoIiwiZnVsZmlsbGVkIiwiaiIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJnZXRQcm90b3R5cGVPZiIsIm9iaiIsInQiLCJ2YWx1ZSIsIm1vZGUiLCJ0aGlzIiwiX19lc01vZHVsZSIsInRoZW4iLCJucyIsImNyZWF0ZSIsImRlZiIsImN1cnJlbnQiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJ1cmwiLCJkb25lIiwicHVzaCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJiaW5kIiwidGFyZ2V0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJwIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwibmFtZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImlkIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9