"use strict";(self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[]).push([[23],{23:(e,t,n)=>{n.d(t,{xI:()=>he});let s={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};function r(e){s=e}const i=/[&<>"']/,l=new RegExp(i.source,"g"),o=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,a=new RegExp(o.source,"g"),c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},h=e=>c[e];function p(e,t){if(t){if(i.test(e))return e.replace(l,h)}else if(o.test(e))return e.replace(a,h);return e}const u=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function k(e){return e.replace(u,((e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""))}const g=/(^|[^\[])\^/g;function f(e,t){let n="string"==typeof e?e:e.source;t=t||"";const s={replace:(e,t)=>{let r="string"==typeof t?t:t.source;return r=r.replace(g,"$1"),n=n.replace(e,r),s},getRegex:()=>new RegExp(n,t)};return s}function d(e){try{e=encodeURI(e).replace(/%25/g,"%")}catch(e){return null}return e}const x={exec:()=>null};function b(e,t){const n=e.replace(/\|/g,((e,t,n)=>{let s=!1,r=t;for(;--r>=0&&"\\"===n[r];)s=!s;return s?"|":" |"})).split(/ \|/);let s=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),t)if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;s<n.length;s++)n[s]=n[s].trim().replace(/\\\|/g,"|");return n}function w(e,t,n){const s=e.length;if(0===s)return"";let r=0;for(;r<s;){const i=e.charAt(s-r-1);if(i!==t||n){if(i===t||!n)break;r++}else r++}return e.slice(0,s-r)}function m(e,t,n,s){const r=t.href,i=t.title?p(t.title):null,l=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){s.state.inLink=!0;const e={type:"link",raw:n,href:r,title:i,text:l,tokens:s.inlineTokens(l)};return s.state.inLink=!1,e}return{type:"image",raw:n,href:r,title:i,text:p(l)}}class y{options;rules;lexer;constructor(e){this.options=e||s}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:w(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function(e,t){const n=e.match(/^(\s+)(?:```)/);if(null===n)return t;const s=n[1];return t.split("\n").map((e=>{const t=e.match(/^\s+/);if(null===t)return e;const[n]=t;return n.length>=s.length?e.slice(s.length):e})).join("\n")}(e,t[3]||"");return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline.anyPunctuation,"$1"):t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(/#$/.test(e)){const t=w(e,"#");this.options.pedantic?e=t.trim():t&&!/ $/.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){let e=t[0].replace(/\n {0,3}((?:=+|-+) *)(?=\n|$)/g,"\n    $1");e=w(e.replace(/^ *>[ \t]?/gm,""),"\n");const n=this.lexer.state.top;this.lexer.state.top=!0;const s=this.lexer.blockTokens(e);return this.lexer.state.top=n,{type:"blockquote",raw:t[0],tokens:s,text:e}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n=t[1].trim();const s=n.length>1,r={type:"list",raw:"",ordered:s,start:s?+n.slice(0,-1):"",loose:!1,items:[]};n=s?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=s?n:"[*+-]");const i=new RegExp(`^( {0,3}${n})((?:[\t ][^\\n]*)?(?:\\n|$))`);let l="",o="",a=!1;for(;e;){let n=!1;if(!(t=i.exec(e)))break;if(this.rules.block.hr.test(e))break;l=t[0],e=e.substring(l.length);let s=t[2].split("\n",1)[0].replace(/^\t+/,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],h=0;this.options.pedantic?(h=2,o=s.trimStart()):(h=t[2].search(/[^ ]/),h=h>4?1:h,o=s.slice(h),h+=t[1].length);let p=!1;if(!s&&/^ *$/.test(c)&&(l+=c+"\n",e=e.substring(c.length+1),n=!0),!n){const t=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),n=new RegExp(`^ {0,${Math.min(3,h-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),r=new RegExp(`^ {0,${Math.min(3,h-1)}}(?:\`\`\`|~~~)`),i=new RegExp(`^ {0,${Math.min(3,h-1)}}#`);for(;e;){const a=e.split("\n",1)[0];if(c=a,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),r.test(c))break;if(i.test(c))break;if(t.test(c))break;if(n.test(e))break;if(c.search(/[^ ]/)>=h||!c.trim())o+="\n"+c.slice(h);else{if(p)break;if(s.search(/[^ ]/)>=4)break;if(r.test(s))break;if(i.test(s))break;if(n.test(s))break;o+="\n"+c}p||c.trim()||(p=!0),l+=a+"\n",e=e.substring(a.length+1),s=c.slice(h)}}r.loose||(a?r.loose=!0:/\n *\n *$/.test(l)&&(a=!0));let u,k=null;this.options.gfm&&(k=/^\[[ xX]\] /.exec(o),k&&(u="[ ] "!==k[0],o=o.replace(/^\[[ xX]\] +/,""))),r.items.push({type:"list_item",raw:l,task:!!k,checked:u,loose:!1,text:o,tokens:[]}),r.raw+=l}r.items[r.items.length-1].raw=l.trimEnd(),r.items[r.items.length-1].text=o.trimEnd(),r.raw=r.raw.trimEnd();for(let e=0;e<r.items.length;e++)if(this.lexer.state.top=!1,r.items[e].tokens=this.lexer.blockTokens(r.items[e].text,[]),!r.loose){const t=r.items[e].tokens.filter((e=>"space"===e.type)),n=t.length>0&&t.some((e=>/\n.*\n/.test(e.raw)));r.loose=n}if(r.loose)for(let e=0;e<r.items.length;e++)r.items[e].loose=!0;return r}}html(e){const t=this.rules.block.html.exec(e);if(t)return{type:"html",block:!0,raw:t[0],pre:"pre"===t[1]||"script"===t[1]||"style"===t[1],text:t[0]}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(/\s+/g," "),n=t[2]?t[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline.anyPunctuation,"$1"):"",s=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline.anyPunctuation,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:n,title:s}}}table(e){const t=this.rules.block.table.exec(e);if(!t)return;if(!/[:|]/.test(t[2]))return;const n=b(t[1]),s=t[2].replace(/^\||\| *$/g,"").split("|"),r=t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[],i={type:"table",raw:t[0],header:[],align:[],rows:[]};if(n.length===s.length){for(const e of s)/^ *-+: *$/.test(e)?i.align.push("right"):/^ *:-+: *$/.test(e)?i.align.push("center"):/^ *:-+ *$/.test(e)?i.align.push("left"):i.align.push(null);for(const e of n)i.header.push({text:e,tokens:this.lexer.inline(e)});for(const e of r)i.rows.push(b(e,i.header.length).map((e=>({text:e,tokens:this.lexer.inline(e)}))));return i}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:p(t[1])}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const t=w(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;let n=0;for(let s=0;s<e.length;s++)if("\\"===e[s])s++;else if(e[s]===t[0])n++;else if(e[s]===t[1]&&(n--,n<0))return s;return-1}(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],s="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n);e&&(n=e[1],s=e[3])}else s=t[3]?t[3].slice(1,-1):"";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(e)?n.slice(1):n.slice(1,-1)),m(t,{href:n?n.replace(this.rules.inline.anyPunctuation,"$1"):n,title:s?s.replace(this.rules.inline.anyPunctuation,"$1"):s},t[0],this.lexer)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){const e=t[(n[2]||n[1]).replace(/\s+/g," ").toLowerCase()];if(!e){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return m(n,e,n[0],this.lexer)}}emStrong(e,t,n=""){let s=this.rules.inline.emStrongLDelim.exec(e);if(s&&(!s[3]||!n.match(/[\p{L}\p{N}]/u))&&(!s[1]&&!s[2]||!n||this.rules.inline.punctuation.exec(n))){const n=[...s[0]].length-1;let r,i,l=n,o=0;const a="*"===s[0][0]?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(a.lastIndex=0,t=t.slice(-1*e.length+n);null!=(s=a.exec(t));){if(r=s[1]||s[2]||s[3]||s[4]||s[5]||s[6],!r)continue;if(i=[...r].length,s[3]||s[4]){l+=i;continue}if((s[5]||s[6])&&n%3&&!((n+i)%3)){o+=i;continue}if(l-=i,l>0)continue;i=Math.min(i,i+l+o);const t=[...s[0]][0].length,a=e.slice(0,n+s.index+t+i);if(Math.min(n,i)%2){const e=a.slice(1,-1);return{type:"em",raw:a,text:e,tokens:this.lexer.inlineTokens(e)}}const c=a.slice(2,-2);return{type:"strong",raw:a,text:c,tokens:this.lexer.inlineTokens(c)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(/\n/g," ");const n=/[^ ]/.test(e),s=/^ /.test(e)&&/ $/.test(e);return n&&s&&(e=e.substring(1,e.length-1)),e=p(e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e){const t=this.rules.inline.autolink.exec(e);if(t){let e,n;return"@"===t[2]?(e=p(t[1]),n="mailto:"+e):(e=p(t[1]),n=e),{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}url(e){let t;if(t=this.rules.inline.url.exec(e)){let e,n;if("@"===t[2])e=p(t[0]),n="mailto:"+e;else{let s;do{s=t[0],t[0]=this.rules.inline._backpedal.exec(t[0])?.[0]??""}while(s!==t[0]);e=p(t[0]),n="www."===t[1]?"http://"+t[0]:t[0]}return{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e){const t=this.rules.inline.text.exec(e);if(t){let e;return e=this.lexer.state.inRawBlock?t[0]:p(t[0]),{type:"text",raw:t[0],text:e}}}}const $=/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,z=/(?:[*+-]|\d{1,9}[.)])/,T=f(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g,z).replace(/blockCode/g,/ {4}/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).getRegex(),R=/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,_=/(?!\s*\])(?:\\.|[^\[\]\\])+/,A=f(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace("label",_).replace("title",/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(),S=f(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g,z).getRegex(),I="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",E=/<!--(?:-?>|[\s\S]*?(?:-->|$))/,q=f("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))","i").replace("comment",E).replace("tag",I).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),Z=f(R).replace("hr",$).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",I).getRegex(),L={blockquote:f(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph",Z).getRegex(),code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,def:A,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,hr:$,html:q,lheading:T,list:S,newline:/^(?: *(?:\n|$))+/,paragraph:Z,table:x,text:/^[^\n]+/},P=f("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr",$).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",I).getRegex(),C={...L,table:P,paragraph:f(R).replace("hr",$).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("table",P).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",I).getRegex()},Q={...L,html:f("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",E).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:x,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:f(R).replace("hr",$).replace("heading"," *#{1,6} *[^\n]").replace("lheading",T).replace("|table","").replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").replace("|tag","").getRegex()},v=/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,B=/^( {2,}|\\)\n(?!\s*$)/,M="\\p{P}\\p{S}",O=f(/^((?![*_])[\spunctuation])/,"u").replace(/punctuation/g,M).getRegex(),D=f(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,"u").replace(/punct/g,M).getRegex(),j=f("^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])","gu").replace(/punct/g,M).getRegex(),H=f("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])","gu").replace(/punct/g,M).getRegex(),U=f(/\\([punct])/,"gu").replace(/punct/g,M).getRegex(),X=f(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),F=f(E).replace("(?:--\x3e|$)","--\x3e").getRegex(),N=f("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment",F).replace("attribute",/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(),G=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,J=f(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label",G).replace("href",/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title",/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(),K=f(/^!?\[(label)\]\[(ref)\]/).replace("label",G).replace("ref",_).getRegex(),V=f(/^!?\[(ref)\](?:\[\])?/).replace("ref",_).getRegex(),W={_backpedal:x,anyPunctuation:U,autolink:X,blockSkip:/\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g,br:B,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,del:x,emStrongLDelim:D,emStrongRDelimAst:j,emStrongRDelimUnd:H,escape:v,link:J,nolink:V,punctuation:O,reflink:K,reflinkSearch:f("reflink|nolink(?!\\()","g").replace("reflink",K).replace("nolink",V).getRegex(),tag:N,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,url:x},Y={...W,link:f(/^!?\[(label)\]\((.*?)\)/).replace("label",G).getRegex(),reflink:f(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",G).getRegex()},ee={...W,escape:f(v).replace("])","~|])").getRegex(),url:f(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,"i").replace("email",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},te={...ee,br:f(B).replace("{2,}","*").getRegex(),text:f(ee.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()},ne={normal:L,gfm:C,pedantic:Q},se={normal:W,gfm:ee,breaks:te,pedantic:Y};class re{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||s,this.options.tokenizer=this.options.tokenizer||new y,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const t={block:ne.normal,inline:se.normal};this.options.pedantic?(t.block=ne.pedantic,t.inline=se.pedantic):this.options.gfm&&(t.block=ne.gfm,this.options.breaks?t.inline=se.breaks:t.inline=se.gfm),this.tokenizer.rules=t}static get rules(){return{block:ne,inline:se}}static lex(e,t){return new re(t).lex(e)}static lexInline(e,t){return new re(t).inlineTokens(e)}lex(e){e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);for(let e=0;e<this.inlineQueue.length;e++){const t=this.inlineQueue[e];this.inlineTokens(t.src,t.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(e,t=[]){let n,s,r,i;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,t,n)=>t+"    ".repeat(n.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((s=>!!(n=s.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),s=t[t.length-1],!s||"paragraph"!==s.type&&"text"!==s.type?t.push(n):(s.raw+="\n"+n.raw,s.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=s.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),s=t[t.length-1],!s||"paragraph"!==s.type&&"text"!==s.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(s.raw+="\n"+n.raw,s.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=s.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else{if(r=e,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const n=e.slice(1);let s;this.options.extensions.startBlock.forEach((e=>{s=e.call({lexer:this},n),"number"==typeof s&&s>=0&&(t=Math.min(t,s))})),t<1/0&&t>=0&&(r=e.substring(0,t+1))}if(this.state.top&&(n=this.tokenizer.paragraph(r)))s=t[t.length-1],i&&"paragraph"===s.type?(s.raw+="\n"+n.raw,s.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=s.text):t.push(n),i=r.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),s=t[t.length-1],s&&"text"===s.type?(s.raw+="\n"+n.raw,s.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=s.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n,s,r,i,l,o,a=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(i=this.tokenizer.rules.inline.reflinkSearch.exec(a));)e.includes(i[0].slice(i[0].lastIndexOf("[")+1,-1))&&(a=a.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+a.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(i=this.tokenizer.rules.inline.blockSkip.exec(a));)a=a.slice(0,i.index)+"["+"a".repeat(i[0].length-2)+"]"+a.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(i=this.tokenizer.rules.inline.anyPunctuation.exec(a));)a=a.slice(0,i.index)+"++"+a.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;e;)if(l||(o=""),l=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((s=>!!(n=s.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),s=t[t.length-1],s&&"text"===n.type&&"text"===s.type?(s.raw+=n.raw,s.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),s=t[t.length-1],s&&"text"===n.type&&"text"===s.type?(s.raw+=n.raw,s.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,a,o))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e))){if(r=e,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const n=e.slice(1);let s;this.options.extensions.startInline.forEach((e=>{s=e.call({lexer:this},n),"number"==typeof s&&s>=0&&(t=Math.min(t,s))})),t<1/0&&t>=0&&(r=e.substring(0,t+1))}if(n=this.tokenizer.inlineText(r))e=e.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(o=n.raw.slice(-1)),l=!0,s=t[t.length-1],s&&"text"===s.type?(s.raw+=n.raw,s.text+=n.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(n.raw.length),t.push(n);return t}}class ie{options;constructor(e){this.options=e||s}code(e,t,n){const s=(t||"").match(/^\S*/)?.[0];return e=e.replace(/\n$/,"")+"\n",s?'<pre><code class="language-'+p(s)+'">'+(n?e:p(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:p(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e,t){return e}heading(e,t,n){return`<h${t}>${e}</h${t}>\n`}hr(){return"<hr>\n"}list(e,t,n){const s=t?"ol":"ul";return"<"+s+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+s+">\n"}listitem(e,t,n){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox">'}paragraph(e){return`<p>${e}</p>\n`}table(e,t){return t&&(t=`<tbody>${t}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,t){const n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return"<br>"}del(e){return`<del>${e}</del>`}link(e,t,n){const s=d(e);if(null===s)return n;let r='<a href="'+(e=s)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>",r}image(e,t,n){const s=d(e);if(null===s)return n;let r=`<img src="${e=s}" alt="${n}"`;return t&&(r+=` title="${t}"`),r+=">",r}text(e){return e}}class le{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}class oe{options;renderer;textRenderer;constructor(e){this.options=e||s,this.options.renderer=this.options.renderer||new ie,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new le}static parse(e,t){return new oe(t).parse(e)}static parseInline(e,t){return new oe(t).parseInline(e)}parse(e,t=!0){let n="";for(let s=0;s<e.length;s++){const r=e[s];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type]){const e=r,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){n+=t||"";continue}}switch(r.type){case"space":continue;case"hr":n+=this.renderer.hr();continue;case"heading":{const e=r;n+=this.renderer.heading(this.parseInline(e.tokens),e.depth,k(this.parseInline(e.tokens,this.textRenderer)));continue}case"code":{const e=r;n+=this.renderer.code(e.text,e.lang,!!e.escaped);continue}case"table":{const e=r;let t="",s="";for(let t=0;t<e.header.length;t++)s+=this.renderer.tablecell(this.parseInline(e.header[t].tokens),{header:!0,align:e.align[t]});t+=this.renderer.tablerow(s);let i="";for(let t=0;t<e.rows.length;t++){const n=e.rows[t];s="";for(let t=0;t<n.length;t++)s+=this.renderer.tablecell(this.parseInline(n[t].tokens),{header:!1,align:e.align[t]});i+=this.renderer.tablerow(s)}n+=this.renderer.table(t,i);continue}case"blockquote":{const e=r,t=this.parse(e.tokens);n+=this.renderer.blockquote(t);continue}case"list":{const e=r,t=e.ordered,s=e.start,i=e.loose;let l="";for(let t=0;t<e.items.length;t++){const n=e.items[t],s=n.checked,r=n.task;let o="";if(n.task){const e=this.renderer.checkbox(!!s);i?n.tokens.length>0&&"paragraph"===n.tokens[0].type?(n.tokens[0].text=e+" "+n.tokens[0].text,n.tokens[0].tokens&&n.tokens[0].tokens.length>0&&"text"===n.tokens[0].tokens[0].type&&(n.tokens[0].tokens[0].text=e+" "+n.tokens[0].tokens[0].text)):n.tokens.unshift({type:"text",text:e+" "}):o+=e+" "}o+=this.parse(n.tokens,i),l+=this.renderer.listitem(o,r,!!s)}n+=this.renderer.list(l,t,s);continue}case"html":{const e=r;n+=this.renderer.html(e.text,e.block);continue}case"paragraph":{const e=r;n+=this.renderer.paragraph(this.parseInline(e.tokens));continue}case"text":{let i=r,l=i.tokens?this.parseInline(i.tokens):i.text;for(;s+1<e.length&&"text"===e[s+1].type;)i=e[++s],l+="\n"+(i.tokens?this.parseInline(i.tokens):i.text);n+=t?this.renderer.paragraph(l):l;continue}default:{const e='Token with "'+r.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}parseInline(e,t){t=t||this.renderer;let n="";for(let s=0;s<e.length;s++){const r=e[s];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type]){const e=this.options.extensions.renderers[r.type].call({parser:this},r);if(!1!==e||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)){n+=e||"";continue}}switch(r.type){case"escape":{const e=r;n+=t.text(e.text);break}case"html":{const e=r;n+=t.html(e.text);break}case"link":{const e=r;n+=t.link(e.href,e.title,this.parseInline(e.tokens,t));break}case"image":{const e=r;n+=t.image(e.href,e.title,e.text);break}case"strong":{const e=r;n+=t.strong(this.parseInline(e.tokens,t));break}case"em":{const e=r;n+=t.em(this.parseInline(e.tokens,t));break}case"codespan":{const e=r;n+=t.codespan(e.text);break}case"br":n+=t.br();break;case"del":{const e=r;n+=t.del(this.parseInline(e.tokens,t));break}case"text":{const e=r;n+=t.text(e.text);break}default:{const e='Token with "'+r.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}}class ae{options;constructor(e){this.options=e||s}static passThroughHooks=new Set(["preprocess","postprocess","processAllTokens"]);preprocess(e){return e}postprocess(e){return e}processAllTokens(e){return e}}const ce=new class{defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};options=this.setOptions;parse=this.#e(re.lex,oe.parse);parseInline=this.#e(re.lexInline,oe.parseInline);Parser=oe;Renderer=ie;TextRenderer=le;Lexer=re;Tokenizer=y;Hooks=ae;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(const s of e)switch(n=n.concat(t.call(this,s)),s.type){case"table":{const e=s;for(const s of e.header)n=n.concat(this.walkTokens(s.tokens,t));for(const s of e.rows)for(const e of s)n=n.concat(this.walkTokens(e.tokens,t));break}case"list":{const e=s;n=n.concat(this.walkTokens(e.items,t));break}default:{const e=s;this.defaults.extensions?.childTokens?.[e.type]?this.defaults.extensions.childTokens[e.type].forEach((s=>{const r=e[s].flat(1/0);n=n.concat(this.walkTokens(r,t))})):e.tokens&&(n=n.concat(this.walkTokens(e.tokens,t)))}}return n}use(...e){const t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach((e=>{const n={...e};if(n.async=this.defaults.async||n.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if("renderer"in e){const n=t.renderers[e.name];t.renderers[e.name]=n?function(...t){let s=e.renderer.apply(this,t);return!1===s&&(s=n.apply(this,t)),s}:e.renderer}if("tokenizer"in e){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");const n=t[e.level];n?n.unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}"childTokens"in e&&e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),n.extensions=t),e.renderer){const t=this.defaults.renderer||new ie(this.defaults);for(const n in e.renderer){if(!(n in t))throw new Error(`renderer '${n}' does not exist`);if("options"===n)continue;const s=n,r=e.renderer[s],i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n||""}}n.renderer=t}if(e.tokenizer){const t=this.defaults.tokenizer||new y(this.defaults);for(const n in e.tokenizer){if(!(n in t))throw new Error(`tokenizer '${n}' does not exist`);if(["options","rules","lexer"].includes(n))continue;const s=n,r=e.tokenizer[s],i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.tokenizer=t}if(e.hooks){const t=this.defaults.hooks||new ae;for(const n in e.hooks){if(!(n in t))throw new Error(`hook '${n}' does not exist`);if("options"===n)continue;const s=n,r=e.hooks[s],i=t[s];ae.passThroughHooks.has(n)?t[s]=e=>{if(this.defaults.async)return Promise.resolve(r.call(t,e)).then((e=>i.call(t,e)));const n=r.call(t,e);return i.call(t,n)}:t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.hooks=t}if(e.walkTokens){const t=this.defaults.walkTokens,s=e.walkTokens;n.walkTokens=function(e){let n=[];return n.push(s.call(this,e)),t&&(n=n.concat(t.call(this,e))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(e){return this.defaults={...this.defaults,...e},this}lexer(e,t){return re.lex(e,t??this.defaults)}parser(e,t){return oe.parse(e,t??this.defaults)}#e(e,t){return(n,s)=>{const r={...s},i={...this.defaults,...r};!0===this.defaults.async&&!1===r.async&&(i.silent||console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored."),i.async=!0);const l=this.#t(!!i.silent,!!i.async);if(null==n)return l(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof n)return l(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(n)+", string expected"));if(i.hooks&&(i.hooks.options=i),i.async)return Promise.resolve(i.hooks?i.hooks.preprocess(n):n).then((t=>e(t,i))).then((e=>i.hooks?i.hooks.processAllTokens(e):e)).then((e=>i.walkTokens?Promise.all(this.walkTokens(e,i.walkTokens)).then((()=>e)):e)).then((e=>t(e,i))).then((e=>i.hooks?i.hooks.postprocess(e):e)).catch(l);try{i.hooks&&(n=i.hooks.preprocess(n));let s=e(n,i);i.hooks&&(s=i.hooks.processAllTokens(s)),i.walkTokens&&this.walkTokens(s,i.walkTokens);let r=t(s,i);return i.hooks&&(r=i.hooks.postprocess(r)),r}catch(e){return l(e)}}}#t(e,t){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+p(n.message+"",!0)+"</pre>";return t?Promise.resolve(e):e}if(t)return Promise.reject(n);throw n}}};function he(e,t){return ce.parse(e,t)}he.options=he.setOptions=function(e){return ce.setOptions(e),he.defaults=ce.defaults,r(he.defaults),he},he.getDefaults=function(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}},he.defaults=s,he.use=function(...e){return ce.use(...e),he.defaults=ce.defaults,r(he.defaults),he},he.walkTokens=function(e,t){return ce.walkTokens(e,t)},he.parseInline=ce.parseInline,he.Parser=oe,he.parser=oe.parse,he.Renderer=ie,he.TextRenderer=le,he.Lexer=re,he.lexer=re.lex,he.Tokenizer=y,he.Hooks=ae,he.parse=he,he.options,he.setOptions,he.use,he.walkTokens,he.parseInline,oe.parse,re.lex}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvMjMuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtSUE0QkEsSUFBSUEsRUFiTyxDQUNIQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsV0FBWSxLQUNaQyxLQUFLLEVBQ0xDLE1BQU8sS0FDUEMsVUFBVSxFQUNWQyxTQUFVLEtBQ1ZDLFFBQVEsRUFDUkMsVUFBVyxLQUNYQyxXQUFZLE1BSXBCLFNBQVNDLEVBQWVDLEdBQ3BCWixFQUFZWSxDQUNoQixDQUtBLE1BQU1DLEVBQWEsVUFDYkMsRUFBZ0IsSUFBSUMsT0FBT0YsRUFBV0csT0FBUSxLQUM5Q0MsRUFBcUIsb0RBQ3JCQyxFQUF3QixJQUFJSCxPQUFPRSxFQUFtQkQsT0FBUSxLQUM5REcsRUFBcUIsQ0FDdkIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxTQUNMLElBQUssU0FFSEMsRUFBd0JDLEdBQU9GLEVBQW1CRSxHQUN4RCxTQUFTQyxFQUFTQyxFQUFNQyxHQUNwQixHQUFJQSxHQUNBLEdBQUlYLEVBQVdZLEtBQUtGLEdBQ2hCLE9BQU9BLEVBQUtHLFFBQVFaLEVBQWVNLFFBSXZDLEdBQUlILEVBQW1CUSxLQUFLRixHQUN4QixPQUFPQSxFQUFLRyxRQUFRUixFQUF1QkUsR0FHbkQsT0FBT0csQ0FDWCxDQUNBLE1BQU1JLEVBQWUsNkNBQ3JCLFNBQVNDLEVBQVNMLEdBRWQsT0FBT0EsRUFBS0csUUFBUUMsR0FBYyxDQUFDRSxFQUFHQyxJQUV4QixXQURWQSxFQUFJQSxFQUFFQyxlQUVLLElBQ1MsTUFBaEJELEVBQUVFLE9BQU8sR0FDYyxNQUFoQkYsRUFBRUUsT0FBTyxHQUNWQyxPQUFPQyxhQUFhQyxTQUFTTCxFQUFFTSxVQUFVLEdBQUksS0FDN0NILE9BQU9DLGNBQWNKLEVBQUVNLFVBQVUsSUFFcEMsSUFFZixDQUNBLE1BQU1DLEVBQVEsZUFDZCxTQUFTQyxFQUFLQyxFQUFPQyxHQUNqQixJQUFJeEIsRUFBMEIsaUJBQVZ1QixFQUFxQkEsRUFBUUEsRUFBTXZCLE9BQ3ZEd0IsRUFBTUEsR0FBTyxHQUNiLE1BQU1DLEVBQU0sQ0FDUmYsUUFBUyxDQUFDZ0IsRUFBTUMsS0FDWixJQUFJQyxFQUEyQixpQkFBUkQsRUFBbUJBLEVBQU1BLEVBQUkzQixPQUdwRCxPQUZBNEIsRUFBWUEsRUFBVWxCLFFBQVFXLEVBQU8sTUFDckNyQixFQUFTQSxFQUFPVSxRQUFRZ0IsRUFBTUUsR0FDdkJILENBQUcsRUFFZEksU0FBVSxJQUNDLElBQUk5QixPQUFPQyxFQUFRd0IsSUFHbEMsT0FBT0MsQ0FDWCxDQUNBLFNBQVNLLEVBQVNDLEdBQ2QsSUFDSUEsRUFBT0MsVUFBVUQsR0FBTXJCLFFBQVEsT0FBUSxJQUMzQyxDQUNBLE1BQU91QixHQUNILE9BQU8sSUFDWCxDQUNBLE9BQU9GLENBQ1gsQ0FDQSxNQUFNRyxFQUFXLENBQUVDLEtBQU0sSUFBTSxNQUMvQixTQUFTQyxFQUFXQyxFQUFVQyxHQUcxQixNQWNJQyxFQWRRRixFQUFTM0IsUUFBUSxPQUFPLENBQUM4QixFQUFPQyxFQUFRQyxLQUNoRCxJQUFJQyxHQUFVLEVBQ1ZDLEVBQU9ILEVBQ1gsT0FBU0csR0FBUSxHQUFtQixPQUFkRixFQUFJRSxJQUN0QkQsR0FBV0EsRUFDZixPQUFJQSxFQUdPLElBSUEsSUFDWCxJQUNZRSxNQUFNLE9BQ3RCLElBQUlDLEVBQUksRUFRUixHQU5LUCxFQUFNLEdBQUdRLFFBQ1ZSLEVBQU1TLFFBRU5ULEVBQU1VLE9BQVMsSUFBTVYsRUFBTUEsRUFBTVUsT0FBUyxHQUFHRixRQUM3Q1IsRUFBTVcsTUFFTlosRUFDQSxHQUFJQyxFQUFNVSxPQUFTWCxFQUNmQyxFQUFNWSxPQUFPYixRQUdiLEtBQU9DLEVBQU1VLE9BQVNYLEdBQ2xCQyxFQUFNYSxLQUFLLElBR3ZCLEtBQU9OLEVBQUlQLEVBQU1VLE9BQVFILElBRXJCUCxFQUFNTyxHQUFLUCxFQUFNTyxHQUFHQyxPQUFPckMsUUFBUSxRQUFTLEtBRWhELE9BQU82QixDQUNYLENBU0EsU0FBU2MsRUFBTVgsRUFBS1ksRUFBR0MsR0FDbkIsTUFBTUMsRUFBSWQsRUFBSU8sT0FDZCxHQUFVLElBQU5PLEVBQ0EsTUFBTyxHQUdYLElBQUlDLEVBQVUsRUFFZCxLQUFPQSxFQUFVRCxHQUFHLENBQ2hCLE1BQU1FLEVBQVdoQixFQUFJMUIsT0FBT3dDLEVBQUlDLEVBQVUsR0FDMUMsR0FBSUMsSUFBYUosR0FBTUMsRUFHbEIsSUFBSUcsSUFBYUosSUFBS0MsRUFJdkIsTUFIQUUsR0FJSixNQVBJQSxHQVFSLENBQ0EsT0FBT2YsRUFBSWlCLE1BQU0sRUFBR0gsRUFBSUMsRUFDNUIsQ0F1QkEsU0FBU0csRUFBV0MsRUFBS0MsRUFBTUMsRUFBS0MsR0FDaEMsTUFBTWpDLEVBQU8rQixFQUFLL0IsS0FDWmtDLEVBQVFILEVBQUtHLE1BQVEzRCxFQUFTd0QsRUFBS0csT0FBUyxLQUM1Q0MsRUFBT0wsRUFBSSxHQUFHbkQsUUFBUSxjQUFlLE1BQzNDLEdBQXlCLE1BQXJCbUQsRUFBSSxHQUFHN0MsT0FBTyxHQUFZLENBQzFCZ0QsRUFBTUcsTUFBTUMsUUFBUyxFQUNyQixNQUFNQyxFQUFRLENBQ1ZDLEtBQU0sT0FDTlAsTUFDQWhDLE9BQ0FrQyxRQUNBQyxPQUNBSyxPQUFRUCxFQUFNUSxhQUFhTixJQUcvQixPQURBRixFQUFNRyxNQUFNQyxRQUFTLEVBQ2RDLENBQ1gsQ0FDQSxNQUFPLENBQ0hDLEtBQU0sUUFDTlAsTUFDQWhDLE9BQ0FrQyxRQUNBQyxLQUFNNUQsRUFBUzRELEdBRXZCLENBeUJBLE1BQU1PLEVBQ0ZDLFFBQ0FDLE1BQ0FYLE1BQ0EsV0FBQVksQ0FBWUYsR0FDUkcsS0FBS0gsUUFBVUEsR0FBVzFGLENBQzlCLENBQ0EsS0FBQThGLENBQU1DLEdBQ0YsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNSyxNQUFNQyxRQUFROUMsS0FBSzRDLEdBQzFDLEdBQUlsQixHQUFPQSxFQUFJLEdBQUdaLE9BQVMsRUFDdkIsTUFBTyxDQUNIcUIsS0FBTSxRQUNOUCxJQUFLRixFQUFJLEdBR3JCLENBQ0EsSUFBQXFCLENBQUtILEdBQ0QsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNSyxNQUFNRSxLQUFLL0MsS0FBSzRDLEdBQ3ZDLEdBQUlsQixFQUFLLENBQ0wsTUFBTUssRUFBT0wsRUFBSSxHQUFHbkQsUUFBUSxZQUFhLElBQ3pDLE1BQU8sQ0FDSDRELEtBQU0sT0FDTlAsSUFBS0YsRUFBSSxHQUNUc0IsZUFBZ0IsV0FDaEJqQixLQUFPVyxLQUFLSCxRQUFRcEYsU0FFZDRFLEVBREFiLEVBQU1hLEVBQU0sTUFHMUIsQ0FDSixDQUNBLE1BQUFrQixDQUFPTCxHQUNILE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTUssTUFBTUksT0FBT2pELEtBQUs0QyxHQUN6QyxHQUFJbEIsRUFBSyxDQUNMLE1BQU1FLEVBQU1GLEVBQUksR0FDVkssRUExRGxCLFNBQWdDSCxFQUFLRyxHQUNqQyxNQUFNbUIsRUFBb0J0QixFQUFJdkIsTUFBTSxpQkFDcEMsR0FBMEIsT0FBdEI2QyxFQUNBLE9BQU9uQixFQUVYLE1BQU1vQixFQUFlRCxFQUFrQixHQUN2QyxPQUFPbkIsRUFDRnJCLE1BQU0sTUFDTjBDLEtBQUlDLElBQ0wsTUFBTUMsRUFBb0JELEVBQUtoRCxNQUFNLFFBQ3JDLEdBQTBCLE9BQXRCaUQsRUFDQSxPQUFPRCxFQUVYLE1BQU9FLEdBQWdCRCxFQUN2QixPQUFJQyxFQUFhekMsUUFBVXFDLEVBQWFyQyxPQUM3QnVDLEVBQUs3QixNQUFNMkIsRUFBYXJDLFFBRTVCdUMsQ0FBSSxJQUVWRyxLQUFLLEtBQ2QsQ0FzQ3lCQyxDQUF1QjdCLEVBQUtGLEVBQUksSUFBTSxJQUNuRCxNQUFPLENBQ0hTLEtBQU0sT0FDTlAsTUFDQThCLEtBQU1oQyxFQUFJLEdBQUtBLEVBQUksR0FBR2QsT0FBT3JDLFFBQVFtRSxLQUFLRixNQUFNbUIsT0FBT0MsZUFBZ0IsTUFBUWxDLEVBQUksR0FDbkZLLE9BRVIsQ0FDSixDQUNBLE9BQUE4QixDQUFRakIsR0FDSixNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1LLE1BQU1nQixRQUFRN0QsS0FBSzRDLEdBQzFDLEdBQUlsQixFQUFLLENBQ0wsSUFBSUssRUFBT0wsRUFBSSxHQUFHZCxPQUVsQixHQUFJLEtBQUt0QyxLQUFLeUQsR0FBTyxDQUNqQixNQUFNK0IsRUFBVTVDLEVBQU1hLEVBQU0sS0FDeEJXLEtBQUtILFFBQVFwRixTQUNiNEUsRUFBTytCLEVBQVFsRCxPQUVUa0QsSUFBVyxLQUFLeEYsS0FBS3dGLEtBRTNCL0IsRUFBTytCLEVBQVFsRCxPQUV2QixDQUNBLE1BQU8sQ0FDSHVCLEtBQU0sVUFDTlAsSUFBS0YsRUFBSSxHQUNUcUMsTUFBT3JDLEVBQUksR0FBR1osT0FDZGlCLE9BQ0FLLE9BQVFNLEtBQUtiLE1BQU04QixPQUFPNUIsR0FFbEMsQ0FDSixDQUNBLEVBQUFpQyxDQUFHcEIsR0FDQyxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1LLE1BQU1tQixHQUFHaEUsS0FBSzRDLEdBQ3JDLEdBQUlsQixFQUNBLE1BQU8sQ0FDSFMsS0FBTSxLQUNOUCxJQUFLRixFQUFJLEdBR3JCLENBQ0EsVUFBQXVDLENBQVdyQixHQUNQLE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTUssTUFBTW9CLFdBQVdqRSxLQUFLNEMsR0FDN0MsR0FBSWxCLEVBQUssQ0FFTCxJQUFJSyxFQUFPTCxFQUFJLEdBQUduRCxRQUFRLGlDQUFrQyxZQUM1RHdELEVBQU9iLEVBQU1hLEVBQUt4RCxRQUFRLGVBQWdCLElBQUssTUFDL0MsTUFBTTJGLEVBQU14QixLQUFLYixNQUFNRyxNQUFNa0MsSUFDN0J4QixLQUFLYixNQUFNRyxNQUFNa0MsS0FBTSxFQUN2QixNQUFNOUIsRUFBU00sS0FBS2IsTUFBTXNDLFlBQVlwQyxHQUV0QyxPQURBVyxLQUFLYixNQUFNRyxNQUFNa0MsSUFBTUEsRUFDaEIsQ0FDSC9CLEtBQU0sYUFDTlAsSUFBS0YsRUFBSSxHQUNUVSxTQUNBTCxPQUVSLENBQ0osQ0FDQSxJQUFBcUMsQ0FBS3hCLEdBQ0QsSUFBSWxCLEVBQU1nQixLQUFLRixNQUFNSyxNQUFNdUIsS0FBS3BFLEtBQUs0QyxHQUNyQyxHQUFJbEIsRUFBSyxDQUNMLElBQUkyQyxFQUFPM0MsRUFBSSxHQUFHZCxPQUNsQixNQUFNMEQsRUFBWUQsRUFBS3ZELE9BQVMsRUFDMUJzRCxFQUFPLENBQ1RqQyxLQUFNLE9BQ05QLElBQUssR0FDTDJDLFFBQVNELEVBQ1RFLE1BQU9GLEdBQWFELEVBQUs3QyxNQUFNLEdBQUksR0FBSyxHQUN4Q2lELE9BQU8sRUFDUEMsTUFBTyxJQUVYTCxFQUFPQyxFQUFZLGFBQWFELEVBQUs3QyxPQUFPLEtBQU8sS0FBSzZDLElBQ3BEM0IsS0FBS0gsUUFBUXBGLFdBQ2JrSCxFQUFPQyxFQUFZRCxFQUFPLFNBRzlCLE1BQU1NLEVBQVksSUFBSS9HLE9BQU8sV0FBV3lHLGtDQUN4QyxJQUFJekMsRUFBTSxHQUNOZ0QsRUFBZSxHQUNmQyxHQUFvQixFQUV4QixLQUFPakMsR0FBSyxDQUNSLElBQUlrQyxHQUFXLEVBQ2YsS0FBTXBELEVBQU1pRCxFQUFVM0UsS0FBSzRDLElBQ3ZCLE1BRUosR0FBSUYsS0FBS0YsTUFBTUssTUFBTW1CLEdBQUcxRixLQUFLc0UsR0FDekIsTUFFSmhCLEVBQU1GLEVBQUksR0FDVmtCLEVBQU1BLEVBQUkzRCxVQUFVMkMsRUFBSWQsUUFDeEIsSUFBSWlFLEVBQU9yRCxFQUFJLEdBQUdoQixNQUFNLEtBQU0sR0FBRyxHQUFHbkMsUUFBUSxRQUFTeUcsR0FBTSxJQUFJQyxPQUFPLEVBQUlELEVBQUVsRSxVQUN4RW9FLEVBQVd0QyxFQUFJbEMsTUFBTSxLQUFNLEdBQUcsR0FDOUJ5RSxFQUFTLEVBQ1R6QyxLQUFLSCxRQUFRcEYsVUFDYmdJLEVBQVMsRUFDVFAsRUFBZUcsRUFBS0ssY0FHcEJELEVBQVN6RCxFQUFJLEdBQUcyRCxPQUFPLFFBQ3ZCRixFQUFTQSxFQUFTLEVBQUksRUFBSUEsRUFDMUJQLEVBQWVHLEVBQUt2RCxNQUFNMkQsR0FDMUJBLEdBQVV6RCxFQUFJLEdBQUdaLFFBRXJCLElBQUl3RSxHQUFZLEVBTWhCLElBTEtQLEdBQVEsT0FBT3pHLEtBQUs0RyxLQUNyQnRELEdBQU9zRCxFQUFXLEtBQ2xCdEMsRUFBTUEsRUFBSTNELFVBQVVpRyxFQUFTcEUsT0FBUyxHQUN0Q2dFLEdBQVcsSUFFVkEsRUFBVSxDQUNYLE1BQU1TLEVBQWtCLElBQUkzSCxPQUFPLFFBQVE0SCxLQUFLQyxJQUFJLEVBQUdOLEVBQVMseURBQzFETyxFQUFVLElBQUk5SCxPQUFPLFFBQVE0SCxLQUFLQyxJQUFJLEVBQUdOLEVBQVMsd0RBQ2xEUSxFQUFtQixJQUFJL0gsT0FBTyxRQUFRNEgsS0FBS0MsSUFBSSxFQUFHTixFQUFTLHFCQUMzRFMsRUFBb0IsSUFBSWhJLE9BQU8sUUFBUTRILEtBQUtDLElBQUksRUFBR04sRUFBUyxRQUVsRSxLQUFPdkMsR0FBSyxDQUNSLE1BQU1pRCxFQUFVakQsRUFBSWxDLE1BQU0sS0FBTSxHQUFHLEdBT25DLEdBTkF3RSxFQUFXVyxFQUVQbkQsS0FBS0gsUUFBUXBGLFdBQ2IrSCxFQUFXQSxFQUFTM0csUUFBUSwwQkFBMkIsT0FHdkRvSCxFQUFpQnJILEtBQUs0RyxHQUN0QixNQUdKLEdBQUlVLEVBQWtCdEgsS0FBSzRHLEdBQ3ZCLE1BR0osR0FBSUssRUFBZ0JqSCxLQUFLNEcsR0FDckIsTUFHSixHQUFJUSxFQUFRcEgsS0FBS3NFLEdBQ2IsTUFFSixHQUFJc0MsRUFBU0csT0FBTyxTQUFXRixJQUFXRCxFQUFTdEUsT0FDL0NnRSxHQUFnQixLQUFPTSxFQUFTMUQsTUFBTTJELE9BRXJDLENBRUQsR0FBSUcsRUFDQSxNQUdKLEdBQUlQLEVBQUtNLE9BQU8sU0FBVyxFQUN2QixNQUVKLEdBQUlNLEVBQWlCckgsS0FBS3lHLEdBQ3RCLE1BRUosR0FBSWEsRUFBa0J0SCxLQUFLeUcsR0FDdkIsTUFFSixHQUFJVyxFQUFRcEgsS0FBS3lHLEdBQ2IsTUFFSkgsR0FBZ0IsS0FBT00sQ0FDM0IsQ0FDS0ksR0FBY0osRUFBU3RFLFNBQ3hCMEUsR0FBWSxHQUVoQjFELEdBQU9pRSxFQUFVLEtBQ2pCakQsRUFBTUEsRUFBSTNELFVBQVU0RyxFQUFRL0UsT0FBUyxHQUNyQ2lFLEVBQU9HLEVBQVMxRCxNQUFNMkQsRUFDMUIsQ0FDSixDQUNLZixFQUFLSyxRQUVGSSxFQUNBVCxFQUFLSyxPQUFRLEVBRVIsWUFBWW5HLEtBQUtzRCxLQUN0QmlELEdBQW9CLElBRzVCLElBQ0lpQixFQURBQyxFQUFTLEtBR1RyRCxLQUFLSCxRQUFRdEYsTUFDYjhJLEVBQVMsY0FBYy9GLEtBQUs0RSxHQUN4Qm1CLElBQ0FELEVBQTBCLFNBQWRDLEVBQU8sR0FDbkJuQixFQUFlQSxFQUFhckcsUUFBUSxlQUFnQixNQUc1RDZGLEVBQUtNLE1BQU16RCxLQUFLLENBQ1prQixLQUFNLFlBQ05QLE1BQ0FvRSxPQUFRRCxFQUNSRSxRQUFTSCxFQUNUckIsT0FBTyxFQUNQMUMsS0FBTTZDLEVBQ054QyxPQUFRLEtBRVpnQyxFQUFLeEMsS0FBT0EsQ0FDaEIsQ0FFQXdDLEVBQUtNLE1BQU1OLEVBQUtNLE1BQU01RCxPQUFTLEdBQUdjLElBQU1BLEVBQUlzRSxVQUMzQzlCLEVBQUtNLE1BQU1OLEVBQUtNLE1BQU01RCxPQUFTLEdBQUlpQixLQUFPNkMsRUFBYXNCLFVBQ3hEOUIsRUFBS3hDLElBQU13QyxFQUFLeEMsSUFBSXNFLFVBRXBCLElBQUssSUFBSXZGLEVBQUksRUFBR0EsRUFBSXlELEVBQUtNLE1BQU01RCxPQUFRSCxJQUduQyxHQUZBK0IsS0FBS2IsTUFBTUcsTUFBTWtDLEtBQU0sRUFDdkJFLEVBQUtNLE1BQU0vRCxHQUFHeUIsT0FBU00sS0FBS2IsTUFBTXNDLFlBQVlDLEVBQUtNLE1BQU0vRCxHQUFHb0IsS0FBTSxLQUM3RHFDLEVBQUtLLE1BQU8sQ0FFYixNQUFNMEIsRUFBVS9CLEVBQUtNLE1BQU0vRCxHQUFHeUIsT0FBT2dFLFFBQU9wQixHQUFnQixVQUFYQSxFQUFFN0MsT0FDN0NrRSxFQUF3QkYsRUFBUXJGLE9BQVMsR0FBS3FGLEVBQVFHLE1BQUt0QixHQUFLLFNBQVMxRyxLQUFLMEcsRUFBRXBELE9BQ3RGd0MsRUFBS0ssTUFBUTRCLENBQ2pCLENBR0osR0FBSWpDLEVBQUtLLE1BQ0wsSUFBSyxJQUFJOUQsRUFBSSxFQUFHQSxFQUFJeUQsRUFBS00sTUFBTTVELE9BQVFILElBQ25DeUQsRUFBS00sTUFBTS9ELEdBQUc4RCxPQUFRLEVBRzlCLE9BQU9MLENBQ1gsQ0FDSixDQUNBLElBQUFoRyxDQUFLd0UsR0FDRCxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1LLE1BQU16RSxLQUFLNEIsS0FBSzRDLEdBQ3ZDLEdBQUlsQixFQVFBLE1BUGMsQ0FDVlMsS0FBTSxPQUNOVSxPQUFPLEVBQ1BqQixJQUFLRixFQUFJLEdBQ1Q2RSxJQUFnQixRQUFYN0UsRUFBSSxJQUEyQixXQUFYQSxFQUFJLElBQThCLFVBQVhBLEVBQUksR0FDcERLLEtBQU1MLEVBQUksR0FJdEIsQ0FDQSxHQUFBOEUsQ0FBSTVELEdBQ0EsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNSyxNQUFNMkQsSUFBSXhHLEtBQUs0QyxHQUN0QyxHQUFJbEIsRUFBSyxDQUNMLE1BQU0rRSxFQUFNL0UsRUFBSSxHQUFHOUMsY0FBY0wsUUFBUSxPQUFRLEtBQzNDcUIsRUFBTzhCLEVBQUksR0FBS0EsRUFBSSxHQUFHbkQsUUFBUSxXQUFZLE1BQU1BLFFBQVFtRSxLQUFLRixNQUFNbUIsT0FBT0MsZUFBZ0IsTUFBUSxHQUNuRzlCLEVBQVFKLEVBQUksR0FBS0EsRUFBSSxHQUFHekMsVUFBVSxFQUFHeUMsRUFBSSxHQUFHWixPQUFTLEdBQUd2QyxRQUFRbUUsS0FBS0YsTUFBTW1CLE9BQU9DLGVBQWdCLE1BQVFsQyxFQUFJLEdBQ3BILE1BQU8sQ0FDSFMsS0FBTSxNQUNOc0UsTUFDQTdFLElBQUtGLEVBQUksR0FDVDlCLE9BQ0FrQyxRQUVSLENBQ0osQ0FDQSxLQUFBNEUsQ0FBTTlELEdBQ0YsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNSyxNQUFNNkQsTUFBTTFHLEtBQUs0QyxHQUN4QyxJQUFLbEIsRUFDRCxPQUVKLElBQUssT0FBT3BELEtBQUtvRCxFQUFJLElBRWpCLE9BRUosTUFBTWlGLEVBQVUxRyxFQUFXeUIsRUFBSSxJQUN6QmtGLEVBQVNsRixFQUFJLEdBQUduRCxRQUFRLGFBQWMsSUFBSW1DLE1BQU0sS0FDaERtRyxFQUFPbkYsRUFBSSxJQUFNQSxFQUFJLEdBQUdkLE9BQVNjLEVBQUksR0FBR25ELFFBQVEsWUFBYSxJQUFJbUMsTUFBTSxNQUFRLEdBQy9Fb0csRUFBTyxDQUNUM0UsS0FBTSxRQUNOUCxJQUFLRixFQUFJLEdBQ1RxRixPQUFRLEdBQ1JDLE1BQU8sR0FDUEgsS0FBTSxJQUVWLEdBQUlGLEVBQVE3RixTQUFXOEYsRUFBTzlGLE9BQTlCLENBSUEsSUFBSyxNQUFNa0csS0FBU0osRUFDWixZQUFZdEksS0FBSzBJLEdBQ2pCRixFQUFLRSxNQUFNL0YsS0FBSyxTQUVYLGFBQWEzQyxLQUFLMEksR0FDdkJGLEVBQUtFLE1BQU0vRixLQUFLLFVBRVgsWUFBWTNDLEtBQUswSSxHQUN0QkYsRUFBS0UsTUFBTS9GLEtBQUssUUFHaEI2RixFQUFLRSxNQUFNL0YsS0FBSyxNQUd4QixJQUFLLE1BQU04RixLQUFVSixFQUNqQkcsRUFBS0MsT0FBTzlGLEtBQUssQ0FDYmMsS0FBTWdGLEVBQ04zRSxPQUFRTSxLQUFLYixNQUFNOEIsT0FBT29ELEtBR2xDLElBQUssTUFBTUUsS0FBT0osRUFDZEMsRUFBS0QsS0FBSzVGLEtBQUtoQixFQUFXZ0gsRUFBS0gsRUFBS0MsT0FBT2pHLFFBQVFzQyxLQUFJOEQsSUFDNUMsQ0FDSG5GLEtBQU1tRixFQUNOOUUsT0FBUU0sS0FBS2IsTUFBTThCLE9BQU91RCxRQUl0QyxPQUFPSixDQTdCUCxDQThCSixDQUNBLFFBQUFLLENBQVN2RSxHQUNMLE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTUssTUFBTXNFLFNBQVNuSCxLQUFLNEMsR0FDM0MsR0FBSWxCLEVBQ0EsTUFBTyxDQUNIUyxLQUFNLFVBQ05QLElBQUtGLEVBQUksR0FDVHFDLE1BQTRCLE1BQXJCckMsRUFBSSxHQUFHN0MsT0FBTyxHQUFhLEVBQUksRUFDdENrRCxLQUFNTCxFQUFJLEdBQ1ZVLE9BQVFNLEtBQUtiLE1BQU04QixPQUFPakMsRUFBSSxJQUcxQyxDQUNBLFNBQUEwRixDQUFVeEUsR0FDTixNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1LLE1BQU11RSxVQUFVcEgsS0FBSzRDLEdBQzVDLEdBQUlsQixFQUFLLENBQ0wsTUFBTUssRUFBNEMsT0FBckNMLEVBQUksR0FBRzdDLE9BQU82QyxFQUFJLEdBQUdaLE9BQVMsR0FDckNZLEVBQUksR0FBR0YsTUFBTSxHQUFJLEdBQ2pCRSxFQUFJLEdBQ1YsTUFBTyxDQUNIUyxLQUFNLFlBQ05QLElBQUtGLEVBQUksR0FDVEssT0FDQUssT0FBUU0sS0FBS2IsTUFBTThCLE9BQU81QixHQUVsQyxDQUNKLENBQ0EsSUFBQUEsQ0FBS2EsR0FDRCxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1LLE1BQU1kLEtBQUsvQixLQUFLNEMsR0FDdkMsR0FBSWxCLEVBQ0EsTUFBTyxDQUNIUyxLQUFNLE9BQ05QLElBQUtGLEVBQUksR0FDVEssS0FBTUwsRUFBSSxHQUNWVSxPQUFRTSxLQUFLYixNQUFNOEIsT0FBT2pDLEVBQUksSUFHMUMsQ0FDQSxNQUFBMkYsQ0FBT3pFLEdBQ0gsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNbUIsT0FBTzBELE9BQU9ySCxLQUFLNEMsR0FDMUMsR0FBSWxCLEVBQ0EsTUFBTyxDQUNIUyxLQUFNLFNBQ05QLElBQUtGLEVBQUksR0FDVEssS0FBTTVELEVBQVN1RCxFQUFJLElBRy9CLENBQ0EsR0FBQStFLENBQUk3RCxHQUNBLE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTW1CLE9BQU84QyxJQUFJekcsS0FBSzRDLEdBQ3ZDLEdBQUlsQixFQWFBLE9BWktnQixLQUFLYixNQUFNRyxNQUFNQyxRQUFVLFFBQVEzRCxLQUFLb0QsRUFBSSxJQUM3Q2dCLEtBQUtiLE1BQU1HLE1BQU1DLFFBQVMsRUFFckJTLEtBQUtiLE1BQU1HLE1BQU1DLFFBQVUsVUFBVTNELEtBQUtvRCxFQUFJLE1BQ25EZ0IsS0FBS2IsTUFBTUcsTUFBTUMsUUFBUyxJQUV6QlMsS0FBS2IsTUFBTUcsTUFBTXNGLFlBQWMsaUNBQWlDaEosS0FBS29ELEVBQUksSUFDMUVnQixLQUFLYixNQUFNRyxNQUFNc0YsWUFBYSxFQUV6QjVFLEtBQUtiLE1BQU1HLE1BQU1zRixZQUFjLG1DQUFtQ2hKLEtBQUtvRCxFQUFJLE1BQ2hGZ0IsS0FBS2IsTUFBTUcsTUFBTXNGLFlBQWEsR0FFM0IsQ0FDSG5GLEtBQU0sT0FDTlAsSUFBS0YsRUFBSSxHQUNUTyxPQUFRUyxLQUFLYixNQUFNRyxNQUFNQyxPQUN6QnFGLFdBQVk1RSxLQUFLYixNQUFNRyxNQUFNc0YsV0FDN0J6RSxPQUFPLEVBQ1BkLEtBQU1MLEVBQUksR0FHdEIsQ0FDQSxJQUFBQyxDQUFLaUIsR0FDRCxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1tQixPQUFPaEMsS0FBSzNCLEtBQUs0QyxHQUN4QyxHQUFJbEIsRUFBSyxDQUNMLE1BQU02RixFQUFhN0YsRUFBSSxHQUFHZCxPQUMxQixJQUFLOEIsS0FBS0gsUUFBUXBGLFVBQVksS0FBS21CLEtBQUtpSixHQUFhLENBRWpELElBQU0sS0FBS2pKLEtBQUtpSixHQUNaLE9BR0osTUFBTUMsRUFBYXRHLEVBQU1xRyxFQUFXL0YsTUFBTSxHQUFJLEdBQUksTUFDbEQsSUFBSytGLEVBQVd6RyxPQUFTMEcsRUFBVzFHLFFBQVUsR0FBTSxFQUNoRCxNQUVSLEtBQ0ssQ0FFRCxNQUFNMkcsRUFyZnRCLFNBQTRCbEgsRUFBS21ILEdBQzdCLElBQTJCLElBQXZCbkgsRUFBSW9ILFFBQVFELEVBQUUsSUFDZCxPQUFRLEVBRVosSUFBSUUsRUFBUSxFQUNaLElBQUssSUFBSWpILEVBQUksRUFBR0EsRUFBSUosRUFBSU8sT0FBUUgsSUFDNUIsR0FBZSxPQUFYSixFQUFJSSxHQUNKQSxTQUVDLEdBQUlKLEVBQUlJLEtBQU8rRyxFQUFFLEdBQ2xCRSxTQUVDLEdBQUlySCxFQUFJSSxLQUFPK0csRUFBRSxLQUNsQkUsSUFDSUEsRUFBUSxHQUNSLE9BQU9qSCxFQUluQixPQUFRLENBQ1osQ0FpZXVDa0gsQ0FBbUJuRyxFQUFJLEdBQUksTUFDbEQsR0FBSStGLEdBQWtCLEVBQUcsQ0FDckIsTUFDTUssR0FEZ0MsSUFBeEJwRyxFQUFJLEdBQUdpRyxRQUFRLEtBQWEsRUFBSSxHQUN0QmpHLEVBQUksR0FBR1osT0FBUzJHLEVBQ3hDL0YsRUFBSSxHQUFLQSxFQUFJLEdBQUd6QyxVQUFVLEVBQUd3SSxHQUM3Qi9GLEVBQUksR0FBS0EsRUFBSSxHQUFHekMsVUFBVSxFQUFHNkksR0FBU2xILE9BQ3RDYyxFQUFJLEdBQUssRUFDYixDQUNKLENBQ0EsSUFBSTlCLEVBQU84QixFQUFJLEdBQ1hJLEVBQVEsR0FDWixHQUFJWSxLQUFLSCxRQUFRcEYsU0FBVSxDQUV2QixNQUFNd0UsRUFBTyxnQ0FBZ0MzQixLQUFLSixHQUM5QytCLElBQ0EvQixFQUFPK0IsRUFBSyxHQUNaRyxFQUFRSCxFQUFLLEdBRXJCLE1BRUlHLEVBQVFKLEVBQUksR0FBS0EsRUFBSSxHQUFHRixNQUFNLEdBQUksR0FBSyxHQVkzQyxPQVZBNUIsRUFBT0EsRUFBS2dCLE9BQ1IsS0FBS3RDLEtBQUtzQixLQUdOQSxFQUZBOEMsS0FBS0gsUUFBUXBGLFdBQWMsS0FBS21CLEtBQUtpSixHQUU5QjNILEVBQUs0QixNQUFNLEdBR1g1QixFQUFLNEIsTUFBTSxHQUFJLElBR3ZCQyxFQUFXQyxFQUFLLENBQ25COUIsS0FBTUEsRUFBT0EsRUFBS3JCLFFBQVFtRSxLQUFLRixNQUFNbUIsT0FBT0MsZUFBZ0IsTUFBUWhFLEVBQ3BFa0MsTUFBT0EsRUFBUUEsRUFBTXZELFFBQVFtRSxLQUFLRixNQUFNbUIsT0FBT0MsZUFBZ0IsTUFBUTlCLEdBQ3hFSixFQUFJLEdBQUlnQixLQUFLYixNQUNwQixDQUNKLENBQ0EsT0FBQWtHLENBQVFuRixFQUFLb0YsR0FDVCxJQUFJdEcsRUFDSixJQUFLQSxFQUFNZ0IsS0FBS0YsTUFBTW1CLE9BQU9vRSxRQUFRL0gsS0FBSzRDLE1BQ2xDbEIsRUFBTWdCLEtBQUtGLE1BQU1tQixPQUFPc0UsT0FBT2pJLEtBQUs0QyxJQUFPLENBQy9DLE1BQ01qQixFQUFPcUcsR0FET3RHLEVBQUksSUFBTUEsRUFBSSxJQUFJbkQsUUFBUSxPQUFRLEtBQ3hCSyxlQUM5QixJQUFLK0MsRUFBTSxDQUNQLE1BQU1JLEVBQU9MLEVBQUksR0FBRzdDLE9BQU8sR0FDM0IsTUFBTyxDQUNIc0QsS0FBTSxPQUNOUCxJQUFLRyxFQUNMQSxPQUVSLENBQ0EsT0FBT04sRUFBV0MsRUFBS0MsRUFBTUQsRUFBSSxHQUFJZ0IsS0FBS2IsTUFDOUMsQ0FDSixDQUNBLFFBQUFxRyxDQUFTdEYsRUFBS3VGLEVBQVdDLEVBQVcsSUFDaEMsSUFBSS9ILEVBQVFxQyxLQUFLRixNQUFNbUIsT0FBTzBFLGVBQWVySSxLQUFLNEMsR0FDbEQsR0FBS3ZDLEtBR0RBLEVBQU0sS0FBTStILEVBQVMvSCxNQUFNLHFCQUVkQSxFQUFNLEtBQU1BLEVBQU0sS0FDakIrSCxHQUFZMUYsS0FBS0YsTUFBTW1CLE9BQU8yRSxZQUFZdEksS0FBS29JLElBQVcsQ0FFeEUsTUFBTUcsRUFBVSxJQUFJbEksRUFBTSxJQUFJUyxPQUFTLEVBQ3ZDLElBQUkwSCxFQUFRQyxFQUFTQyxFQUFhSCxFQUFTSSxFQUFnQixFQUMzRCxNQUFNQyxFQUF5QixNQUFoQnZJLEVBQU0sR0FBRyxHQUFhcUMsS0FBS0YsTUFBTW1CLE9BQU9rRixrQkFBb0JuRyxLQUFLRixNQUFNbUIsT0FBT21GLGtCQUk3RixJQUhBRixFQUFPRyxVQUFZLEVBRW5CWixFQUFZQSxFQUFVM0csT0FBTyxFQUFJb0IsRUFBSTlCLE9BQVN5SCxHQUNILE9BQW5DbEksRUFBUXVJLEVBQU81SSxLQUFLbUksS0FBcUIsQ0FFN0MsR0FEQUssRUFBU25JLEVBQU0sSUFBTUEsRUFBTSxJQUFNQSxFQUFNLElBQU1BLEVBQU0sSUFBTUEsRUFBTSxJQUFNQSxFQUFNLElBQ3RFbUksRUFDRCxTQUVKLEdBREFDLEVBQVUsSUFBSUQsR0FBUTFILE9BQ2xCVCxFQUFNLElBQU1BLEVBQU0sR0FBSSxDQUN0QnFJLEdBQWNELEVBQ2QsUUFDSixDQUNLLElBQUlwSSxFQUFNLElBQU1BLEVBQU0sS0FDbkJrSSxFQUFVLE1BQVFBLEVBQVVFLEdBQVcsR0FBSSxDQUMzQ0UsR0FBaUJGLEVBQ2pCLFFBQ0osQ0FHSixHQURBQyxHQUFjRCxFQUNWQyxFQUFhLEVBQ2IsU0FFSkQsRUFBVWpELEtBQUtDLElBQUlnRCxFQUFTQSxFQUFVQyxFQUFhQyxHQUVuRCxNQUFNSyxFQUFpQixJQUFJM0ksRUFBTSxJQUFJLEdBQUdTLE9BQ2xDYyxFQUFNZ0IsRUFBSXBCLE1BQU0sRUFBRytHLEVBQVVsSSxFQUFNNEksTUFBUUQsRUFBaUJQLEdBRWxFLEdBQUlqRCxLQUFLQyxJQUFJOEMsRUFBU0UsR0FBVyxFQUFHLENBQ2hDLE1BQU0xRyxFQUFPSCxFQUFJSixNQUFNLEdBQUksR0FDM0IsTUFBTyxDQUNIVyxLQUFNLEtBQ05QLE1BQ0FHLE9BQ0FLLE9BQVFNLEtBQUtiLE1BQU1RLGFBQWFOLEdBRXhDLENBRUEsTUFBTUEsRUFBT0gsRUFBSUosTUFBTSxHQUFJLEdBQzNCLE1BQU8sQ0FDSFcsS0FBTSxTQUNOUCxNQUNBRyxPQUNBSyxPQUFRTSxLQUFLYixNQUFNUSxhQUFhTixHQUV4QyxDQUNKLENBQ0osQ0FDQSxRQUFBbUgsQ0FBU3RHLEdBQ0wsTUFBTWxCLEVBQU1nQixLQUFLRixNQUFNbUIsT0FBT1osS0FBSy9DLEtBQUs0QyxHQUN4QyxHQUFJbEIsRUFBSyxDQUNMLElBQUlLLEVBQU9MLEVBQUksR0FBR25ELFFBQVEsTUFBTyxLQUNqQyxNQUFNNEssRUFBbUIsT0FBTzdLLEtBQUt5RCxHQUMvQnFILEVBQTBCLEtBQUs5SyxLQUFLeUQsSUFBUyxLQUFLekQsS0FBS3lELEdBSzdELE9BSklvSCxHQUFvQkMsSUFDcEJySCxFQUFPQSxFQUFLOUMsVUFBVSxFQUFHOEMsRUFBS2pCLE9BQVMsSUFFM0NpQixFQUFPNUQsRUFBUzRELEdBQU0sR0FDZixDQUNISSxLQUFNLFdBQ05QLElBQUtGLEVBQUksR0FDVEssT0FFUixDQUNKLENBQ0EsRUFBQXNILENBQUd6RyxHQUNDLE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTW1CLE9BQU8wRixHQUFHckosS0FBSzRDLEdBQ3RDLEdBQUlsQixFQUNBLE1BQU8sQ0FDSFMsS0FBTSxLQUNOUCxJQUFLRixFQUFJLEdBR3JCLENBQ0EsR0FBQTRILENBQUkxRyxHQUNBLE1BQU1sQixFQUFNZ0IsS0FBS0YsTUFBTW1CLE9BQU8yRixJQUFJdEosS0FBSzRDLEdBQ3ZDLEdBQUlsQixFQUNBLE1BQU8sQ0FDSFMsS0FBTSxNQUNOUCxJQUFLRixFQUFJLEdBQ1RLLEtBQU1MLEVBQUksR0FDVlUsT0FBUU0sS0FBS2IsTUFBTVEsYUFBYVgsRUFBSSxJQUdoRCxDQUNBLFFBQUE2SCxDQUFTM0csR0FDTCxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1tQixPQUFPNEYsU0FBU3ZKLEtBQUs0QyxHQUM1QyxHQUFJbEIsRUFBSyxDQUNMLElBQUlLLEVBQU1uQyxFQVNWLE1BUmUsTUFBWDhCLEVBQUksSUFDSkssRUFBTzVELEVBQVN1RCxFQUFJLElBQ3BCOUIsRUFBTyxVQUFZbUMsSUFHbkJBLEVBQU81RCxFQUFTdUQsRUFBSSxJQUNwQjlCLEVBQU9tQyxHQUVKLENBQ0hJLEtBQU0sT0FDTlAsSUFBS0YsRUFBSSxHQUNUSyxPQUNBbkMsT0FDQXdDLE9BQVEsQ0FDSixDQUNJRCxLQUFNLE9BQ05QLElBQUtHLEVBQ0xBLFNBSWhCLENBQ0osQ0FDQSxHQUFBeUgsQ0FBSTVHLEdBQ0EsSUFBSWxCLEVBQ0osR0FBSUEsRUFBTWdCLEtBQUtGLE1BQU1tQixPQUFPNkYsSUFBSXhKLEtBQUs0QyxHQUFNLENBQ3ZDLElBQUliLEVBQU1uQyxFQUNWLEdBQWUsTUFBWDhCLEVBQUksR0FDSkssRUFBTzVELEVBQVN1RCxFQUFJLElBQ3BCOUIsRUFBTyxVQUFZbUMsTUFFbEIsQ0FFRCxJQUFJMEgsRUFDSixHQUNJQSxFQUFjL0gsRUFBSSxHQUNsQkEsRUFBSSxHQUFLZ0IsS0FBS0YsTUFBTW1CLE9BQU8rRixXQUFXMUosS0FBSzBCLEVBQUksTUFBTSxJQUFNLFNBQ3REK0gsSUFBZ0IvSCxFQUFJLElBQzdCSyxFQUFPNUQsRUFBU3VELEVBQUksSUFFaEI5QixFQURXLFNBQVg4QixFQUFJLEdBQ0csVUFBWUEsRUFBSSxHQUdoQkEsRUFBSSxFQUVuQixDQUNBLE1BQU8sQ0FDSFMsS0FBTSxPQUNOUCxJQUFLRixFQUFJLEdBQ1RLLE9BQ0FuQyxPQUNBd0MsT0FBUSxDQUNKLENBQ0lELEtBQU0sT0FDTlAsSUFBS0csRUFDTEEsU0FJaEIsQ0FDSixDQUNBLFVBQUE0SCxDQUFXL0csR0FDUCxNQUFNbEIsRUFBTWdCLEtBQUtGLE1BQU1tQixPQUFPNUIsS0FBSy9CLEtBQUs0QyxHQUN4QyxHQUFJbEIsRUFBSyxDQUNMLElBQUlLLEVBT0osT0FMSUEsRUFEQVcsS0FBS2IsTUFBTUcsTUFBTXNGLFdBQ1Y1RixFQUFJLEdBR0p2RCxFQUFTdUQsRUFBSSxJQUVqQixDQUNIUyxLQUFNLE9BQ05QLElBQUtGLEVBQUksR0FDVEssT0FFUixDQUNKLEVBTUosTUFHTWlDLEVBQUsscUVBRUw0RixFQUFTLHdCQUNUekMsRUFBV2hJLEVBQUssc0pBQ2pCWixRQUFRLFFBQVNxTCxHQUNqQnJMLFFBQVEsYUFBYyxRQUN0QkEsUUFBUSxVQUFXLHlCQUNuQkEsUUFBUSxjQUFlLFdBQ3ZCQSxRQUFRLFdBQVksZ0JBQ3BCQSxRQUFRLFFBQVMscUJBQ2pCbUIsV0FDQ21LLEVBQWEsdUZBRWJDLEVBQWMsOEJBQ2R0RCxFQUFNckgsRUFBSyxtR0FDWlosUUFBUSxRQUFTdUwsR0FDakJ2TCxRQUFRLFFBQVMsZ0VBQ2pCbUIsV0FDQzBFLEVBQU9qRixFQUFLLHdDQUNiWixRQUFRLFFBQVNxTCxHQUNqQmxLLFdBQ0NxSyxFQUFPLGdXQU1QQyxFQUFXLGdDQUNYNUwsRUFBT2UsRUFBSyxtZEFTUCxLQUNOWixRQUFRLFVBQVd5TCxHQUNuQnpMLFFBQVEsTUFBT3dMLEdBQ2Z4TCxRQUFRLFlBQWEsNEVBQ3JCbUIsV0FDQzBILEVBQVlqSSxFQUFLMEssR0FDbEJ0TCxRQUFRLEtBQU15RixHQUNkekYsUUFBUSxVQUFXLHlCQUNuQkEsUUFBUSxZQUFhLElBQ3JCQSxRQUFRLFNBQVUsSUFDbEJBLFFBQVEsYUFBYyxXQUN0QkEsUUFBUSxTQUFVLGtEQUNsQkEsUUFBUSxPQUFRLDBCQUNoQkEsUUFBUSxPQUFRLCtEQUNoQkEsUUFBUSxNQUFPd0wsR0FDZnJLLFdBT0N1SyxFQUFjLENBQ2hCaEcsV0FQZTlFLEVBQUssMkNBQ25CWixRQUFRLFlBQWE2SSxHQUNyQjFILFdBTURxRCxLQS9EYyx1Q0FnRWR5RCxNQUNBdkQsT0FoRVcsOEdBaUVYWSxRQS9EWSx1Q0FnRVpHLEtBQ0E1RixPQUNBK0ksV0FDQS9DLE9BQ0F0QixRQXhFWSxtQkF5RVpzRSxZQUNBVixNQUFPM0csRUFDUGdDLEtBNURjLFdBaUVabUksRUFBVy9LLEVBQUssK0pBR2pCWixRQUFRLEtBQU15RixHQUNkekYsUUFBUSxVQUFXLHlCQUNuQkEsUUFBUSxhQUFjLFdBQ3RCQSxRQUFRLE9BQVEsY0FDaEJBLFFBQVEsU0FBVSxrREFDbEJBLFFBQVEsT0FBUSwwQkFDaEJBLFFBQVEsT0FBUSwrREFDaEJBLFFBQVEsTUFBT3dMLEdBQ2ZySyxXQUNDeUssRUFBVyxJQUNWRixFQUNIdkQsTUFBT3dELEVBQ1A5QyxVQUFXakksRUFBSzBLLEdBQ1h0TCxRQUFRLEtBQU15RixHQUNkekYsUUFBUSxVQUFXLHlCQUNuQkEsUUFBUSxZQUFhLElBQ3JCQSxRQUFRLFFBQVMyTCxHQUNqQjNMLFFBQVEsYUFBYyxXQUN0QkEsUUFBUSxTQUFVLGtEQUNsQkEsUUFBUSxPQUFRLDBCQUNoQkEsUUFBUSxPQUFRLCtEQUNoQkEsUUFBUSxNQUFPd0wsR0FDZnJLLFlBS0gwSyxFQUFnQixJQUNmSCxFQUNIN0wsS0FBTWUsRUFBSyw4SUFHTlosUUFBUSxVQUFXeUwsR0FDbkJ6TCxRQUFRLE9BQVEscUtBSWhCbUIsV0FDTDhHLElBQUssb0VBQ0wzQyxRQUFTLHlCQUNUWixPQUFRbEQsRUFDUm9ILFNBQVUsbUNBQ1ZDLFVBQVdqSSxFQUFLMEssR0FDWHRMLFFBQVEsS0FBTXlGLEdBQ2R6RixRQUFRLFVBQVcsbUJBQ25CQSxRQUFRLFdBQVk0SSxHQUNwQjVJLFFBQVEsU0FBVSxJQUNsQkEsUUFBUSxhQUFjLFdBQ3RCQSxRQUFRLFVBQVcsSUFDbkJBLFFBQVEsUUFBUyxJQUNqQkEsUUFBUSxRQUFTLElBQ2pCQSxRQUFRLE9BQVEsSUFDaEJtQixZQUtIMkgsRUFBUyw4Q0FFVGdDLEVBQUssd0JBR0xnQixFQUFlLGVBQ2YvQixFQUFjbkosRUFBSyw2QkFBOEIsS0FDbERaLFFBQVEsZUFBZ0I4TCxHQUFjM0ssV0FHckMySSxFQUFpQmxKLEVBQUssb0VBQXFFLEtBQzVGWixRQUFRLFNBQVU4TCxHQUNsQjNLLFdBQ0NtSixFQUFvQjFKLEVBQUssd1FBT1ksTUFDdENaLFFBQVEsU0FBVThMLEdBQ2xCM0ssV0FFQ29KLEVBQW9CM0osRUFBSyx1TkFNWSxNQUN0Q1osUUFBUSxTQUFVOEwsR0FDbEIzSyxXQUNDa0UsRUFBaUJ6RSxFQUFLLGNBQWUsTUFDdENaLFFBQVEsU0FBVThMLEdBQ2xCM0ssV0FDQzZKLEVBQVdwSyxFQUFLLHVDQUNqQlosUUFBUSxTQUFVLGdDQUNsQkEsUUFBUSxRQUFTLGdKQUNqQm1CLFdBQ0M0SyxFQUFpQm5MLEVBQUs2SyxHQUFVekwsUUFBUSxlQUFhLFVBQU9tQixXQUM1RCtHLEVBQU10SCxFQUFLLDRKQU1aWixRQUFRLFVBQVcrTCxHQUNuQi9MLFFBQVEsWUFBYSwrRUFDckJtQixXQUNDNkssRUFBZSxzREFDZjVJLEVBQU94QyxFQUFLLGlEQUNiWixRQUFRLFFBQVNnTSxHQUNqQmhNLFFBQVEsT0FBUSx3Q0FDaEJBLFFBQVEsUUFBUywrREFDakJtQixXQUNDcUksRUFBVTVJLEVBQUssMkJBQ2hCWixRQUFRLFFBQVNnTSxHQUNqQmhNLFFBQVEsTUFBT3VMLEdBQ2ZwSyxXQUNDdUksRUFBUzlJLEVBQUsseUJBQ2ZaLFFBQVEsTUFBT3VMLEdBQ2ZwSyxXQVFDOEssRUFBZSxDQUNqQmQsV0FBWTNKLEVBQ1o2RCxpQkFDQTJGLFdBQ0FrQixVQWpFYyxnREFrRWRwQixLQUNBdEcsS0EzRWUsc0NBNEVmdUcsSUFBS3ZKLEVBQ0xzSSxpQkFDQVEsb0JBQ0FDLG9CQUNBekIsU0FDQTFGLE9BQ0FzRyxTQUNBSyxjQUNBUCxVQUNBMkMsY0F2QmtCdkwsRUFBSyx3QkFBeUIsS0FDL0NaLFFBQVEsVUFBV3dKLEdBQ25CeEosUUFBUSxTQUFVMEosR0FDbEJ2SSxXQXFCRCtHLE1BQ0ExRSxLQXJGZSw4RUFzRmZ5SCxJQUFLekosR0FLSDRLLEVBQWlCLElBQ2hCSCxFQUNIN0ksS0FBTXhDLEVBQUssMkJBQ05aLFFBQVEsUUFBU2dNLEdBQ2pCN0ssV0FDTHFJLFFBQVM1SSxFQUFLLGlDQUNUWixRQUFRLFFBQVNnTSxHQUNqQjdLLFlBS0hrTCxHQUFZLElBQ1hKLEVBQ0huRCxPQUFRbEksRUFBS2tJLEdBQVE5SSxRQUFRLEtBQU0sUUFBUW1CLFdBQzNDOEosSUFBS3JLLEVBQUssbUVBQW9FLEtBQ3pFWixRQUFRLFFBQVMsNkVBQ2pCbUIsV0FDTGdLLFdBQVksNkVBQ1pKLElBQUssK0NBQ0x2SCxLQUFNLDhOQUtKOEksR0FBZSxJQUNkRCxHQUNIdkIsR0FBSWxLLEVBQUtrSyxHQUFJOUssUUFBUSxPQUFRLEtBQUttQixXQUNsQ3FDLEtBQU01QyxFQUFLeUwsR0FBVTdJLE1BQ2hCeEQsUUFBUSxPQUFRLGlCQUNoQkEsUUFBUSxVQUFXLEtBQ25CbUIsWUFLSG1ELEdBQVEsQ0FDVmlJLE9BQVFiLEVBQ1JoTixJQUFLa04sRUFDTGhOLFNBQVVpTixHQUVSekcsR0FBUyxDQUNYbUgsT0FBUU4sRUFDUnZOLElBQUsyTixHQUNMN04sT0FBUThOLEdBQ1IxTixTQUFVd04sR0FNZCxNQUFNSSxHQUNGM0ksT0FDQUcsUUFDQVAsTUFDQTFFLFVBQ0EwTixZQUNBLFdBQUF2SSxDQUFZRixHQUVSRyxLQUFLTixPQUFTLEdBQ2RNLEtBQUtOLE9BQU80RixNQUFRaUQsT0FBT0MsT0FBTyxNQUNsQ3hJLEtBQUtILFFBQVVBLEdBQVcxRixFQUMxQjZGLEtBQUtILFFBQVFqRixVQUFZb0YsS0FBS0gsUUFBUWpGLFdBQWEsSUFBSWdGLEVBQ3ZESSxLQUFLcEYsVUFBWW9GLEtBQUtILFFBQVFqRixVQUM5Qm9GLEtBQUtwRixVQUFVaUYsUUFBVUcsS0FBS0gsUUFDOUJHLEtBQUtwRixVQUFVdUUsTUFBUWEsS0FDdkJBLEtBQUtzSSxZQUFjLEdBQ25CdEksS0FBS1YsTUFBUSxDQUNUQyxRQUFRLEVBQ1JxRixZQUFZLEVBQ1pwRCxLQUFLLEdBRVQsTUFBTTFCLEVBQVEsQ0FDVkssTUFBT0EsR0FBTWlJLE9BQ2JuSCxPQUFRQSxHQUFPbUgsUUFFZnBJLEtBQUtILFFBQVFwRixVQUNicUYsRUFBTUssTUFBUUEsR0FBTTFGLFNBQ3BCcUYsRUFBTW1CLE9BQVNBLEdBQU94RyxVQUVqQnVGLEtBQUtILFFBQVF0RixNQUNsQnVGLEVBQU1LLE1BQVFBLEdBQU01RixJQUNoQnlGLEtBQUtILFFBQVF4RixPQUNieUYsRUFBTW1CLE9BQVNBLEdBQU81RyxPQUd0QnlGLEVBQU1tQixPQUFTQSxHQUFPMUcsS0FHOUJ5RixLQUFLcEYsVUFBVWtGLE1BQVFBLENBQzNCLENBSUEsZ0JBQVdBLEdBQ1AsTUFBTyxDQUNISyxTQUNBYyxVQUVSLENBSUEsVUFBT3dILENBQUl2SSxFQUFLTCxHQUVaLE9BRGMsSUFBSXdJLEdBQU94SSxHQUNaNEksSUFBSXZJLEVBQ3JCLENBSUEsZ0JBQU93SSxDQUFVeEksRUFBS0wsR0FFbEIsT0FEYyxJQUFJd0ksR0FBT3hJLEdBQ1pGLGFBQWFPLEVBQzlCLENBSUEsR0FBQXVJLENBQUl2SSxHQUNBQSxFQUFNQSxFQUNEckUsUUFBUSxXQUFZLE1BQ3pCbUUsS0FBS3lCLFlBQVl2QixFQUFLRixLQUFLTixRQUMzQixJQUFLLElBQUl6QixFQUFJLEVBQUdBLEVBQUkrQixLQUFLc0ksWUFBWWxLLE9BQVFILElBQUssQ0FDOUMsTUFBTTBLLEVBQU8zSSxLQUFLc0ksWUFBWXJLLEdBQzlCK0IsS0FBS0wsYUFBYWdKLEVBQUt6SSxJQUFLeUksRUFBS2pKLE9BQ3JDLENBRUEsT0FEQU0sS0FBS3NJLFlBQWMsR0FDWnRJLEtBQUtOLE1BQ2hCLENBQ0EsV0FBQStCLENBQVl2QixFQUFLUixFQUFTLElBU3RCLElBQUlGLEVBQ0FvSixFQUNBQyxFQUNBQyxFQUNKLElBWEk1SSxFQURBRixLQUFLSCxRQUFRcEYsU0FDUHlGLEVBQUlyRSxRQUFRLE1BQU8sUUFBUUEsUUFBUSxTQUFVLElBRzdDcUUsRUFBSXJFLFFBQVEsZ0JBQWdCLENBQUNHLEVBQUcrTSxFQUFTQyxJQUNwQ0QsRUFBVSxPQUFPeEcsT0FBT3lHLEVBQUs1SyxVQU9yQzhCLEdBQ0gsS0FBSUYsS0FBS0gsUUFBUXZGLFlBQ1YwRixLQUFLSCxRQUFRdkYsV0FBVzZGLE9BQ3hCSCxLQUFLSCxRQUFRdkYsV0FBVzZGLE1BQU15RCxNQUFNcUYsTUFDL0J6SixFQUFReUosRUFBYUMsS0FBSyxDQUFFL0osTUFBT2EsTUFBUUUsRUFBS1IsTUFDaERRLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLElBQ0wsTUFPbkIsR0FBSUEsRUFBUVEsS0FBS3BGLFVBQVVxRixNQUFNQyxHQUM3QkEsRUFBTUEsRUFBSTNELFVBQVVpRCxFQUFNTixJQUFJZCxRQUNMLElBQXJCb0IsRUFBTU4sSUFBSWQsUUFBZ0JzQixFQUFPdEIsT0FBUyxFQUcxQ3NCLEVBQU9BLEVBQU90QixPQUFTLEdBQUdjLEtBQU8sS0FHakNRLEVBQU9uQixLQUFLaUIsUUFLcEIsR0FBSUEsRUFBUVEsS0FBS3BGLFVBQVV5RixLQUFLSCxHQUM1QkEsRUFBTUEsRUFBSTNELFVBQVVpRCxFQUFNTixJQUFJZCxRQUM5QndLLEVBQVlsSixFQUFPQSxFQUFPdEIsT0FBUyxJQUUvQndLLEdBQWlDLGNBQW5CQSxFQUFVbkosTUFBMkMsU0FBbkJtSixFQUFVbkosS0FNMURDLEVBQU9uQixLQUFLaUIsSUFMWm9KLEVBQVUxSixLQUFPLEtBQU9NLEVBQU1OLElBQzlCMEosRUFBVXZKLE1BQVEsS0FBT0csRUFBTUgsS0FDL0JXLEtBQUtzSSxZQUFZdEksS0FBS3NJLFlBQVlsSyxPQUFTLEdBQUc4QixJQUFNMEksRUFBVXZKLFdBUXRFLEdBQUlHLEVBQVFRLEtBQUtwRixVQUFVMkYsT0FBT0wsR0FDOUJBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVdUcsUUFBUWpCLEdBQy9CQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFJQSxFQUFRUSxLQUFLcEYsVUFBVTBHLEdBQUdwQixHQUMxQkEsRUFBTUEsRUFBSTNELFVBQVVpRCxFQUFNTixJQUFJZCxRQUM5QnNCLEVBQU9uQixLQUFLaUIsUUFJaEIsR0FBSUEsRUFBUVEsS0FBS3BGLFVBQVUyRyxXQUFXckIsR0FDbENBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVOEcsS0FBS3hCLEdBQzVCQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFJQSxFQUFRUSxLQUFLcEYsVUFBVWMsS0FBS3dFLEdBQzVCQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFJQSxFQUFRUSxLQUFLcEYsVUFBVWtKLElBQUk1RCxHQUMzQkEsRUFBTUEsRUFBSTNELFVBQVVpRCxFQUFNTixJQUFJZCxRQUM5QndLLEVBQVlsSixFQUFPQSxFQUFPdEIsT0FBUyxJQUMvQndLLEdBQWlDLGNBQW5CQSxFQUFVbkosTUFBMkMsU0FBbkJtSixFQUFVbkosS0FLcERPLEtBQUtOLE9BQU80RixNQUFNOUYsRUFBTXVFLE9BQzlCL0QsS0FBS04sT0FBTzRGLE1BQU05RixFQUFNdUUsS0FBTyxDQUMzQjdHLEtBQU1zQyxFQUFNdEMsS0FDWmtDLE1BQU9JLEVBQU1KLFNBUGpCd0osRUFBVTFKLEtBQU8sS0FBT00sRUFBTU4sSUFDOUIwSixFQUFVdkosTUFBUSxLQUFPRyxFQUFNTixJQUMvQmMsS0FBS3NJLFlBQVl0SSxLQUFLc0ksWUFBWWxLLE9BQVMsR0FBRzhCLElBQU0wSSxFQUFVdkosV0FXdEUsR0FBSUcsRUFBUVEsS0FBS3BGLFVBQVVvSixNQUFNOUQsR0FDN0JBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVNkosU0FBU3ZFLEdBQ2hDQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixPQUZoQixDQVFBLEdBREFxSixFQUFTM0ksRUFDTEYsS0FBS0gsUUFBUXZGLFlBQWMwRixLQUFLSCxRQUFRdkYsV0FBVzZPLFdBQVksQ0FDL0QsSUFBSUMsRUFBYUMsSUFDakIsTUFBTUMsRUFBVXBKLEVBQUlwQixNQUFNLEdBQzFCLElBQUl5SyxFQUNKdkosS0FBS0gsUUFBUXZGLFdBQVc2TyxXQUFXSyxTQUFTQyxJQUN4Q0YsRUFBWUUsRUFBY1AsS0FBSyxDQUFFL0osTUFBT2EsTUFBUXNKLEdBQ3ZCLGlCQUFkQyxHQUEwQkEsR0FBYSxJQUM5Q0gsRUFBYXRHLEtBQUtDLElBQUlxRyxFQUFZRyxHQUN0QyxJQUVBSCxFQUFhQyxLQUFZRCxHQUFjLElBQ3ZDUCxFQUFTM0ksRUFBSTNELFVBQVUsRUFBRzZNLEVBQWEsR0FFL0MsQ0FDQSxHQUFJcEosS0FBS1YsTUFBTWtDLE1BQVFoQyxFQUFRUSxLQUFLcEYsVUFBVThKLFVBQVVtRSxJQUNwREQsRUFBWWxKLEVBQU9BLEVBQU90QixPQUFTLEdBQy9CMEssR0FBMkMsY0FBbkJGLEVBQVVuSixNQUNsQ21KLEVBQVUxSixLQUFPLEtBQU9NLEVBQU1OLElBQzlCMEosRUFBVXZKLE1BQVEsS0FBT0csRUFBTUgsS0FDL0JXLEtBQUtzSSxZQUFZakssTUFDakIyQixLQUFLc0ksWUFBWXRJLEtBQUtzSSxZQUFZbEssT0FBUyxHQUFHOEIsSUFBTTBJLEVBQVV2SixNQUc5REssRUFBT25CLEtBQUtpQixHQUVoQnNKLEVBQXdCRCxFQUFPekssU0FBVzhCLEVBQUk5QixPQUM5QzhCLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsYUFJbEMsR0FBSW9CLEVBQVFRLEtBQUtwRixVQUFVeUUsS0FBS2EsR0FDNUJBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJ3SyxFQUFZbEosRUFBT0EsRUFBT3RCLE9BQVMsR0FDL0J3SyxHQUFnQyxTQUFuQkEsRUFBVW5KLE1BQ3ZCbUosRUFBVTFKLEtBQU8sS0FBT00sRUFBTU4sSUFDOUIwSixFQUFVdkosTUFBUSxLQUFPRyxFQUFNSCxLQUMvQlcsS0FBS3NJLFlBQVlqSyxNQUNqQjJCLEtBQUtzSSxZQUFZdEksS0FBS3NJLFlBQVlsSyxPQUFTLEdBQUc4QixJQUFNMEksRUFBVXZKLE1BRzlESyxFQUFPbkIsS0FBS2lCLFFBSXBCLEdBQUlVLEVBQUssQ0FDTCxNQUFNd0osRUFBUywwQkFBNEJ4SixFQUFJeUosV0FBVyxHQUMxRCxHQUFJM0osS0FBS0gsUUFBUWxGLE9BQVEsQ0FDckJpUCxRQUFRQyxNQUFNSCxHQUNkLEtBQ0osQ0FFSSxNQUFNLElBQUlJLE1BQU1KLEVBRXhCLENBekRBLENBNERKLE9BREExSixLQUFLVixNQUFNa0MsS0FBTSxFQUNWOUIsQ0FDWCxDQUNBLE1BQUF1QixDQUFPZixFQUFLUixFQUFTLElBRWpCLE9BREFNLEtBQUtzSSxZQUFZL0osS0FBSyxDQUFFMkIsTUFBS1IsV0FDdEJBLENBQ1gsQ0FJQSxZQUFBQyxDQUFhTyxFQUFLUixFQUFTLElBQ3ZCLElBQUlGLEVBQU9vSixFQUFXQyxFQUdsQmxMLEVBQ0FvTSxFQUFjckUsRUFGZEQsRUFBWXZGLEVBSWhCLEdBQUlGLEtBQUtOLE9BQU80RixNQUFPLENBQ25CLE1BQU1BLEVBQVFpRCxPQUFPeUIsS0FBS2hLLEtBQUtOLE9BQU80RixPQUN0QyxHQUFJQSxFQUFNbEgsT0FBUyxFQUNmLEtBQThFLE9BQXRFVCxFQUFRcUMsS0FBS3BGLFVBQVVrRixNQUFNbUIsT0FBTytHLGNBQWMxSyxLQUFLbUksS0FDdkRILEVBQU0yRSxTQUFTdE0sRUFBTSxHQUFHbUIsTUFBTW5CLEVBQU0sR0FBR3VNLFlBQVksS0FBTyxHQUFJLE1BQzlEekUsRUFBWUEsRUFBVTNHLE1BQU0sRUFBR25CLEVBQU00SSxPQUFTLElBQU0sSUFBSWhFLE9BQU81RSxFQUFNLEdBQUdTLE9BQVMsR0FBSyxJQUFNcUgsRUFBVTNHLE1BQU1rQixLQUFLcEYsVUFBVWtGLE1BQU1tQixPQUFPK0csY0FBYzNCLFdBSXRLLENBRUEsS0FBMEUsT0FBbEUxSSxFQUFRcUMsS0FBS3BGLFVBQVVrRixNQUFNbUIsT0FBTzhHLFVBQVV6SyxLQUFLbUksS0FDdkRBLEVBQVlBLEVBQVUzRyxNQUFNLEVBQUduQixFQUFNNEksT0FBUyxJQUFNLElBQUloRSxPQUFPNUUsRUFBTSxHQUFHUyxPQUFTLEdBQUssSUFBTXFILEVBQVUzRyxNQUFNa0IsS0FBS3BGLFVBQVVrRixNQUFNbUIsT0FBTzhHLFVBQVUxQixXQUd0SixLQUErRSxPQUF2RTFJLEVBQVFxQyxLQUFLcEYsVUFBVWtGLE1BQU1tQixPQUFPQyxlQUFlNUQsS0FBS21JLEtBQzVEQSxFQUFZQSxFQUFVM0csTUFBTSxFQUFHbkIsRUFBTTRJLE9BQVMsS0FBT2QsRUFBVTNHLE1BQU1rQixLQUFLcEYsVUFBVWtGLE1BQU1tQixPQUFPQyxlQUFlbUYsV0FFcEgsS0FBT25HLEdBTUgsR0FMSzZKLElBQ0RyRSxFQUFXLElBRWZxRSxHQUFlLElBRVgvSixLQUFLSCxRQUFRdkYsWUFDVjBGLEtBQUtILFFBQVF2RixXQUFXMkcsUUFDeEJqQixLQUFLSCxRQUFRdkYsV0FBVzJHLE9BQU8yQyxNQUFNcUYsTUFDaEN6SixFQUFReUosRUFBYUMsS0FBSyxDQUFFL0osTUFBT2EsTUFBUUUsRUFBS1IsTUFDaERRLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLElBQ0wsTUFPbkIsR0FBSUEsRUFBUVEsS0FBS3BGLFVBQVUrSixPQUFPekUsR0FDOUJBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVbUosSUFBSTdELEdBQzNCQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCd0ssRUFBWWxKLEVBQU9BLEVBQU90QixPQUFTLEdBQy9Cd0ssR0FBNEIsU0FBZnBKLEVBQU1DLE1BQXNDLFNBQW5CbUosRUFBVW5KLE1BQ2hEbUosRUFBVTFKLEtBQU9NLEVBQU1OLElBQ3ZCMEosRUFBVXZKLE1BQVFHLEVBQU1ILE1BR3hCSyxFQUFPbkIsS0FBS2lCLFFBS3BCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVcUUsS0FBS2lCLEdBQzVCQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFJQSxFQUFRUSxLQUFLcEYsVUFBVXlLLFFBQVFuRixFQUFLRixLQUFLTixPQUFPNEYsT0FDaERwRixFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCd0ssRUFBWWxKLEVBQU9BLEVBQU90QixPQUFTLEdBQy9Cd0ssR0FBNEIsU0FBZnBKLEVBQU1DLE1BQXNDLFNBQW5CbUosRUFBVW5KLE1BQ2hEbUosRUFBVTFKLEtBQU9NLEVBQU1OLElBQ3ZCMEosRUFBVXZKLE1BQVFHLEVBQU1ILE1BR3hCSyxFQUFPbkIsS0FBS2lCLFFBS3BCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVNEssU0FBU3RGLEVBQUt1RixFQUFXQyxHQUNoRHhGLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVNEwsU0FBU3RHLEdBQ2hDQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFJQSxFQUFRUSxLQUFLcEYsVUFBVStMLEdBQUd6RyxHQUMxQkEsRUFBTUEsRUFBSTNELFVBQVVpRCxFQUFNTixJQUFJZCxRQUM5QnNCLEVBQU9uQixLQUFLaUIsUUFJaEIsR0FBSUEsRUFBUVEsS0FBS3BGLFVBQVVnTSxJQUFJMUcsR0FDM0JBLEVBQU1BLEVBQUkzRCxVQUFVaUQsRUFBTU4sSUFBSWQsUUFDOUJzQixFQUFPbkIsS0FBS2lCLFFBSWhCLEdBQUlBLEVBQVFRLEtBQUtwRixVQUFVaU0sU0FBUzNHLEdBQ2hDQSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixRQUloQixHQUFLUSxLQUFLVixNQUFNQyxVQUFXQyxFQUFRUSxLQUFLcEYsVUFBVWtNLElBQUk1RyxJQUF0RCxDQVFBLEdBREEySSxFQUFTM0ksRUFDTEYsS0FBS0gsUUFBUXZGLFlBQWMwRixLQUFLSCxRQUFRdkYsV0FBVzZQLFlBQWEsQ0FDaEUsSUFBSWYsRUFBYUMsSUFDakIsTUFBTUMsRUFBVXBKLEVBQUlwQixNQUFNLEdBQzFCLElBQUl5SyxFQUNKdkosS0FBS0gsUUFBUXZGLFdBQVc2UCxZQUFZWCxTQUFTQyxJQUN6Q0YsRUFBWUUsRUFBY1AsS0FBSyxDQUFFL0osTUFBT2EsTUFBUXNKLEdBQ3ZCLGlCQUFkQyxHQUEwQkEsR0FBYSxJQUM5Q0gsRUFBYXRHLEtBQUtDLElBQUlxRyxFQUFZRyxHQUN0QyxJQUVBSCxFQUFhQyxLQUFZRCxHQUFjLElBQ3ZDUCxFQUFTM0ksRUFBSTNELFVBQVUsRUFBRzZNLEVBQWEsR0FFL0MsQ0FDQSxHQUFJNUosRUFBUVEsS0FBS3BGLFVBQVVxTSxXQUFXNEIsR0FDbEMzSSxFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQ0YsTUFBeEJvQixFQUFNTixJQUFJSixPQUFPLEtBQ2pCNEcsRUFBV2xHLEVBQU1OLElBQUlKLE9BQU8sSUFFaENpTCxHQUFlLEVBQ2ZuQixFQUFZbEosRUFBT0EsRUFBT3RCLE9BQVMsR0FDL0J3SyxHQUFnQyxTQUFuQkEsRUFBVW5KLE1BQ3ZCbUosRUFBVTFKLEtBQU9NLEVBQU1OLElBQ3ZCMEosRUFBVXZKLE1BQVFHLEVBQU1ILE1BR3hCSyxFQUFPbkIsS0FBS2lCLFFBSXBCLEdBQUlVLEVBQUssQ0FDTCxNQUFNd0osRUFBUywwQkFBNEJ4SixFQUFJeUosV0FBVyxHQUMxRCxHQUFJM0osS0FBS0gsUUFBUWxGLE9BQVEsQ0FDckJpUCxRQUFRQyxNQUFNSCxHQUNkLEtBQ0osQ0FFSSxNQUFNLElBQUlJLE1BQU1KLEVBRXhCLENBM0NBLE1BSEl4SixFQUFNQSxFQUFJM0QsVUFBVWlELEVBQU1OLElBQUlkLFFBQzlCc0IsRUFBT25CLEtBQUtpQixHQStDcEIsT0FBT0UsQ0FDWCxFQU1KLE1BQU0wSyxHQUNGdkssUUFDQSxXQUFBRSxDQUFZRixHQUNSRyxLQUFLSCxRQUFVQSxHQUFXMUYsQ0FDOUIsQ0FDQSxJQUFBa0csQ0FBS0EsRUFBTWdLLEVBQVl2TSxHQUNuQixNQUFNa0QsR0FBUXFKLEdBQWMsSUFBSTFNLE1BQU0sVUFBVSxHQUVoRCxPQURBMEMsRUFBT0EsRUFBS3hFLFFBQVEsTUFBTyxJQUFNLEtBQzVCbUYsRUFLRSw4QkFDRHZGLEVBQVN1RixHQUNULE1BQ0NsRCxFQUFVdUMsRUFBTzVFLEVBQVM0RSxHQUFNLElBQ2pDLGtCQVJLLGVBQ0F2QyxFQUFVdUMsRUFBTzVFLEVBQVM0RSxHQUFNLElBQ2pDLGlCQU9kLENBQ0EsVUFBQWtCLENBQVcrSSxHQUNQLE1BQU8saUJBQWlCQSxrQkFDNUIsQ0FDQSxJQUFBNU8sQ0FBS0EsRUFBTXlFLEdBQ1AsT0FBT3pFLENBQ1gsQ0FDQSxPQUFBeUYsQ0FBUTlCLEVBQU02RixFQUFPaEcsR0FFakIsTUFBTyxLQUFLZ0csS0FBUzdGLE9BQVU2RixNQUNuQyxDQUNBLEVBQUE1RCxHQUNJLE1BQU8sUUFDWCxDQUNBLElBQUFJLENBQUs2SSxFQUFNMUksRUFBU0MsR0FDaEIsTUFBTXJDLEVBQU9vQyxFQUFVLEtBQU8sS0FFOUIsTUFBTyxJQUFNcEMsR0FES29DLEdBQXFCLElBQVZDLEVBQWdCLFdBQWFBLEVBQVEsSUFBTyxJQUMxQyxNQUFReUksRUFBTyxLQUFPOUssRUFBTyxLQUNoRSxDQUNBLFFBQUErSyxDQUFTbkwsRUFBTWlFLEVBQU1DLEdBQ2pCLE1BQU8sT0FBT2xFLFVBQ2xCLENBQ0EsUUFBQW9MLENBQVNsSCxHQUNMLE1BQU8sV0FDQUEsRUFBVSxjQUFnQixJQUMzQiw4QkFDVixDQUNBLFNBQUFtQixDQUFVckYsR0FDTixNQUFPLE1BQU1BLFNBQ2pCLENBQ0EsS0FBQTJFLENBQU1LLEVBQVFrRyxHQUdWLE9BRklBLElBQ0FBLEVBQU8sVUFBVUEsYUFDZCxxQkFFRGxHLEVBQ0EsYUFDQWtHLEVBQ0EsWUFDVixDQUNBLFFBQUFHLENBQVNDLEdBQ0wsTUFBTyxTQUFTQSxVQUNwQixDQUNBLFNBQUFDLENBQVVELEVBQVNFLEdBQ2YsTUFBTXBMLEVBQU9vTCxFQUFNeEcsT0FBUyxLQUFPLEtBSW5DLE9BSFl3RyxFQUFNdkcsTUFDWixJQUFJN0UsWUFBZW9MLEVBQU12RyxVQUN6QixJQUFJN0UsTUFDR2tMLEVBQVUsS0FBS2xMLE1BQ2hDLENBSUEsTUFBQXFMLENBQU96TCxHQUNILE1BQU8sV0FBV0EsWUFDdEIsQ0FDQSxFQUFBMEwsQ0FBRzFMLEdBQ0MsTUFBTyxPQUFPQSxRQUNsQixDQUNBLFFBQUFtSCxDQUFTbkgsR0FDTCxNQUFPLFNBQVNBLFVBQ3BCLENBQ0EsRUFBQXNILEdBQ0ksTUFBTyxNQUNYLENBQ0EsR0FBQUMsQ0FBSXZILEdBQ0EsTUFBTyxRQUFRQSxTQUNuQixDQUNBLElBQUFKLENBQUsvQixFQUFNa0MsRUFBT0MsR0FDZCxNQUFNMkwsRUFBWS9OLEVBQVNDLEdBQzNCLEdBQWtCLE9BQWQ4TixFQUNBLE9BQU8zTCxFQUdYLElBQUk0TCxFQUFNLGFBRFYvTixFQUFPOE4sR0FDd0IsSUFLL0IsT0FKSTVMLElBQ0E2TCxHQUFPLFdBQWE3TCxFQUFRLEtBRWhDNkwsR0FBTyxJQUFNNUwsRUFBTyxPQUNiNEwsQ0FDWCxDQUNBLEtBQUFDLENBQU1oTyxFQUFNa0MsRUFBT0MsR0FDZixNQUFNMkwsRUFBWS9OLEVBQVNDLEdBQzNCLEdBQWtCLE9BQWQ4TixFQUNBLE9BQU8zTCxFQUdYLElBQUk0TCxFQUFNLGFBRFYvTixFQUFPOE4sV0FDOEIzTCxLQUtyQyxPQUpJRCxJQUNBNkwsR0FBTyxXQUFXN0wsTUFFdEI2TCxHQUFPLElBQ0FBLENBQ1gsQ0FDQSxJQUFBNUwsQ0FBS0EsR0FDRCxPQUFPQSxDQUNYLEVBT0osTUFBTThMLEdBRUYsTUFBQUwsQ0FBT3pMLEdBQ0gsT0FBT0EsQ0FDWCxDQUNBLEVBQUEwTCxDQUFHMUwsR0FDQyxPQUFPQSxDQUNYLENBQ0EsUUFBQW1ILENBQVNuSCxHQUNMLE9BQU9BLENBQ1gsQ0FDQSxHQUFBdUgsQ0FBSXZILEdBQ0EsT0FBT0EsQ0FDWCxDQUNBLElBQUEzRCxDQUFLMkQsR0FDRCxPQUFPQSxDQUNYLENBQ0EsSUFBQUEsQ0FBS0EsR0FDRCxPQUFPQSxDQUNYLENBQ0EsSUFBQUosQ0FBSy9CLEVBQU1rQyxFQUFPQyxHQUNkLE1BQU8sR0FBS0EsQ0FDaEIsQ0FDQSxLQUFBNkwsQ0FBTWhPLEVBQU1rQyxFQUFPQyxHQUNmLE1BQU8sR0FBS0EsQ0FDaEIsQ0FDQSxFQUFBc0gsR0FDSSxNQUFPLEVBQ1gsRUFNSixNQUFNeUUsR0FDRnZMLFFBQ0FuRixTQUNBMlEsYUFDQSxXQUFBdEwsQ0FBWUYsR0FDUkcsS0FBS0gsUUFBVUEsR0FBVzFGLEVBQzFCNkYsS0FBS0gsUUFBUW5GLFNBQVdzRixLQUFLSCxRQUFRbkYsVUFBWSxJQUFJMFAsR0FDckRwSyxLQUFLdEYsU0FBV3NGLEtBQUtILFFBQVFuRixTQUM3QnNGLEtBQUt0RixTQUFTbUYsUUFBVUcsS0FBS0gsUUFDN0JHLEtBQUtxTCxhQUFlLElBQUlGLEVBQzVCLENBSUEsWUFBT0csQ0FBTTVMLEVBQVFHLEdBRWpCLE9BRGUsSUFBSXVMLEdBQVF2TCxHQUNieUwsTUFBTTVMLEVBQ3hCLENBSUEsa0JBQU82TCxDQUFZN0wsRUFBUUcsR0FFdkIsT0FEZSxJQUFJdUwsR0FBUXZMLEdBQ2IwTCxZQUFZN0wsRUFDOUIsQ0FJQSxLQUFBNEwsQ0FBTTVMLEVBQVE4QixHQUFNLEdBQ2hCLElBQUl5SixFQUFNLEdBQ1YsSUFBSyxJQUFJaE4sRUFBSSxFQUFHQSxFQUFJeUIsRUFBT3RCLE9BQVFILElBQUssQ0FDcEMsTUFBTXVCLEVBQVFFLEVBQU96QixHQUVyQixHQUFJK0IsS0FBS0gsUUFBUXZGLFlBQWMwRixLQUFLSCxRQUFRdkYsV0FBV2tSLFdBQWF4TCxLQUFLSCxRQUFRdkYsV0FBV2tSLFVBQVVoTSxFQUFNQyxNQUFPLENBQy9HLE1BQU1nTSxFQUFlak0sRUFDZmtNLEVBQU0xTCxLQUFLSCxRQUFRdkYsV0FBV2tSLFVBQVVDLEVBQWFoTSxNQUFNeUosS0FBSyxDQUFFeUMsT0FBUTNMLE1BQVF5TCxHQUN4RixJQUFZLElBQVJDLElBQWtCLENBQUMsUUFBUyxLQUFNLFVBQVcsT0FBUSxRQUFTLGFBQWMsT0FBUSxPQUFRLFlBQWEsUUFBUXpCLFNBQVN3QixFQUFhaE0sTUFBTyxDQUM5SXdMLEdBQU9TLEdBQU8sR0FDZCxRQUNKLENBQ0osQ0FDQSxPQUFRbE0sRUFBTUMsTUFDVixJQUFLLFFBQ0QsU0FFSixJQUFLLEtBQ0R3TCxHQUFPakwsS0FBS3RGLFNBQVM0RyxLQUNyQixTQUVKLElBQUssVUFBVyxDQUNaLE1BQU1zSyxFQUFlcE0sRUFDckJ5TCxHQUFPakwsS0FBS3RGLFNBQVN5RyxRQUFRbkIsS0FBS3VMLFlBQVlLLEVBQWFsTSxRQUFTa00sRUFBYXZLLE1BQU90RixFQUFTaUUsS0FBS3VMLFlBQVlLLEVBQWFsTSxPQUFRTSxLQUFLcUwsZ0JBQzVJLFFBQ0osQ0FDQSxJQUFLLE9BQVEsQ0FDVCxNQUFNUSxFQUFZck0sRUFDbEJ5TCxHQUFPakwsS0FBS3RGLFNBQVMyRixLQUFLd0wsRUFBVXhNLEtBQU13TSxFQUFVN0ssT0FBUTZLLEVBQVUvTixTQUN0RSxRQUNKLENBQ0EsSUFBSyxRQUFTLENBQ1YsTUFBTWdPLEVBQWF0TSxFQUNuQixJQUFJNkUsRUFBUyxHQUVURyxFQUFPLEdBQ1gsSUFBSyxJQUFJdUgsRUFBSSxFQUFHQSxFQUFJRCxFQUFXekgsT0FBT2pHLE9BQVEyTixJQUMxQ3ZILEdBQVF4RSxLQUFLdEYsU0FBU2tRLFVBQVU1SyxLQUFLdUwsWUFBWU8sRUFBV3pILE9BQU8wSCxHQUFHck0sUUFBUyxDQUFFMkUsUUFBUSxFQUFNQyxNQUFPd0gsRUFBV3hILE1BQU15SCxLQUUzSDFILEdBQVVyRSxLQUFLdEYsU0FBU2dRLFNBQVNsRyxHQUNqQyxJQUFJK0YsRUFBTyxHQUNYLElBQUssSUFBSXdCLEVBQUksRUFBR0EsRUFBSUQsRUFBVzNILEtBQUsvRixPQUFRMk4sSUFBSyxDQUM3QyxNQUFNeEgsRUFBTXVILEVBQVczSCxLQUFLNEgsR0FDNUJ2SCxFQUFPLEdBQ1AsSUFBSyxJQUFJd0gsRUFBSSxFQUFHQSxFQUFJekgsRUFBSW5HLE9BQVE0TixJQUM1QnhILEdBQVF4RSxLQUFLdEYsU0FBU2tRLFVBQVU1SyxLQUFLdUwsWUFBWWhILEVBQUl5SCxHQUFHdE0sUUFBUyxDQUFFMkUsUUFBUSxFQUFPQyxNQUFPd0gsRUFBV3hILE1BQU0wSCxLQUU5R3pCLEdBQVF2SyxLQUFLdEYsU0FBU2dRLFNBQVNsRyxFQUNuQyxDQUNBeUcsR0FBT2pMLEtBQUt0RixTQUFTc0osTUFBTUssRUFBUWtHLEdBQ25DLFFBQ0osQ0FDQSxJQUFLLGFBQWMsQ0FDZixNQUFNMEIsRUFBa0J6TSxFQUNsQitLLEVBQU92SyxLQUFLc0wsTUFBTVcsRUFBZ0J2TSxRQUN4Q3VMLEdBQU9qTCxLQUFLdEYsU0FBUzZHLFdBQVdnSixHQUNoQyxRQUNKLENBQ0EsSUFBSyxPQUFRLENBQ1QsTUFBTTJCLEVBQVkxTSxFQUNacUMsRUFBVXFLLEVBQVVySyxRQUNwQkMsRUFBUW9LLEVBQVVwSyxNQUNsQkMsRUFBUW1LLEVBQVVuSyxNQUN4QixJQUFJd0ksRUFBTyxHQUNYLElBQUssSUFBSXdCLEVBQUksRUFBR0EsRUFBSUcsRUFBVWxLLE1BQU01RCxPQUFRMk4sSUFBSyxDQUM3QyxNQUFNM0gsRUFBTzhILEVBQVVsSyxNQUFNK0osR0FDdkJ4SSxFQUFVYSxFQUFLYixRQUNmRCxFQUFPYyxFQUFLZCxLQUNsQixJQUFJNkksRUFBVyxHQUNmLEdBQUkvSCxFQUFLZCxLQUFNLENBQ1gsTUFBTW1ILEVBQVd6SyxLQUFLdEYsU0FBUytQLFdBQVdsSCxHQUN0Q3hCLEVBQ0lxQyxFQUFLMUUsT0FBT3RCLE9BQVMsR0FBNkIsY0FBeEJnRyxFQUFLMUUsT0FBTyxHQUFHRCxNQUN6QzJFLEVBQUsxRSxPQUFPLEdBQUdMLEtBQU9vTCxFQUFXLElBQU1yRyxFQUFLMUUsT0FBTyxHQUFHTCxLQUNsRCtFLEVBQUsxRSxPQUFPLEdBQUdBLFFBQVUwRSxFQUFLMUUsT0FBTyxHQUFHQSxPQUFPdEIsT0FBUyxHQUF1QyxTQUFsQ2dHLEVBQUsxRSxPQUFPLEdBQUdBLE9BQU8sR0FBR0QsT0FDdEYyRSxFQUFLMUUsT0FBTyxHQUFHQSxPQUFPLEdBQUdMLEtBQU9vTCxFQUFXLElBQU1yRyxFQUFLMUUsT0FBTyxHQUFHQSxPQUFPLEdBQUdMLE9BSTlFK0UsRUFBSzFFLE9BQU8wTSxRQUFRLENBQ2hCM00sS0FBTSxPQUNOSixLQUFNb0wsRUFBVyxNQUt6QjBCLEdBQVkxQixFQUFXLEdBRS9CLENBQ0EwQixHQUFZbk0sS0FBS3NMLE1BQU1sSCxFQUFLMUUsT0FBUXFDLEdBQ3BDd0ksR0FBUXZLLEtBQUt0RixTQUFTOFAsU0FBUzJCLEVBQVU3SSxJQUFRQyxFQUNyRCxDQUNBMEgsR0FBT2pMLEtBQUt0RixTQUFTZ0gsS0FBSzZJLEVBQU0xSSxFQUFTQyxHQUN6QyxRQUNKLENBQ0EsSUFBSyxPQUFRLENBQ1QsTUFBTXVLLEVBQVk3TSxFQUNsQnlMLEdBQU9qTCxLQUFLdEYsU0FBU2dCLEtBQUsyUSxFQUFVaE4sS0FBTWdOLEVBQVVsTSxPQUNwRCxRQUNKLENBQ0EsSUFBSyxZQUFhLENBQ2QsTUFBTW1NLEVBQWlCOU0sRUFDdkJ5TCxHQUFPakwsS0FBS3RGLFNBQVNnSyxVQUFVMUUsS0FBS3VMLFlBQVllLEVBQWU1TSxTQUMvRCxRQUNKLENBQ0EsSUFBSyxPQUFRLENBQ1QsSUFBSTZNLEVBQVkvTSxFQUNaK0ssRUFBT2dDLEVBQVU3TSxPQUFTTSxLQUFLdUwsWUFBWWdCLEVBQVU3TSxRQUFVNk0sRUFBVWxOLEtBQzdFLEtBQU9wQixFQUFJLEVBQUl5QixFQUFPdEIsUUFBaUMsU0FBdkJzQixFQUFPekIsRUFBSSxHQUFHd0IsTUFDMUM4TSxFQUFZN00sSUFBU3pCLEdBQ3JCc00sR0FBUSxNQUFRZ0MsRUFBVTdNLE9BQVNNLEtBQUt1TCxZQUFZZ0IsRUFBVTdNLFFBQVU2TSxFQUFVbE4sTUFFdEY0TCxHQUFPekosRUFBTXhCLEtBQUt0RixTQUFTZ0ssVUFBVTZGLEdBQVFBLEVBQzdDLFFBQ0osQ0FDQSxRQUFTLENBQ0wsTUFBTWIsRUFBUyxlQUFpQmxLLEVBQU1DLEtBQU8sd0JBQzdDLEdBQUlPLEtBQUtILFFBQVFsRixPQUViLE9BREFpUCxRQUFRQyxNQUFNSCxHQUNQLEdBR1AsTUFBTSxJQUFJSSxNQUFNSixFQUV4QixFQUVSLENBQ0EsT0FBT3VCLENBQ1gsQ0FJQSxXQUFBTSxDQUFZN0wsRUFBUWhGLEdBQ2hCQSxFQUFXQSxHQUFZc0YsS0FBS3RGLFNBQzVCLElBQUl1USxFQUFNLEdBQ1YsSUFBSyxJQUFJaE4sRUFBSSxFQUFHQSxFQUFJeUIsRUFBT3RCLE9BQVFILElBQUssQ0FDcEMsTUFBTXVCLEVBQVFFLEVBQU96QixHQUVyQixHQUFJK0IsS0FBS0gsUUFBUXZGLFlBQWMwRixLQUFLSCxRQUFRdkYsV0FBV2tSLFdBQWF4TCxLQUFLSCxRQUFRdkYsV0FBV2tSLFVBQVVoTSxFQUFNQyxNQUFPLENBQy9HLE1BQU1pTSxFQUFNMUwsS0FBS0gsUUFBUXZGLFdBQVdrUixVQUFVaE0sRUFBTUMsTUFBTXlKLEtBQUssQ0FBRXlDLE9BQVEzTCxNQUFRUixHQUNqRixJQUFZLElBQVJrTSxJQUFrQixDQUFDLFNBQVUsT0FBUSxPQUFRLFFBQVMsU0FBVSxLQUFNLFdBQVksS0FBTSxNQUFPLFFBQVF6QixTQUFTekssRUFBTUMsTUFBTyxDQUM3SHdMLEdBQU9TLEdBQU8sR0FDZCxRQUNKLENBQ0osQ0FDQSxPQUFRbE0sRUFBTUMsTUFDVixJQUFLLFNBQVUsQ0FDWCxNQUFNK00sRUFBY2hOLEVBQ3BCeUwsR0FBT3ZRLEVBQVMyRSxLQUFLbU4sRUFBWW5OLE1BQ2pDLEtBQ0osQ0FDQSxJQUFLLE9BQVEsQ0FDVCxNQUFNb04sRUFBV2pOLEVBQ2pCeUwsR0FBT3ZRLEVBQVNnQixLQUFLK1EsRUFBU3BOLE1BQzlCLEtBQ0osQ0FDQSxJQUFLLE9BQVEsQ0FDVCxNQUFNcU4sRUFBWWxOLEVBQ2xCeUwsR0FBT3ZRLEVBQVN1RSxLQUFLeU4sRUFBVXhQLEtBQU13UCxFQUFVdE4sTUFBT1ksS0FBS3VMLFlBQVltQixFQUFVaE4sT0FBUWhGLElBQ3pGLEtBQ0osQ0FDQSxJQUFLLFFBQVMsQ0FDVixNQUFNaVMsRUFBYW5OLEVBQ25CeUwsR0FBT3ZRLEVBQVN3USxNQUFNeUIsRUFBV3pQLEtBQU15UCxFQUFXdk4sTUFBT3VOLEVBQVd0TixNQUNwRSxLQUNKLENBQ0EsSUFBSyxTQUFVLENBQ1gsTUFBTXVOLEVBQWNwTixFQUNwQnlMLEdBQU92USxFQUFTb1EsT0FBTzlLLEtBQUt1TCxZQUFZcUIsRUFBWWxOLE9BQVFoRixJQUM1RCxLQUNKLENBQ0EsSUFBSyxLQUFNLENBQ1AsTUFBTW1TLEVBQVVyTixFQUNoQnlMLEdBQU92USxFQUFTcVEsR0FBRy9LLEtBQUt1TCxZQUFZc0IsRUFBUW5OLE9BQVFoRixJQUNwRCxLQUNKLENBQ0EsSUFBSyxXQUFZLENBQ2IsTUFBTW9TLEVBQWdCdE4sRUFDdEJ5TCxHQUFPdlEsRUFBUzhMLFNBQVNzRyxFQUFjek4sTUFDdkMsS0FDSixDQUNBLElBQUssS0FDRDRMLEdBQU92USxFQUFTaU0sS0FDaEIsTUFFSixJQUFLLE1BQU8sQ0FDUixNQUFNb0csRUFBV3ZOLEVBQ2pCeUwsR0FBT3ZRLEVBQVNrTSxJQUFJNUcsS0FBS3VMLFlBQVl3QixFQUFTck4sT0FBUWhGLElBQ3RELEtBQ0osQ0FDQSxJQUFLLE9BQVEsQ0FDVCxNQUFNNlIsRUFBWS9NLEVBQ2xCeUwsR0FBT3ZRLEVBQVMyRSxLQUFLa04sRUFBVWxOLE1BQy9CLEtBQ0osQ0FDQSxRQUFTLENBQ0wsTUFBTXFLLEVBQVMsZUFBaUJsSyxFQUFNQyxLQUFPLHdCQUM3QyxHQUFJTyxLQUFLSCxRQUFRbEYsT0FFYixPQURBaVAsUUFBUUMsTUFBTUgsR0FDUCxHQUdQLE1BQU0sSUFBSUksTUFBTUosRUFFeEIsRUFFUixDQUNBLE9BQU91QixDQUNYLEVBR0osTUFBTStCLEdBQ0ZuTixRQUNBLFdBQUFFLENBQVlGLEdBQ1JHLEtBQUtILFFBQVVBLEdBQVcxRixDQUM5QixDQUNBOFMsd0JBQTBCLElBQUlDLElBQUksQ0FDOUIsYUFDQSxjQUNBLHFCQUtKLFVBQUFDLENBQVdDLEdBQ1AsT0FBT0EsQ0FDWCxDQUlBLFdBQUFDLENBQVkzUixHQUNSLE9BQU9BLENBQ1gsQ0FJQSxnQkFBQTRSLENBQWlCNU4sR0FDYixPQUFPQSxDQUNYLEVBeVRKLE1BQU02TixHQUFpQixJQXRUdkIsTUFDSUMsU0F6L0RPLENBQ0hwVCxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsV0FBWSxLQUNaQyxLQUFLLEVBQ0xDLE1BQU8sS0FDUEMsVUFBVSxFQUNWQyxTQUFVLEtBQ1ZDLFFBQVEsRUFDUkMsVUFBVyxLQUNYQyxXQUFZLE1BZy9EaEJnRixRQUFVRyxLQUFLeU4sV0FDZm5DLE1BQVF0TCxNQUFLLEVBQWVxSSxHQUFPSSxJQUFLMkMsR0FBUUUsT0FDaERDLFlBQWN2TCxNQUFLLEVBQWVxSSxHQUFPSyxVQUFXMEMsR0FBUUcsYUFDNURtQyxPQUFTdEMsR0FDVHVDLFNBQVd2RCxHQUNYd0QsYUFBZXpDLEdBQ2YwQyxNQUFReEYsR0FDUnlGLFVBQVlsTyxFQUNabU8sTUFBUWYsR0FDUixXQUFBak4sSUFBZWlPLEdBQ1hoTyxLQUFLaU8sT0FBT0QsRUFDaEIsQ0FJQSxVQUFBblQsQ0FBVzZFLEVBQVF3TyxHQUNmLElBQUlDLEVBQVMsR0FDYixJQUFLLE1BQU0zTyxLQUFTRSxFQUVoQixPQURBeU8sRUFBU0EsRUFBT0MsT0FBT0YsRUFBU2hGLEtBQUtsSixLQUFNUixJQUNuQ0EsRUFBTUMsTUFDVixJQUFLLFFBQVMsQ0FDVixNQUFNcU0sRUFBYXRNLEVBQ25CLElBQUssTUFBTWdGLEtBQVFzSCxFQUFXekgsT0FDMUI4SixFQUFTQSxFQUFPQyxPQUFPcE8sS0FBS25GLFdBQVcySixFQUFLOUUsT0FBUXdPLElBRXhELElBQUssTUFBTTNKLEtBQU91SCxFQUFXM0gsS0FDekIsSUFBSyxNQUFNSyxLQUFRRCxFQUNmNEosRUFBU0EsRUFBT0MsT0FBT3BPLEtBQUtuRixXQUFXMkosRUFBSzlFLE9BQVF3TyxJQUc1RCxLQUNKLENBQ0EsSUFBSyxPQUFRLENBQ1QsTUFBTWhDLEVBQVkxTSxFQUNsQjJPLEVBQVNBLEVBQU9DLE9BQU9wTyxLQUFLbkYsV0FBV3FSLEVBQVVsSyxNQUFPa00sSUFDeEQsS0FDSixDQUNBLFFBQVMsQ0FDTCxNQUFNekMsRUFBZWpNLEVBQ2pCUSxLQUFLd04sU0FBU2xULFlBQVkrVCxjQUFjNUMsRUFBYWhNLE1BQ3JETyxLQUFLd04sU0FBU2xULFdBQVcrVCxZQUFZNUMsRUFBYWhNLE1BQU0rSixTQUFTNkUsSUFDN0QsTUFBTTNPLEVBQVMrTCxFQUFhNEMsR0FBYUMsS0FBS2pGLEtBQzlDOEUsRUFBU0EsRUFBT0MsT0FBT3BPLEtBQUtuRixXQUFXNkUsRUFBUXdPLEdBQVUsSUFHeER6QyxFQUFhL0wsU0FDbEJ5TyxFQUFTQSxFQUFPQyxPQUFPcE8sS0FBS25GLFdBQVc0USxFQUFhL0wsT0FBUXdPLElBRXBFLEVBR1IsT0FBT0MsQ0FDWCxDQUNBLEdBQUFGLElBQU9ELEdBQ0gsTUFBTTFULEVBQWEwRixLQUFLd04sU0FBU2xULFlBQWMsQ0FBRWtSLFVBQVcsQ0FBQyxFQUFHNkMsWUFBYSxDQUFDLEdBd0s5RSxPQXZLQUwsRUFBS3hFLFNBQVMrRSxJQUVWLE1BQU1DLEVBQU8sSUFBS0QsR0E4RGxCLEdBNURBQyxFQUFLcFUsTUFBUTRGLEtBQUt3TixTQUFTcFQsT0FBU29VLEVBQUtwVSxRQUFTLEVBRTlDbVUsRUFBS2pVLGFBQ0xpVSxFQUFLalUsV0FBV2tQLFNBQVNpRixJQUNyQixJQUFLQSxFQUFJNVIsS0FDTCxNQUFNLElBQUlpTixNQUFNLDJCQUVwQixHQUFJLGFBQWMyRSxFQUFLLENBQ25CLE1BQU1DLEVBQWVwVSxFQUFXa1IsVUFBVWlELEVBQUk1UixNQUcxQ3ZDLEVBQVdrUixVQUFVaUQsRUFBSTVSLE1BRnpCNlIsRUFFaUMsWUFBYVYsR0FDMUMsSUFBSXRDLEVBQU0rQyxFQUFJL1QsU0FBU2lVLE1BQU0zTyxLQUFNZ08sR0FJbkMsT0FIWSxJQUFSdEMsSUFDQUEsRUFBTWdELEVBQWFDLE1BQU0zTyxLQUFNZ08sSUFFNUJ0QyxDQUNYLEVBR2lDK0MsRUFBSS9ULFFBRTdDLENBQ0EsR0FBSSxjQUFlK1QsRUFBSyxDQUNwQixJQUFLQSxFQUFJdkosT0FBd0IsVUFBZHVKLEVBQUl2SixPQUFtQyxXQUFkdUosRUFBSXZKLE1BQzVDLE1BQU0sSUFBSTRFLE1BQU0sK0NBRXBCLE1BQU04RSxFQUFXdFUsRUFBV21VLEVBQUl2SixPQUM1QjBKLEVBQ0FBLEVBQVN4QyxRQUFRcUMsRUFBSTdULFdBR3JCTixFQUFXbVUsRUFBSXZKLE9BQVMsQ0FBQ3VKLEVBQUk3VCxXQUU3QjZULEVBQUkzTSxRQUNjLFVBQWQyTSxFQUFJdkosTUFDQTVLLEVBQVc2TyxXQUNYN08sRUFBVzZPLFdBQVc1SyxLQUFLa1EsRUFBSTNNLE9BRy9CeEgsRUFBVzZPLFdBQWEsQ0FBQ3NGLEVBQUkzTSxPQUdkLFdBQWQyTSxFQUFJdkosUUFDTDVLLEVBQVc2UCxZQUNYN1AsRUFBVzZQLFlBQVk1TCxLQUFLa1EsRUFBSTNNLE9BR2hDeEgsRUFBVzZQLFlBQWMsQ0FBQ3NFLEVBQUkzTSxRQUk5QyxDQUNJLGdCQUFpQjJNLEdBQU9BLEVBQUlKLGNBQzVCL1QsRUFBVytULFlBQVlJLEVBQUk1UixNQUFRNFIsRUFBSUosWUFDM0MsSUFFSkcsRUFBS2xVLFdBQWFBLEdBR2xCaVUsRUFBSzdULFNBQVUsQ0FDZixNQUFNQSxFQUFXc0YsS0FBS3dOLFNBQVM5UyxVQUFZLElBQUkwUCxHQUFVcEssS0FBS3dOLFVBQzlELElBQUssTUFBTXFCLEtBQVFOLEVBQUs3VCxTQUFVLENBQzlCLEtBQU1tVSxLQUFRblUsR0FDVixNQUFNLElBQUlvUCxNQUFNLGFBQWErRSxxQkFFakMsR0FBYSxZQUFUQSxFQUVBLFNBRUosTUFBTUMsRUFBZUQsRUFDZkUsRUFBZVIsRUFBSzdULFNBQVNvVSxHQUM3QkosRUFBZWhVLEVBQVNvVSxHQUU5QnBVLEVBQVNvVSxHQUFnQixJQUFJZCxLQUN6QixJQUFJdEMsRUFBTXFELEVBQWFKLE1BQU1qVSxFQUFVc1QsR0FJdkMsT0FIWSxJQUFSdEMsSUFDQUEsRUFBTWdELEVBQWFDLE1BQU1qVSxFQUFVc1QsSUFFaEN0QyxHQUFPLEVBQUUsQ0FFeEIsQ0FDQThDLEVBQUs5VCxTQUFXQSxDQUNwQixDQUNBLEdBQUk2VCxFQUFLM1QsVUFBVyxDQUNoQixNQUFNQSxFQUFZb0YsS0FBS3dOLFNBQVM1UyxXQUFhLElBQUlnRixFQUFXSSxLQUFLd04sVUFDakUsSUFBSyxNQUFNcUIsS0FBUU4sRUFBSzNULFVBQVcsQ0FDL0IsS0FBTWlVLEtBQVFqVSxHQUNWLE1BQU0sSUFBSWtQLE1BQU0sY0FBYytFLHFCQUVsQyxHQUFJLENBQUMsVUFBVyxRQUFTLFNBQVM1RSxTQUFTNEUsR0FFdkMsU0FFSixNQUFNRyxFQUFnQkgsRUFDaEJJLEVBQWdCVixFQUFLM1QsVUFBVW9VLEdBQy9CRSxFQUFnQnRVLEVBQVVvVSxHQUdoQ3BVLEVBQVVvVSxHQUFpQixJQUFJaEIsS0FDM0IsSUFBSXRDLEVBQU11RCxFQUFjTixNQUFNL1QsRUFBV29ULEdBSXpDLE9BSFksSUFBUnRDLElBQ0FBLEVBQU13RCxFQUFjUCxNQUFNL1QsRUFBV29ULElBRWxDdEMsQ0FBRyxDQUVsQixDQUNBOEMsRUFBSzVULFVBQVlBLENBQ3JCLENBRUEsR0FBSTJULEVBQUsvVCxNQUFPLENBQ1osTUFBTUEsRUFBUXdGLEtBQUt3TixTQUFTaFQsT0FBUyxJQUFJd1MsR0FDekMsSUFBSyxNQUFNNkIsS0FBUU4sRUFBSy9ULE1BQU8sQ0FDM0IsS0FBTXFVLEtBQVFyVSxHQUNWLE1BQU0sSUFBSXNQLE1BQU0sU0FBUytFLHFCQUU3QixHQUFhLFlBQVRBLEVBRUEsU0FFSixNQUFNTSxFQUFZTixFQUNaTyxFQUFZYixFQUFLL1QsTUFBTTJVLEdBQ3ZCRSxFQUFXN1UsRUFBTTJVLEdBQ25CbkMsR0FBT3NDLGlCQUFpQkMsSUFBSVYsR0FFNUJyVSxFQUFNMlUsR0FBY0ssSUFDaEIsR0FBSXhQLEtBQUt3TixTQUFTcFQsTUFDZCxPQUFPcVYsUUFBUUMsUUFBUU4sRUFBVWxHLEtBQUsxTyxFQUFPZ1YsSUFBTUcsTUFBS2pFLEdBQzdDMkQsRUFBU25HLEtBQUsxTyxFQUFPa1IsS0FHcEMsTUFBTUEsRUFBTTBELEVBQVVsRyxLQUFLMU8sRUFBT2dWLEdBQ2xDLE9BQU9ILEVBQVNuRyxLQUFLMU8sRUFBT2tSLEVBQUksRUFLcENsUixFQUFNMlUsR0FBYSxJQUFJbkIsS0FDbkIsSUFBSXRDLEVBQU0wRCxFQUFVVCxNQUFNblUsRUFBT3dULEdBSWpDLE9BSFksSUFBUnRDLElBQ0FBLEVBQU0yRCxFQUFTVixNQUFNblUsRUFBT3dULElBRXpCdEMsQ0FBRyxDQUd0QixDQUNBOEMsRUFBS2hVLE1BQVFBLENBQ2pCLENBRUEsR0FBSStULEVBQUsxVCxXQUFZLENBQ2pCLE1BQU1BLEVBQWFtRixLQUFLd04sU0FBUzNTLFdBQzNCK1UsRUFBaUJyQixFQUFLMVQsV0FDNUIyVCxFQUFLM1QsV0FBYSxTQUFVMkUsR0FDeEIsSUFBSTJPLEVBQVMsR0FLYixPQUpBQSxFQUFPNVAsS0FBS3FSLEVBQWUxRyxLQUFLbEosS0FBTVIsSUFDbEMzRSxJQUNBc1QsRUFBU0EsRUFBT0MsT0FBT3ZULEVBQVdxTyxLQUFLbEosS0FBTVIsS0FFMUMyTyxDQUNYLENBQ0osQ0FDQW5PLEtBQUt3TixTQUFXLElBQUt4TixLQUFLd04sWUFBYWdCLEVBQU0sSUFFMUN4TyxJQUNYLENBQ0EsVUFBQXlOLENBQVc5USxHQUVQLE9BREFxRCxLQUFLd04sU0FBVyxJQUFLeE4sS0FBS3dOLFlBQWE3USxHQUNoQ3FELElBQ1gsQ0FDQSxLQUFBYixDQUFNZSxFQUFLTCxHQUNQLE9BQU93SSxHQUFPSSxJQUFJdkksRUFBS0wsR0FBV0csS0FBS3dOLFNBQzNDLENBQ0EsTUFBQTdCLENBQU9qTSxFQUFRRyxHQUNYLE9BQU91TCxHQUFRRSxNQUFNNUwsRUFBUUcsR0FBV0csS0FBS3dOLFNBQ2pELENBQ0EsR0FBZXJPLEVBQU93TSxHQUNsQixNQUFPLENBQUN6TCxFQUFLTCxLQUNULE1BQU1nUSxFQUFVLElBQUtoUSxHQUNmbEQsRUFBTSxJQUFLcUQsS0FBS3dOLFlBQWFxQyxJQUVQLElBQXhCN1AsS0FBS3dOLFNBQVNwVCxRQUFvQyxJQUFsQnlWLEVBQVF6VixRQUNuQ3VDLEVBQUloQyxRQUNMaVAsUUFBUWtHLEtBQUssc0hBRWpCblQsRUFBSXZDLE9BQVEsR0FFaEIsTUFBTTJWLEVBQWEvUCxNQUFLLElBQVdyRCxFQUFJaEMsU0FBVWdDLEVBQUl2QyxPQUVyRCxHQUFJLE1BQU84RixFQUNQLE9BQU82UCxFQUFXLElBQUlqRyxNQUFNLG1EQUVoQyxHQUFtQixpQkFBUjVKLEVBQ1AsT0FBTzZQLEVBQVcsSUFBSWpHLE1BQU0sd0NBQ3RCdkIsT0FBT3lILFVBQVVDLFNBQVMvRyxLQUFLaEosR0FBTyxzQkFLaEQsR0FISXZELEVBQUluQyxRQUNKbUMsRUFBSW5DLE1BQU1xRixRQUFVbEQsR0FFcEJBLEVBQUl2QyxNQUNKLE9BQU9xVixRQUFRQyxRQUFRL1MsRUFBSW5DLE1BQVFtQyxFQUFJbkMsTUFBTTJTLFdBQVdqTixHQUFPQSxHQUMxRHlQLE1BQUt6UCxHQUFPZixFQUFNZSxFQUFLdkQsS0FDdkJnVCxNQUFLalEsR0FBVS9DLEVBQUluQyxNQUFRbUMsRUFBSW5DLE1BQU04UyxpQkFBaUI1TixHQUFVQSxJQUNoRWlRLE1BQUtqUSxHQUFVL0MsRUFBSTlCLFdBQWE0VSxRQUFRUyxJQUFJbFEsS0FBS25GLFdBQVc2RSxFQUFRL0MsRUFBSTlCLGFBQWE4VSxNQUFLLElBQU1qUSxJQUFVQSxJQUMxR2lRLE1BQUtqUSxHQUFVaU0sRUFBT2pNLEVBQVEvQyxLQUM5QmdULE1BQUtqVSxHQUFRaUIsRUFBSW5DLE1BQVFtQyxFQUFJbkMsTUFBTTZTLFlBQVkzUixHQUFRQSxJQUN2RHlVLE1BQU1KLEdBRWYsSUFDUXBULEVBQUluQyxRQUNKMEYsRUFBTXZELEVBQUluQyxNQUFNMlMsV0FBV2pOLElBRS9CLElBQUlSLEVBQVNQLEVBQU1lLEVBQUt2RCxHQUNwQkEsRUFBSW5DLFFBQ0prRixFQUFTL0MsRUFBSW5DLE1BQU04UyxpQkFBaUI1TixJQUVwQy9DLEVBQUk5QixZQUNKbUYsS0FBS25GLFdBQVc2RSxFQUFRL0MsRUFBSTlCLFlBRWhDLElBQUlhLEVBQU9pUSxFQUFPak0sRUFBUS9DLEdBSTFCLE9BSElBLEVBQUluQyxRQUNKa0IsRUFBT2lCLEVBQUluQyxNQUFNNlMsWUFBWTNSLElBRTFCQSxDQUNYLENBQ0EsTUFBTzBCLEdBQ0gsT0FBTzJTLEVBQVczUyxFQUN0QixFQUVSLENBQ0EsR0FBU3pDLEVBQVFQLEdBQ2IsT0FBUWdELElBRUosR0FEQUEsRUFBRWdULFNBQVcsOERBQ1R6VixFQUFRLENBQ1IsTUFBTTBWLEVBQU0saUNBQ041VSxFQUFTMkIsRUFBRWdULFFBQVUsSUFBSSxHQUN6QixTQUNOLE9BQUloVyxFQUNPcVYsUUFBUUMsUUFBUVcsR0FFcEJBLENBQ1gsQ0FDQSxHQUFJalcsRUFDQSxPQUFPcVYsUUFBUWEsT0FBT2xULEdBRTFCLE1BQU1BLENBQUMsQ0FFZixHQUlKLFNBQVNtVCxHQUFPclEsRUFBS3ZELEdBQ2pCLE9BQU80USxHQUFlakMsTUFBTXBMLEVBQUt2RCxFQUNyQyxDQU1BNFQsR0FBTzFRLFFBQ0gwUSxHQUFPOUMsV0FBYSxTQUFVNU4sR0FJMUIsT0FIQTBOLEdBQWVFLFdBQVc1TixHQUMxQjBRLEdBQU8vQyxTQUFXRCxHQUFlQyxTQUNqQzFTLEVBQWV5VixHQUFPL0MsVUFDZitDLEVBQ1gsRUFJSkEsR0FBT0MsWUFsMEVQLFdBQ0ksTUFBTyxDQUNIcFcsT0FBTyxFQUNQQyxRQUFRLEVBQ1JDLFdBQVksS0FDWkMsS0FBSyxFQUNMQyxNQUFPLEtBQ1BDLFVBQVUsRUFDVkMsU0FBVSxLQUNWQyxRQUFRLEVBQ1JDLFVBQVcsS0FDWEMsV0FBWSxLQUVwQixFQXN6RUEwVixHQUFPL0MsU0FBV3JULEVBSWxCb1csR0FBT3RDLElBQU0sWUFBYUQsR0FJdEIsT0FIQVQsR0FBZVUsT0FBT0QsR0FDdEJ1QyxHQUFPL0MsU0FBV0QsR0FBZUMsU0FDakMxUyxFQUFleVYsR0FBTy9DLFVBQ2YrQyxFQUNYLEVBSUFBLEdBQU8xVixXQUFhLFNBQVU2RSxFQUFRd08sR0FDbEMsT0FBT1gsR0FBZTFTLFdBQVc2RSxFQUFRd08sRUFDN0MsRUFRQXFDLEdBQU9oRixZQUFjZ0MsR0FBZWhDLFlBSXBDZ0YsR0FBTzdDLE9BQVN0QyxHQUNoQm1GLEdBQU81RSxPQUFTUCxHQUFRRSxNQUN4QmlGLEdBQU81QyxTQUFXdkQsR0FDbEJtRyxHQUFPM0MsYUFBZXpDLEdBQ3RCb0YsR0FBTzFDLE1BQVF4RixHQUNma0ksR0FBT3BSLE1BQVFrSixHQUFPSSxJQUN0QjhILEdBQU96QyxVQUFZbE8sRUFDbkIyUSxHQUFPeEMsTUFBUWYsR0FDZnVELEdBQU9qRixNQUFRaUYsR0FDQ0EsR0FBTzFRLFFBQ0owUSxHQUFPOUMsV0FDZDhDLEdBQU90QyxJQUNBc0MsR0FBTzFWLFdBQ04wVixHQUFPaEYsWUFFWkgsR0FBUUUsTUFDVGpELEdBQU9JLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwLy4vbm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIG1hcmtlZCB2MTIuMC4yIC0gYSBtYXJrZG93biBwYXJzZXJcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDI0LCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKVxuICogaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZFxuICovXG5cbi8qKlxuICogRE8gTk9UIEVESVQgVEhJUyBGSUxFXG4gKiBUaGUgY29kZSBpbiB0aGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGZyb20gZmlsZXMgaW4gLi9zcmMvXG4gKi9cblxuLyoqXG4gKiBHZXRzIHRoZSBvcmlnaW5hbCBtYXJrZWQgZGVmYXVsdCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBfZ2V0RGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICBicmVha3M6IGZhbHNlLFxuICAgICAgICBleHRlbnNpb25zOiBudWxsLFxuICAgICAgICBnZm06IHRydWUsXG4gICAgICAgIGhvb2tzOiBudWxsLFxuICAgICAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgICAgIHJlbmRlcmVyOiBudWxsLFxuICAgICAgICBzaWxlbnQ6IGZhbHNlLFxuICAgICAgICB0b2tlbml6ZXI6IG51bGwsXG4gICAgICAgIHdhbGtUb2tlbnM6IG51bGxcbiAgICB9O1xufVxubGV0IF9kZWZhdWx0cyA9IF9nZXREZWZhdWx0cygpO1xuZnVuY3Rpb24gY2hhbmdlRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBfZGVmYXVsdHMgPSBuZXdEZWZhdWx0cztcbn1cblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cbmNvbnN0IGVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuY29uc3QgZXNjYXBlUmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlVGVzdC5zb3VyY2UsICdnJyk7XG5jb25zdCBlc2NhcGVUZXN0Tm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hKCNcXGR7MSw3fXwjW1h4XVthLWZBLUYwLTldezEsNn18XFx3Kyk7KS87XG5jb25zdCBlc2NhcGVSZXBsYWNlTm9FbmNvZGUgPSBuZXcgUmVnRXhwKGVzY2FwZVRlc3ROb0VuY29kZS5zb3VyY2UsICdnJyk7XG5jb25zdCBlc2NhcGVSZXBsYWNlbWVudHMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG59O1xuY29uc3QgZ2V0RXNjYXBlUmVwbGFjZW1lbnQgPSAoY2gpID0+IGVzY2FwZVJlcGxhY2VtZW50c1tjaF07XG5mdW5jdGlvbiBlc2NhcGUkMShodG1sLCBlbmNvZGUpIHtcbiAgICBpZiAoZW5jb2RlKSB7XG4gICAgICAgIGlmIChlc2NhcGVUZXN0LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlUmVwbGFjZSwgZ2V0RXNjYXBlUmVwbGFjZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZXNjYXBlVGVzdE5vRW5jb2RlLnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlUmVwbGFjZU5vRW5jb2RlLCBnZXRFc2NhcGVSZXBsYWNlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh0bWw7XG59XG5jb25zdCB1bmVzY2FwZVRlc3QgPSAvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2lnO1xuZnVuY3Rpb24gdW5lc2NhcGUoaHRtbCkge1xuICAgIC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllc1xuICAgIHJldHVybiBodG1sLnJlcGxhY2UodW5lc2NhcGVUZXN0LCAoXywgbikgPT4ge1xuICAgICAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobiA9PT0gJ2NvbG9uJylcbiAgICAgICAgICAgIHJldHVybiAnOic7XG4gICAgICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICAgICAgICAgID8gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLnN1YnN0cmluZygyKSwgMTYpKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSgrbi5zdWJzdHJpbmcoMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbn1cbmNvbnN0IGNhcmV0ID0gLyhefFteXFxbXSlcXF4vZztcbmZ1bmN0aW9uIGVkaXQocmVnZXgsIG9wdCkge1xuICAgIGxldCBzb3VyY2UgPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XG4gICAgb3B0ID0gb3B0IHx8ICcnO1xuICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgcmVwbGFjZTogKG5hbWUsIHZhbCkgPT4ge1xuICAgICAgICAgICAgbGV0IHZhbFNvdXJjZSA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gdmFsIDogdmFsLnNvdXJjZTtcbiAgICAgICAgICAgIHZhbFNvdXJjZSA9IHZhbFNvdXJjZS5yZXBsYWNlKGNhcmV0LCAnJDEnKTtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKG5hbWUsIHZhbFNvdXJjZSk7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LFxuICAgICAgICBnZXRSZWdleDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoc291cmNlLCBvcHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gY2xlYW5VcmwoaHJlZikge1xuICAgIHRyeSB7XG4gICAgICAgIGhyZWYgPSBlbmNvZGVVUkkoaHJlZikucmVwbGFjZSgvJTI1L2csICclJyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZjtcbn1cbmNvbnN0IG5vb3BUZXN0ID0geyBleGVjOiAoKSA9PiBudWxsIH07XG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAgIC8vIGVuc3VyZSB0aGF0IGV2ZXJ5IGNlbGwtZGVsaW1pdGluZyBwaXBlIGhhcyBhIHNwYWNlXG4gICAgLy8gYmVmb3JlIGl0IHRvIGRpc3Rpbmd1aXNoIGl0IGZyb20gYW4gZXNjYXBlZCBwaXBlXG4gICAgY29uc3Qgcm93ID0gdGFibGVSb3cucmVwbGFjZSgvXFx8L2csIChtYXRjaCwgb2Zmc2V0LCBzdHIpID0+IHtcbiAgICAgICAgbGV0IGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGN1cnIgPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlICgtLWN1cnIgPj0gMCAmJiBzdHJbY3Vycl0gPT09ICdcXFxcJylcbiAgICAgICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgICAgIC8vIHNvIHdlIGxlYXZlIGl0IGFsb25lXG4gICAgICAgICAgICByZXR1cm4gJ3wnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYWRkIHNwYWNlIGJlZm9yZSB1bmVzY2FwZWQgfFxuICAgICAgICAgICAgcmV0dXJuICcgfCc7XG4gICAgICAgIH1cbiAgICB9KSwgY2VsbHMgPSByb3cuc3BsaXQoLyBcXHwvKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gRmlyc3QvbGFzdCBjZWxsIGluIGEgcm93IGNhbm5vdCBiZSBlbXB0eSBpZiBpdCBoYXMgbm8gbGVhZGluZy90cmFpbGluZyBwaXBlXG4gICAgaWYgKCFjZWxsc1swXS50cmltKCkpIHtcbiAgICAgICAgY2VsbHMuc2hpZnQoKTtcbiAgICB9XG4gICAgaWYgKGNlbGxzLmxlbmd0aCA+IDAgJiYgIWNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdLnRyaW0oKSkge1xuICAgICAgICBjZWxscy5wb3AoKTtcbiAgICB9XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICAgIGlmIChjZWxscy5sZW5ndGggPiBjb3VudCkge1xuICAgICAgICAgICAgY2VsbHMuc3BsaWNlKGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudClcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKCcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyBpZ25vcmVkIHBlciB0aGUgZ2ZtIHNwZWNcbiAgICAgICAgY2VsbHNbaV0gPSBjZWxsc1tpXS50cmltKCkucmVwbGFjZSgvXFxcXFxcfC9nLCAnfCcpO1xuICAgIH1cbiAgICByZXR1cm4gY2VsbHM7XG59XG4vKipcbiAqIFJlbW92ZSB0cmFpbGluZyAnYydzLiBFcXVpdmFsZW50IHRvIHN0ci5yZXBsYWNlKC9jKiQvLCAnJykuXG4gKiAvYyokLyBpcyB2dWxuZXJhYmxlIHRvIFJFRE9TLlxuICpcbiAqIEBwYXJhbSBzdHJcbiAqIEBwYXJhbSBjXG4gKiBAcGFyYW0gaW52ZXJ0IFJlbW92ZSBzdWZmaXggb2Ygbm9uLWMgY2hhcnMgaW5zdGVhZC4gRGVmYXVsdCBmYWxzZXkuXG4gKi9cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gICAgY29uc3QgbCA9IHN0ci5sZW5ndGg7XG4gICAgaWYgKGwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICAvLyBMZW5ndGggb2Ygc3VmZml4IG1hdGNoaW5nIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICAgIGxldCBzdWZmTGVuID0gMDtcbiAgICAvLyBTdGVwIGxlZnQgdW50aWwgd2UgZmFpbCB0byBtYXRjaCB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgICB3aGlsZSAoc3VmZkxlbiA8IGwpIHtcbiAgICAgICAgY29uc3QgY3VyckNoYXIgPSBzdHIuY2hhckF0KGwgLSBzdWZmTGVuIC0gMSk7XG4gICAgICAgIGlmIChjdXJyQ2hhciA9PT0gYyAmJiAhaW52ZXJ0KSB7XG4gICAgICAgICAgICBzdWZmTGVuKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VyckNoYXIgIT09IGMgJiYgaW52ZXJ0KSB7XG4gICAgICAgICAgICBzdWZmTGVuKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyLnNsaWNlKDAsIGwgLSBzdWZmTGVuKTtcbn1cbmZ1bmN0aW9uIGZpbmRDbG9zaW5nQnJhY2tldChzdHIsIGIpIHtcbiAgICBpZiAoc3RyLmluZGV4T2YoYlsxXSkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbGV0IGxldmVsID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc3RyW2ldID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdHJbaV0gPT09IGJbMF0pIHtcbiAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RyW2ldID09PSBiWzFdKSB7XG4gICAgICAgICAgICBsZXZlbC0tO1xuICAgICAgICAgICAgaWYgKGxldmVsIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gb3V0cHV0TGluayhjYXAsIGxpbmssIHJhdywgbGV4ZXIpIHtcbiAgICBjb25zdCBocmVmID0gbGluay5ocmVmO1xuICAgIGNvbnN0IHRpdGxlID0gbGluay50aXRsZSA/IGVzY2FwZSQxKGxpbmsudGl0bGUpIDogbnVsbDtcbiAgICBjb25zdCB0ZXh0ID0gY2FwWzFdLnJlcGxhY2UoL1xcXFwoW1xcW1xcXV0pL2csICckMScpO1xuICAgIGlmIChjYXBbMF0uY2hhckF0KDApICE9PSAnIScpIHtcbiAgICAgICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgICAgICByYXcsXG4gICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdG9rZW5zOiBsZXhlci5pbmxpbmVUb2tlbnModGV4dClcbiAgICAgICAgfTtcbiAgICAgICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgICAgcmF3LFxuICAgICAgICBocmVmLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgdGV4dDogZXNjYXBlJDEodGV4dClcbiAgICB9O1xufVxuZnVuY3Rpb24gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIHRleHQpIHtcbiAgICBjb25zdCBtYXRjaEluZGVudFRvQ29kZSA9IHJhdy5tYXRjaCgvXihcXHMrKSg/OmBgYCkvKTtcbiAgICBpZiAobWF0Y2hJbmRlbnRUb0NvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudFRvQ29kZSA9IG1hdGNoSW5kZW50VG9Db2RlWzFdO1xuICAgIHJldHVybiB0ZXh0XG4gICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgLm1hcChub2RlID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2hJbmRlbnRJbk5vZGUgPSBub2RlLm1hdGNoKC9eXFxzKy8pO1xuICAgICAgICBpZiAobWF0Y2hJbmRlbnRJbk5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtpbmRlbnRJbk5vZGVdID0gbWF0Y2hJbmRlbnRJbk5vZGU7XG4gICAgICAgIGlmIChpbmRlbnRJbk5vZGUubGVuZ3RoID49IGluZGVudFRvQ29kZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNsaWNlKGluZGVudFRvQ29kZS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbn1cbi8qKlxuICogVG9rZW5pemVyXG4gKi9cbmNsYXNzIF9Ub2tlbml6ZXIge1xuICAgIG9wdGlvbnM7XG4gICAgcnVsZXM7IC8vIHNldCBieSB0aGUgbGV4ZXJcbiAgICBsZXhlcjsgLy8gc2V0IGJ5IHRoZSBsZXhlclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBfZGVmYXVsdHM7XG4gICAgfVxuICAgIHNwYWNlKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLm5ld2xpbmUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwICYmIGNhcFswXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzcGFjZScsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29kZShzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5jb2RlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBjb2RlQmxvY2tTdHlsZTogJ2luZGVudGVkJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICAgICAgICAgID8gcnRyaW0odGV4dCwgJ1xcbicpXG4gICAgICAgICAgICAgICAgICAgIDogdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmZW5jZXMoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZmVuY2VzLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgcmF3ID0gY2FwWzBdO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGluZGVudENvZGVDb21wZW5zYXRpb24ocmF3LCBjYXBbM10gfHwgJycpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgICAgIGxhbmc6IGNhcFsyXSA/IGNhcFsyXS50cmltKCkucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbiwgJyQxJykgOiBjYXBbMl0sXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoZWFkaW5nKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmhlYWRpbmcuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGNhcFsyXS50cmltKCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgdHJhaWxpbmcgI3NcbiAgICAgICAgICAgIGlmICgvIyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkID0gcnRyaW0odGV4dCwgJyMnKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRyaW1tZWQgfHwgLyAkLy50ZXN0KHRyaW1tZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENvbW1vbk1hcmsgcmVxdWlyZXMgc3BhY2UgYmVmb3JlIHRyYWlsaW5nICNzXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmUodGV4dClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaHIoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHIuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdocicsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmxvY2txdW90ZShzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5ibG9ja3F1b3RlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgLy8gcHJlY2VkZSBzZXRleHQgY29udGludWF0aW9uIHdpdGggNCBzcGFjZXMgc28gaXQgaXNuJ3QgYSBzZXRleHRcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gY2FwWzBdLnJlcGxhY2UoL1xcbiB7MCwzfSgoPzo9K3wtKykgKikoPz1cXG58JCkvZywgJ1xcbiAgICAkMScpO1xuICAgICAgICAgICAgdGV4dCA9IHJ0cmltKHRleHQucmVwbGFjZSgvXiAqPlsgXFx0XT8vZ20sICcnKSwgJ1xcbicpO1xuICAgICAgICAgICAgY29uc3QgdG9wID0gdGhpcy5sZXhlci5zdGF0ZS50b3A7XG4gICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLnRvcCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB0b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKHRleHQpO1xuICAgICAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS50b3AgPSB0b3A7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsaXN0KHNyYykge1xuICAgICAgICBsZXQgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saXN0LmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgbGV0IGJ1bGwgPSBjYXBbMV0udHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgaXNvcmRlcmVkID0gYnVsbC5sZW5ndGggPiAxO1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgcmF3OiAnJyxcbiAgICAgICAgICAgICAgICBvcmRlcmVkOiBpc29yZGVyZWQsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsLnNsaWNlKDAsIC0xKSA6ICcnLFxuICAgICAgICAgICAgICAgIGxvb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpdGVtczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBidWxsID0gaXNvcmRlcmVkID8gYFxcXFxkezEsOX1cXFxcJHtidWxsLnNsaWNlKC0xKX1gIDogYFxcXFwke2J1bGx9YDtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgICAgICBidWxsID0gaXNvcmRlcmVkID8gYnVsbCA6ICdbKistXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgbmV4dCBsaXN0IGl0ZW1cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoYF4oIHswLDN9JHtidWxsfSkoKD86W1xcdCBdW15cXFxcbl0qKT8oPzpcXFxcbnwkKSlgKTtcbiAgICAgICAgICAgIGxldCByYXcgPSAnJztcbiAgICAgICAgICAgIGxldCBpdGVtQ29udGVudHMgPSAnJztcbiAgICAgICAgICAgIGxldCBlbmRzV2l0aEJsYW5rTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBidWxsZXQgcG9pbnQgY2FuIHN0YXJ0IGEgbmV3IExpc3QgSXRlbVxuICAgICAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgICAgIGxldCBlbmRFYXJseSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghKGNhcCA9IGl0ZW1SZWdleC5leGVjKHNyYykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ydWxlcy5ibG9jay5oci50ZXN0KHNyYykpIHsgLy8gRW5kIGxpc3QgaWYgYnVsbGV0IHdhcyBhY3R1YWxseSBIUiAocG9zc2libHkgbW92ZSBpbnRvIGl0ZW1SZWdleD8pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYXcgPSBjYXBbMF07XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZSA9IGNhcFsyXS5zcGxpdCgnXFxuJywgMSlbMF0ucmVwbGFjZSgvXlxcdCsvLCAodCkgPT4gJyAnLnJlcGVhdCgzICogdC5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dExpbmUgPSBzcmMuc3BsaXQoJ1xcbicsIDEpWzBdO1xuICAgICAgICAgICAgICAgIGxldCBpbmRlbnQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS50cmltU3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCA9IGNhcFsyXS5zZWFyY2goL1teIF0vKTsgLy8gRmluZCBmaXJzdCBub24tc3BhY2UgY2hhclxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQgPSBpbmRlbnQgPiA0ID8gMSA6IGluZGVudDsgLy8gVHJlYXQgaW5kZW50ZWQgY29kZSBibG9ja3MgKD4gNCBzcGFjZXMpIGFzIGhhdmluZyBvbmx5IDEgaW5kZW50XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1Db250ZW50cyA9IGxpbmUuc2xpY2UoaW5kZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9IGNhcFsxXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBibGFua0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmUgJiYgL14gKiQvLnRlc3QobmV4dExpbmUpKSB7IC8vIEl0ZW1zIGJlZ2luIHdpdGggYXQgbW9zdCBvbmUgYmxhbmsgbGluZVxuICAgICAgICAgICAgICAgICAgICByYXcgKz0gbmV4dExpbmUgKyAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhuZXh0TGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kRWFybHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWVuZEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRCdWxsZXRSZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KD86WyorLV18XFxcXGR7MSw5fVsuKV0pKCg/OlsgXFx0XVteXFxcXG5dKik/KD86XFxcXG58JCkpYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhyUmVnZXggPSBuZXcgUmVnRXhwKGBeIHswLCR7TWF0aC5taW4oMywgaW5kZW50IC0gMSl9fSgoPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXFxcKiAqKXszLH0pKD86XFxcXG4rfCQpYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlbmNlc0JlZ2luUmVnZXggPSBuZXcgUmVnRXhwKGBeIHswLCR7TWF0aC5taW4oMywgaW5kZW50IC0gMSl9fSg/OlxcYFxcYFxcYHx+fn4pYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRpbmdCZWdpblJlZ2V4ID0gbmV3IFJlZ0V4cChgXiB7MCwke01hdGgubWluKDMsIGluZGVudCAtIDEpfX0jYCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGZvbGxvd2luZyBsaW5lcyBzaG91bGQgYmUgaW5jbHVkZWQgaW4gTGlzdCBJdGVtXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd0xpbmUgPSBzcmMuc3BsaXQoJ1xcbicsIDEpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpbmUgPSByYXdMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmUtYWxpZ24gdG8gZm9sbG93IGNvbW1vbm1hcmsgbmVzdGluZyBydWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRMaW5lID0gbmV4dExpbmUucmVwbGFjZSgvXiB7MSw0fSg/PSggezR9KSpbXiBdKS9nLCAnICAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgY29kZSBmZW5jZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZW5jZXNCZWdpblJlZ2V4LnRlc3QobmV4dExpbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmQgbGlzdCBpdGVtIGlmIGZvdW5kIHN0YXJ0IG9mIG5ldyBoZWFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGluZ0JlZ2luUmVnZXgudGVzdChuZXh0TGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgc3RhcnQgb2YgbmV3IGJ1bGxldFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRCdWxsZXRSZWdleC50ZXN0KG5leHRMaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBydWxlIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHJSZWdleC50ZXN0KHNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0TGluZS5zZWFyY2goL1teIF0vKSA+PSBpbmRlbnQgfHwgIW5leHRMaW5lLnRyaW0oKSkgeyAvLyBEZWRlbnQgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtQ29udGVudHMgKz0gJ1xcbicgKyBuZXh0TGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGVub3VnaCBpbmRlbnRhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibGFua0xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhcmFncmFwaCBjb250aW51YXRpb24gdW5sZXNzIGxhc3QgbGluZSB3YXMgYSBkaWZmZXJlbnQgYmxvY2sgbGV2ZWwgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLnNlYXJjaCgvW14gXS8pID49IDQpIHsgLy8gaW5kZW50ZWQgY29kZSBibG9ja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlbmNlc0JlZ2luUmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRpbmdCZWdpblJlZ2V4LnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoclJlZ2V4LnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Db250ZW50cyArPSAnXFxuJyArIG5leHRMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFibGFua0xpbmUgJiYgIW5leHRMaW5lLnRyaW0oKSkgeyAvLyBDaGVjayBpZiBjdXJyZW50IGxpbmUgaXMgYmxhbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibGFua0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3ICs9IHJhd0xpbmUgKyAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmF3TGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBuZXh0TGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghbGlzdC5sb29zZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcHJldmlvdXMgaXRlbSBlbmRlZCB3aXRoIGEgYmxhbmsgbGluZSwgdGhlIGxpc3QgaXMgbG9vc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZHNXaXRoQmxhbmtMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0Lmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgvXFxuICpcXG4gKiQvLnRlc3QocmF3KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kc1dpdGhCbGFua0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBpc3Rhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBpc2NoZWNrZWQ7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHRhc2sgbGlzdCBpdGVtc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzdGFzayA9IC9eXFxbWyB4WF1cXF0gLy5leGVjKGl0ZW1Db250ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc3Rhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzY2hlY2tlZCA9IGlzdGFza1swXSAhPT0gJ1sgXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gaXRlbUNvbnRlbnRzLnJlcGxhY2UoL15cXFtbIHhYXVxcXSArLywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpc3QuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW0nLFxuICAgICAgICAgICAgICAgICAgICByYXcsXG4gICAgICAgICAgICAgICAgICAgIHRhc2s6ICEhaXN0YXNrLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBpc2NoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgIGxvb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogaXRlbUNvbnRlbnRzLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbnM6IFtdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGlzdC5yYXcgKz0gcmF3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRG8gbm90IGNvbnN1bWUgbmV3bGluZXMgYXQgZW5kIG9mIGZpbmFsIGl0ZW0uIEFsdGVybmF0aXZlbHksIG1ha2UgaXRlbVJlZ2V4ICpzdGFydCogd2l0aCBhbnkgbmV3bGluZXMgdG8gc2ltcGxpZnkvc3BlZWQgdXAgZW5kc1dpdGhCbGFua0xpbmUgbG9naWNcbiAgICAgICAgICAgIGxpc3QuaXRlbXNbbGlzdC5pdGVtcy5sZW5ndGggLSAxXS5yYXcgPSByYXcudHJpbUVuZCgpO1xuICAgICAgICAgICAgKGxpc3QuaXRlbXNbbGlzdC5pdGVtcy5sZW5ndGggLSAxXSkudGV4dCA9IGl0ZW1Db250ZW50cy50cmltRW5kKCk7XG4gICAgICAgICAgICBsaXN0LnJhdyA9IGxpc3QucmF3LnRyaW1FbmQoKTtcbiAgICAgICAgICAgIC8vIEl0ZW0gY2hpbGQgdG9rZW5zIGhhbmRsZWQgaGVyZSBhdCBlbmQgYmVjYXVzZSB3ZSBuZWVkZWQgdG8gaGF2ZSB0aGUgZmluYWwgaXRlbSB0byB0cmltIGl0IGZpcnN0XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLnRvcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxpc3QuaXRlbXNbaV0udG9rZW5zID0gdGhpcy5sZXhlci5ibG9ja1Rva2VucyhsaXN0Lml0ZW1zW2ldLnRleHQsIFtdKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3QubG9vc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbGlzdCBzaG91bGQgYmUgbG9vc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhY2VycyA9IGxpc3QuaXRlbXNbaV0udG9rZW5zLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc011bHRpcGxlTGluZUJyZWFrcyA9IHNwYWNlcnMubGVuZ3RoID4gMCAmJiBzcGFjZXJzLnNvbWUodCA9PiAvXFxuLipcXG4vLnRlc3QodC5yYXcpKTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5sb29zZSA9IGhhc011bHRpcGxlTGluZUJyZWFrcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgYWxsIGl0ZW1zIHRvIGxvb3NlIGlmIGxpc3QgaXMgbG9vc2VcbiAgICAgICAgICAgIGlmIChsaXN0Lmxvb3NlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3QuaXRlbXNbaV0ubG9vc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGh0bWwoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHRtbC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdodG1sJyxcbiAgICAgICAgICAgICAgICBibG9jazogdHJ1ZSxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBwcmU6IGNhcFsxXSA9PT0gJ3ByZScgfHwgY2FwWzFdID09PSAnc2NyaXB0JyB8fCBjYXBbMV0gPT09ICdzdHlsZScsXG4gICAgICAgICAgICAgICAgdGV4dDogY2FwWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlZihzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5kZWYuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSBjYXBbMV0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgICAgICBjb25zdCBocmVmID0gY2FwWzJdID8gY2FwWzJdLnJlcGxhY2UoL148KC4qKT4kLywgJyQxJykucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbiwgJyQxJykgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnN1YnN0cmluZygxLCBjYXBbM10ubGVuZ3RoIC0gMSkucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbiwgJyQxJykgOiBjYXBbM107XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkZWYnLFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgICAgIHRpdGxlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRhYmxlKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnRhYmxlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKCFjYXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIS9bOnxdLy50ZXN0KGNhcFsyXSkpIHtcbiAgICAgICAgICAgIC8vIGRlbGltaXRlciByb3cgbXVzdCBoYXZlIGEgcGlwZSAofCkgb3IgY29sb24gKDopIG90aGVyd2lzZSBpdCBpcyBhIHNldGV4dCBoZWFkaW5nXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHNwbGl0Q2VsbHMoY2FwWzFdKTtcbiAgICAgICAgY29uc3QgYWxpZ25zID0gY2FwWzJdLnJlcGxhY2UoL15cXHx8XFx8ICokL2csICcnKS5zcGxpdCgnfCcpO1xuICAgICAgICBjb25zdCByb3dzID0gY2FwWzNdICYmIGNhcFszXS50cmltKCkgPyBjYXBbM10ucmVwbGFjZSgvXFxuWyBcXHRdKiQvLCAnJykuc3BsaXQoJ1xcbicpIDogW107XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICBoZWFkZXI6IFtdLFxuICAgICAgICAgICAgYWxpZ246IFtdLFxuICAgICAgICAgICAgcm93czogW11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGhlYWRlcnMubGVuZ3RoICE9PSBhbGlnbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBoZWFkZXIgYW5kIGFsaWduIGNvbHVtbnMgbXVzdCBiZSBlcXVhbCwgcm93cyBjYW4gYmUgZGlmZmVyZW50LlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYWxpZ24gb2YgYWxpZ25zKSB7XG4gICAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChhbGlnbikpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmFsaWduLnB1c2goJ3JpZ2h0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChhbGlnbikpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmFsaWduLnB1c2goJ2NlbnRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChhbGlnbikpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmFsaWduLnB1c2goJ2xlZnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZW0uYWxpZ24ucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBoZWFkZXJzKSB7XG4gICAgICAgICAgICBpdGVtLmhlYWRlci5wdXNoKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZShoZWFkZXIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XG4gICAgICAgICAgICBpdGVtLnJvd3MucHVzaChzcGxpdENlbGxzKHJvdywgaXRlbS5oZWFkZXIubGVuZ3RoKS5tYXAoY2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogY2VsbCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZShjZWxsKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIGxoZWFkaW5nKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmxoZWFkaW5nLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgZGVwdGg6IGNhcFsyXS5jaGFyQXQoMCkgPT09ICc9JyA/IDEgOiAyLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNhcFsxXSxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKGNhcFsxXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYWdyYXBoKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnBhcmFncmFwaC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xcbidcbiAgICAgICAgICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgICAgICAgICA6IGNhcFsxXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKHRleHQpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRleHQoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2sudGV4dC5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lKGNhcFswXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXNjYXBlKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5lc2NhcGUuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdlc2NhcGUnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQ6IGVzY2FwZSQxKGNhcFsxXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFnKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS50YWcuZXhlYyhzcmMpO1xuICAgICAgICBpZiAoY2FwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxleGVyLnN0YXRlLmluTGluayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2sgJiYgL148KHByZXxjb2RlfGtiZHxzY3JpcHQpKFxcc3w+KS9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2sgJiYgL148XFwvKHByZXxjb2RlfGtiZHxzY3JpcHQpKFxcc3w+KS9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgaW5MaW5rOiB0aGlzLmxleGVyLnN0YXRlLmluTGluayxcbiAgICAgICAgICAgICAgICBpblJhd0Jsb2NrOiB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2ssXG4gICAgICAgICAgICAgICAgYmxvY2s6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsaW5rKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5saW5rLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgY29uc3QgdHJpbW1lZFVybCA9IGNhcFsyXS50cmltKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5wZWRhbnRpYyAmJiAvXjwvLnRlc3QodHJpbW1lZFVybCkpIHtcbiAgICAgICAgICAgICAgICAvLyBjb21tb25tYXJrIHJlcXVpcmVzIG1hdGNoaW5nIGFuZ2xlIGJyYWNrZXRzXG4gICAgICAgICAgICAgICAgaWYgKCEoLz4kLy50ZXN0KHRyaW1tZWRVcmwpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVuZGluZyBhbmdsZSBicmFja2V0IGNhbm5vdCBiZSBlc2NhcGVkXG4gICAgICAgICAgICAgICAgY29uc3QgcnRyaW1TbGFzaCA9IHJ0cmltKHRyaW1tZWRVcmwuc2xpY2UoMCwgLTEpLCAnXFxcXCcpO1xuICAgICAgICAgICAgICAgIGlmICgodHJpbW1lZFVybC5sZW5ndGggLSBydHJpbVNsYXNoLmxlbmd0aCkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGNsb3NpbmcgcGFyZW50aGVzaXNcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0UGFyZW5JbmRleCA9IGZpbmRDbG9zaW5nQnJhY2tldChjYXBbMl0sICcoKScpO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0UGFyZW5JbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gY2FwWzBdLmluZGV4T2YoJyEnKSA9PT0gMCA/IDUgOiA0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rTGVuID0gc3RhcnQgKyBjYXBbMV0ubGVuZ3RoICsgbGFzdFBhcmVuSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGNhcFsyXSA9IGNhcFsyXS5zdWJzdHJpbmcoMCwgbGFzdFBhcmVuSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjYXBbMF0gPSBjYXBbMF0uc3Vic3RyaW5nKDAsIGxpbmtMZW4pLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgY2FwWzNdID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGhyZWYgPSBjYXBbMl07XG4gICAgICAgICAgICBsZXQgdGl0bGUgPSAnJztcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGxpdCBwZWRhbnRpYyBocmVmIGFuZCB0aXRsZVxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSAvXihbXidcIl0qW15cXHNdKVxccysoWydcIl0pKC4qKVxcMi8uZXhlYyhocmVmKTtcbiAgICAgICAgICAgICAgICBpZiAobGluaykge1xuICAgICAgICAgICAgICAgICAgICBocmVmID0gbGlua1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBsaW5rWzNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHJlZiA9IGhyZWYudHJpbSgpO1xuICAgICAgICAgICAgaWYgKC9ePC8udGVzdChocmVmKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBlZGFudGljIGFsbG93cyBzdGFydGluZyBhbmdsZSBicmFja2V0IHdpdGhvdXQgZW5kaW5nIGFuZ2xlIGJyYWNrZXRcbiAgICAgICAgICAgICAgICAgICAgaHJlZiA9IGhyZWYuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBocmVmID0gaHJlZi5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgICAgICAgICAgaHJlZjogaHJlZiA/IGhyZWYucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbiwgJyQxJykgOiBocmVmLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSA/IHRpdGxlLnJlcGxhY2UodGhpcy5ydWxlcy5pbmxpbmUuYW55UHVuY3R1YXRpb24sICckMScpIDogdGl0bGVcbiAgICAgICAgICAgIH0sIGNhcFswXSwgdGhpcy5sZXhlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVmbGluayhzcmMsIGxpbmtzKSB7XG4gICAgICAgIGxldCBjYXA7XG4gICAgICAgIGlmICgoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUubm9saW5rLmV4ZWMoc3JjKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtTdHJpbmcgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGxpbmtzW2xpbmtTdHJpbmcudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICBpZiAoIWxpbmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gY2FwWzBdLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0TGluayhjYXAsIGxpbmssIGNhcFswXSwgdGhpcy5sZXhlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1TdHJvbmcoc3JjLCBtYXNrZWRTcmMsIHByZXZDaGFyID0gJycpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmdMRGVsaW0uZXhlYyhzcmMpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBfIGNhbid0IGJlIGJldHdlZW4gdHdvIGFscGhhbnVtZXJpY3MuIFxccHtMfVxccHtOfSBpbmNsdWRlcyBub24tZW5nbGlzaCBhbHBoYWJldC9udW1iZXJzIGFzIHdlbGxcbiAgICAgICAgaWYgKG1hdGNoWzNdICYmIHByZXZDaGFyLm1hdGNoKC9bXFxwe0x9XFxwe059XS91KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV4dENoYXIgPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCAnJztcbiAgICAgICAgaWYgKCFuZXh0Q2hhciB8fCAhcHJldkNoYXIgfHwgdGhpcy5ydWxlcy5pbmxpbmUucHVuY3R1YXRpb24uZXhlYyhwcmV2Q2hhcikpIHtcbiAgICAgICAgICAgIC8vIHVuaWNvZGUgUmVnZXggY291bnRzIGVtb2ppIGFzIDEgY2hhcjsgc3ByZWFkIGludG8gYXJyYXkgZm9yIHByb3BlciBjb3VudCAodXNlZCBtdWx0aXBsZSB0aW1lcyBiZWxvdylcbiAgICAgICAgICAgIGNvbnN0IGxMZW5ndGggPSBbLi4ubWF0Y2hbMF1dLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsZXQgckRlbGltLCByTGVuZ3RoLCBkZWxpbVRvdGFsID0gbExlbmd0aCwgbWlkRGVsaW1Ub3RhbCA9IDA7XG4gICAgICAgICAgICBjb25zdCBlbmRSZWcgPSBtYXRjaFswXVswXSA9PT0gJyonID8gdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmdSRGVsaW1Bc3QgOiB0aGlzLnJ1bGVzLmlubGluZS5lbVN0cm9uZ1JEZWxpbVVuZDtcbiAgICAgICAgICAgIGVuZFJlZy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgLy8gQ2xpcCBtYXNrZWRTcmMgdG8gc2FtZSBzZWN0aW9uIG9mIHN0cmluZyBhcyBzcmMgKG1vdmUgdG8gbGV4ZXI/KVxuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKC0xICogc3JjLmxlbmd0aCArIGxMZW5ndGgpO1xuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IGVuZFJlZy5leGVjKG1hc2tlZFNyYykpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByRGVsaW0gPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBtYXRjaFs2XTtcbiAgICAgICAgICAgICAgICBpZiAoIXJEZWxpbSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgc2luZ2xlICogaW4gX19hYmMqYWJjX19cbiAgICAgICAgICAgICAgICByTGVuZ3RoID0gWy4uLnJEZWxpbV0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFszXSB8fCBtYXRjaFs0XSkgeyAvLyBmb3VuZCBhbm90aGVyIExlZnQgRGVsaW1cbiAgICAgICAgICAgICAgICAgICAgZGVsaW1Ub3RhbCArPSByTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hbNV0gfHwgbWF0Y2hbNl0pIHsgLy8gZWl0aGVyIExlZnQgb3IgUmlnaHQgRGVsaW1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxMZW5ndGggJSAzICYmICEoKGxMZW5ndGggKyByTGVuZ3RoKSAlIDMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWREZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gQ29tbW9uTWFyayBFbXBoYXNpcyBSdWxlcyA5LTEwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsaW1Ub3RhbCAtPSByTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChkZWxpbVRvdGFsID4gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIEhhdmVuJ3QgZm91bmQgZW5vdWdoIGNsb3NpbmcgZGVsaW1pdGVyc1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBleHRyYSBjaGFyYWN0ZXJzLiAqYSoqKiAtPiAqYSpcbiAgICAgICAgICAgICAgICByTGVuZ3RoID0gTWF0aC5taW4ockxlbmd0aCwgckxlbmd0aCArIGRlbGltVG90YWwgKyBtaWREZWxpbVRvdGFsKTtcbiAgICAgICAgICAgICAgICAvLyBjaGFyIGxlbmd0aCBjYW4gYmUgPjEgZm9yIHVuaWNvZGUgY2hhcmFjdGVycztcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0Q2hhckxlbmd0aCA9IFsuLi5tYXRjaFswXV1bMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdyA9IHNyYy5zbGljZSgwLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyBsYXN0Q2hhckxlbmd0aCArIHJMZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBgZW1gIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgb2RkIGNoYXIgY291bnQuICphKioqXG4gICAgICAgICAgICAgICAgaWYgKE1hdGgubWluKGxMZW5ndGgsIHJMZW5ndGgpICUgMikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcmF3LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICByYXcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0KVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgJ3N0cm9uZycgaWYgc21hbGxlc3QgZGVsaW1pdGVyIGhhcyBldmVuIGNoYXIgY291bnQuICoqYSoqKlxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSByYXcuc2xpY2UoMiwgLTIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJvbmcnLFxuICAgICAgICAgICAgICAgICAgICByYXcsXG4gICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmVUb2tlbnModGV4dClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvZGVzcGFuKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5jb2RlLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgbGV0IHRleHQgPSBjYXBbMl0ucmVwbGFjZSgvXFxuL2csICcgJyk7XG4gICAgICAgICAgICBjb25zdCBoYXNOb25TcGFjZUNoYXJzID0gL1teIF0vLnRlc3QodGV4dCk7XG4gICAgICAgICAgICBjb25zdCBoYXNTcGFjZUNoYXJzT25Cb3RoRW5kcyA9IC9eIC8udGVzdCh0ZXh0KSAmJiAvICQvLnRlc3QodGV4dCk7XG4gICAgICAgICAgICBpZiAoaGFzTm9uU3BhY2VDaGFycyAmJiBoYXNTcGFjZUNoYXJzT25Cb3RoRW5kcykge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygxLCB0ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dCA9IGVzY2FwZSQxKHRleHQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29kZXNwYW4nLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnIoc3JjKSB7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmJyLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYnInLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbChzcmMpIHtcbiAgICAgICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuZGVsLmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAgICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjYXBbMl0sXG4gICAgICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2VucyhjYXBbMl0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGF1dG9saW5rKHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5hdXRvbGluay5leGVjKHNyYyk7XG4gICAgICAgIGlmIChjYXApIHtcbiAgICAgICAgICAgIGxldCB0ZXh0LCBocmVmO1xuICAgICAgICAgICAgaWYgKGNhcFsyXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGVzY2FwZSQxKGNhcFsxXSk7XG4gICAgICAgICAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gZXNjYXBlJDEoY2FwWzFdKTtcbiAgICAgICAgICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgICB0b2tlbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cmwoc3JjKSB7XG4gICAgICAgIGxldCBjYXA7XG4gICAgICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS51cmwuZXhlYyhzcmMpKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgICAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICAgICAgICAgIHRleHQgPSBlc2NhcGUkMShjYXBbMF0pO1xuICAgICAgICAgICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZG8gZXh0ZW5kZWQgYXV0b2xpbmsgcGF0aCB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgbGV0IHByZXZDYXBaZXJvO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldkNhcFplcm8gPSBjYXBbMF07XG4gICAgICAgICAgICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuaW5saW5lLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pPy5bMF0gPz8gJyc7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAocHJldkNhcFplcm8gIT09IGNhcFswXSk7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGVzY2FwZSQxKGNhcFswXSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcFsxXSA9PT0gJ3d3dy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGhyZWYgPSAnaHR0cDovLycgKyBjYXBbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBocmVmID0gY2FwWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICAgICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgICAgICB0b2tlbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmxpbmVUZXh0KHNyYykge1xuICAgICAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS50ZXh0LmV4ZWMoc3JjKTtcbiAgICAgICAgaWYgKGNhcCkge1xuICAgICAgICAgICAgbGV0IHRleHQ7XG4gICAgICAgICAgICBpZiAodGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGNhcFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBlc2NhcGUkMShjYXBbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBCbG9jay1MZXZlbCBHcmFtbWFyXG4gKi9cbmNvbnN0IG5ld2xpbmUgPSAvXig/OiAqKD86XFxufCQpKSsvO1xuY29uc3QgYmxvY2tDb2RlID0gL14oIHs0fVteXFxuXSsoPzpcXG4oPzogKig/OlxcbnwkKSkqKT8pKy87XG5jb25zdCBmZW5jZXMgPSAvXiB7MCwzfShgezMsfSg/PVteYFxcbl0qKD86XFxufCQpKXx+ezMsfSkoW15cXG5dKikoPzpcXG58JCkoPzp8KFtcXHNcXFNdKj8pKD86XFxufCQpKSg/OiB7MCwzfVxcMVt+YF0qICooPz1cXG58JCl8JCkvO1xuY29uc3QgaHIgPSAvXiB7MCwzfSgoPzotW1xcdCBdKil7Myx9fCg/Ol9bIFxcdF0qKXszLH18KD86XFwqWyBcXHRdKil7Myx9KSg/Olxcbit8JCkvO1xuY29uc3QgaGVhZGluZyA9IC9eIHswLDN9KCN7MSw2fSkoPz1cXHN8JCkoLiopKD86XFxuK3wkKS87XG5jb25zdCBidWxsZXQgPSAvKD86WyorLV18XFxkezEsOX1bLildKS87XG5jb25zdCBsaGVhZGluZyA9IGVkaXQoL14oPyFidWxsIHxibG9ja0NvZGV8ZmVuY2VzfGJsb2NrcXVvdGV8aGVhZGluZ3xodG1sKSgoPzoufFxcbig/IVxccyo/XFxufGJ1bGwgfGJsb2NrQ29kZXxmZW5jZXN8YmxvY2txdW90ZXxoZWFkaW5nfGh0bWwpKSs/KVxcbiB7MCwzfSg9K3wtKykgKig/Olxcbit8JCkvKVxuICAgIC5yZXBsYWNlKC9idWxsL2csIGJ1bGxldCkgLy8gbGlzdHMgY2FuIGludGVycnVwdFxuICAgIC5yZXBsYWNlKC9ibG9ja0NvZGUvZywgLyB7NH0vKSAvLyBpbmRlbnRlZCBjb2RlIGJsb2NrcyBjYW4gaW50ZXJydXB0XG4gICAgLnJlcGxhY2UoL2ZlbmNlcy9nLCAvIHswLDN9KD86YHszLH18fnszLH0pLykgLy8gZmVuY2VkIGNvZGUgYmxvY2tzIGNhbiBpbnRlcnJ1cHRcbiAgICAucmVwbGFjZSgvYmxvY2txdW90ZS9nLCAvIHswLDN9Pi8pIC8vIGJsb2NrcXVvdGUgY2FuIGludGVycnVwdFxuICAgIC5yZXBsYWNlKC9oZWFkaW5nL2csIC8gezAsM30jezEsNn0vKSAvLyBBVFggaGVhZGluZyBjYW4gaW50ZXJydXB0XG4gICAgLnJlcGxhY2UoL2h0bWwvZywgLyB7MCwzfTxbXlxcbj5dKz5cXG4vKSAvLyBibG9jayBodG1sIGNhbiBpbnRlcnJ1cHRcbiAgICAuZ2V0UmVnZXgoKTtcbmNvbnN0IF9wYXJhZ3JhcGggPSAvXihbXlxcbl0rKD86XFxuKD8haHJ8aGVhZGluZ3xsaGVhZGluZ3xibG9ja3F1b3RlfGZlbmNlc3xsaXN0fGh0bWx8dGFibGV8ICtcXG4pW15cXG5dKykqKS87XG5jb25zdCBibG9ja1RleHQgPSAvXlteXFxuXSsvO1xuY29uc3QgX2Jsb2NrTGFiZWwgPSAvKD8hXFxzKlxcXSkoPzpcXFxcLnxbXlxcW1xcXVxcXFxdKSsvO1xuY29uc3QgZGVmID0gZWRpdCgvXiB7MCwzfVxcWyhsYWJlbClcXF06ICooPzpcXG4gKik/KFtePFxcc11bXlxcc10qfDwuKj8+KSg/Oig/OiArKD86XFxuICopP3wgKlxcbiAqKSh0aXRsZSkpPyAqKD86XFxuK3wkKS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgX2Jsb2NrTGFiZWwpXG4gICAgLnJlcGxhY2UoJ3RpdGxlJywgLyg/OlwiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCdbXidcXG5dKig/OlxcblteJ1xcbl0rKSpcXG4/J3xcXChbXigpXSpcXCkpLylcbiAgICAuZ2V0UmVnZXgoKTtcbmNvbnN0IGxpc3QgPSBlZGl0KC9eKCB7MCwzfWJ1bGwpKFsgXFx0XVteXFxuXSs/KT8oPzpcXG58JCkvKVxuICAgIC5yZXBsYWNlKC9idWxsL2csIGJ1bGxldClcbiAgICAuZ2V0UmVnZXgoKTtcbmNvbnN0IF90YWcgPSAnYWRkcmVzc3xhcnRpY2xlfGFzaWRlfGJhc2V8YmFzZWZvbnR8YmxvY2txdW90ZXxib2R5fGNhcHRpb24nXG4gICAgKyAnfGNlbnRlcnxjb2x8Y29sZ3JvdXB8ZGR8ZGV0YWlsc3xkaWFsb2d8ZGlyfGRpdnxkbHxkdHxmaWVsZHNldHxmaWdjYXB0aW9uJ1xuICAgICsgJ3xmaWd1cmV8Zm9vdGVyfGZvcm18ZnJhbWV8ZnJhbWVzZXR8aFsxLTZdfGhlYWR8aGVhZGVyfGhyfGh0bWx8aWZyYW1lJ1xuICAgICsgJ3xsZWdlbmR8bGl8bGlua3xtYWlufG1lbnV8bWVudWl0ZW18bWV0YXxuYXZ8bm9mcmFtZXN8b2x8b3B0Z3JvdXB8b3B0aW9uJ1xuICAgICsgJ3xwfHBhcmFtfHNlYXJjaHxzZWN0aW9ufHN1bW1hcnl8dGFibGV8dGJvZHl8dGR8dGZvb3R8dGh8dGhlYWR8dGl0bGUnXG4gICAgKyAnfHRyfHRyYWNrfHVsJztcbmNvbnN0IF9jb21tZW50ID0gLzwhLS0oPzotPz58W1xcc1xcU10qPyg/Oi0tPnwkKSkvO1xuY29uc3QgaHRtbCA9IGVkaXQoJ14gezAsM30oPzonIC8vIG9wdGlvbmFsIGluZGVudGF0aW9uXG4gICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgKyAnfGNvbW1lbnRbXlxcXFxuXSooXFxcXG4rfCQpJyAvLyAoMilcbiAgICArICd8PFxcXFw/W1xcXFxzXFxcXFNdKj8oPzpcXFxcPz5cXFxcbip8JCknIC8vICgzKVxuICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8oPzo+XFxcXG4qfCQpJyAvLyAoNClcbiAgICArICd8PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qPyg/OlxcXFxdXFxcXF0+XFxcXG4qfCQpJyAvLyAoNSlcbiAgICArICd8PC8/KHRhZykoPzogK3xcXFxcbnwvPz4pW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDYpXG4gICAgKyAnfDwoPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKShbYS16XVtcXFxcdy1dKikoPzphdHRyaWJ1dGUpKj8gKi8/Pig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICsgJ3w8Lyg/IXNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWEpW2Etel1bXFxcXHctXSpcXFxccyo+KD89WyBcXFxcdF0qKD86XFxcXG58JCkpW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDcpIGNsb3NpbmcgdGFnXG4gICAgKyAnKScsICdpJylcbiAgICAucmVwbGFjZSgnY29tbWVudCcsIF9jb21tZW50KVxuICAgIC5yZXBsYWNlKCd0YWcnLCBfdGFnKVxuICAgIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvICtbYS16QS1aOl9dW1xcdy46LV0qKD86ICo9ICpcIlteXCJcXG5dKlwifCAqPSAqJ1teJ1xcbl0qJ3wgKj0gKlteXFxzXCInPTw+YF0rKT8vKVxuICAgIC5nZXRSZWdleCgpO1xuY29uc3QgcGFyYWdyYXBoID0gZWRpdChfcGFyYWdyYXBoKVxuICAgIC5yZXBsYWNlKCdocicsIGhyKVxuICAgIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSg/OlxcXFxzfCQpJylcbiAgICAucmVwbGFjZSgnfGxoZWFkaW5nJywgJycpIC8vIHNldGV4dCBoZWFkaW5ncyBkb24ndCBpbnRlcnJ1cHQgY29tbW9ubWFyayBwYXJhZ3JhcGhzXG4gICAgLnJlcGxhY2UoJ3x0YWJsZScsICcnKVxuICAgIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAgIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAgIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKVxuICAgIC5yZXBsYWNlKCd0YWcnLCBfdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAgIC5nZXRSZWdleCgpO1xuY29uc3QgYmxvY2txdW90ZSA9IGVkaXQoL14oIHswLDN9PiA/KHBhcmFncmFwaHxbXlxcbl0qKSg/OlxcbnwkKSkrLylcbiAgICAucmVwbGFjZSgncGFyYWdyYXBoJywgcGFyYWdyYXBoKVxuICAgIC5nZXRSZWdleCgpO1xuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5jb25zdCBibG9ja05vcm1hbCA9IHtcbiAgICBibG9ja3F1b3RlLFxuICAgIGNvZGU6IGJsb2NrQ29kZSxcbiAgICBkZWYsXG4gICAgZmVuY2VzLFxuICAgIGhlYWRpbmcsXG4gICAgaHIsXG4gICAgaHRtbCxcbiAgICBsaGVhZGluZyxcbiAgICBsaXN0LFxuICAgIG5ld2xpbmUsXG4gICAgcGFyYWdyYXBoLFxuICAgIHRhYmxlOiBub29wVGVzdCxcbiAgICB0ZXh0OiBibG9ja1RleHRcbn07XG4vKipcbiAqIEdGTSBCbG9jayBHcmFtbWFyXG4gKi9cbmNvbnN0IGdmbVRhYmxlID0gZWRpdCgnXiAqKFteXFxcXG4gXS4qKVxcXFxuJyAvLyBIZWFkZXJcbiAgICArICcgezAsM30oKD86XFxcXHwgKik/Oj8tKzo/ICooPzpcXFxcfCAqOj8tKzo/ICopKig/OlxcXFx8ICopPyknIC8vIEFsaWduXG4gICAgKyAnKD86XFxcXG4oKD86KD8hICpcXFxcbnxocnxoZWFkaW5nfGJsb2NrcXVvdGV8Y29kZXxmZW5jZXN8bGlzdHxodG1sKS4qKD86XFxcXG58JCkpKilcXFxcbip8JCknKSAvLyBDZWxsc1xuICAgIC5yZXBsYWNlKCdocicsIGhyKVxuICAgIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSg/OlxcXFxzfCQpJylcbiAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAucmVwbGFjZSgnY29kZScsICcgezR9W15cXFxcbl0nKVxuICAgIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAgIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKVxuICAgIC5yZXBsYWNlKCd0YWcnLCBfdGFnKSAvLyB0YWJsZXMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gICAgLmdldFJlZ2V4KCk7XG5jb25zdCBibG9ja0dmbSA9IHtcbiAgICAuLi5ibG9ja05vcm1hbCxcbiAgICB0YWJsZTogZ2ZtVGFibGUsXG4gICAgcGFyYWdyYXBoOiBlZGl0KF9wYXJhZ3JhcGgpXG4gICAgICAgIC5yZXBsYWNlKCdocicsIGhyKVxuICAgICAgICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0oPzpcXFxcc3wkKScpXG4gICAgICAgIC5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXh0IGhlYWRpbmdzIGRvbid0IGludGVycnVwdCBjb21tb25tYXJrIHBhcmFncmFwaHNcbiAgICAgICAgLnJlcGxhY2UoJ3RhYmxlJywgZ2ZtVGFibGUpIC8vIGludGVycnVwdCBwYXJhZ3JhcGhzIHdpdGggdGFibGVcbiAgICAgICAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gICAgICAgIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgICAgICAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgICAgICAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpXG4gICAgICAgIC5yZXBsYWNlKCd0YWcnLCBfdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAgICAgICAuZ2V0UmVnZXgoKVxufTtcbi8qKlxuICogUGVkYW50aWMgZ3JhbW1hciAob3JpZ2luYWwgSm9obiBHcnViZXIncyBsb29zZSBtYXJrZG93biBzcGVjaWZpY2F0aW9uKVxuICovXG5jb25zdCBibG9ja1BlZGFudGljID0ge1xuICAgIC4uLmJsb2NrTm9ybWFsLFxuICAgIGh0bWw6IGVkaXQoJ14gKig/OmNvbW1lbnQgKig/OlxcXFxufFxcXFxzKiQpJ1xuICAgICAgICArICd8PCh0YWcpW1xcXFxzXFxcXFNdKz88L1xcXFwxPiAqKD86XFxcXG57Mix9fFxcXFxzKiQpJyAvLyBjbG9zZWQgdGFnXG4gICAgICAgICsgJ3w8dGFnKD86XCJbXlwiXSpcInxcXCdbXlxcJ10qXFwnfFxcXFxzW15cXCdcIi8+XFxcXHNdKikqPy8/PiAqKD86XFxcXG57Mix9fFxcXFxzKiQpKScpXG4gICAgICAgIC5yZXBsYWNlKCdjb21tZW50JywgX2NvbW1lbnQpXG4gICAgICAgIC5yZXBsYWNlKC90YWcvZywgJyg/ISg/OidcbiAgICAgICAgKyAnYXxlbXxzdHJvbmd8c21hbGx8c3xjaXRlfHF8ZGZufGFiYnJ8ZGF0YXx0aW1lfGNvZGV8dmFyfHNhbXB8a2JkfHN1YidcbiAgICAgICAgKyAnfHN1cHxpfGJ8dXxtYXJrfHJ1Ynl8cnR8cnB8YmRpfGJkb3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZyknXG4gICAgICAgICsgJ1xcXFxiKVxcXFx3Kyg/ITp8W15cXFxcd1xcXFxzQF0qQClcXFxcYicpXG4gICAgICAgIC5nZXRSZWdleCgpLFxuICAgIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICsoW1wiKF1bXlxcbl0rW1wiKV0pKT8gKig/Olxcbit8JCkvLFxuICAgIGhlYWRpbmc6IC9eKCN7MSw2fSkoLiopKD86XFxuK3wkKS8sXG4gICAgZmVuY2VzOiBub29wVGVzdCwgLy8gZmVuY2VzIG5vdCBzdXBwb3J0ZWRcbiAgICBsaGVhZGluZzogL14oLis/KVxcbiB7MCwzfSg9K3wtKykgKig/Olxcbit8JCkvLFxuICAgIHBhcmFncmFwaDogZWRpdChfcGFyYWdyYXBoKVxuICAgICAgICAucmVwbGFjZSgnaHInLCBocilcbiAgICAgICAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnICojezEsNn0gKlteXFxuXScpXG4gICAgICAgIC5yZXBsYWNlKCdsaGVhZGluZycsIGxoZWFkaW5nKVxuICAgICAgICAucmVwbGFjZSgnfHRhYmxlJywgJycpXG4gICAgICAgIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAgICAgICAucmVwbGFjZSgnfGZlbmNlcycsICcnKVxuICAgICAgICAucmVwbGFjZSgnfGxpc3QnLCAnJylcbiAgICAgICAgLnJlcGxhY2UoJ3xodG1sJywgJycpXG4gICAgICAgIC5yZXBsYWNlKCd8dGFnJywgJycpXG4gICAgICAgIC5nZXRSZWdleCgpXG59O1xuLyoqXG4gKiBJbmxpbmUtTGV2ZWwgR3JhbW1hclxuICovXG5jb25zdCBlc2NhcGUgPSAvXlxcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pLztcbmNvbnN0IGlubGluZUNvZGUgPSAvXihgKykoW15gXXxbXmBdW1xcc1xcU10qP1teYF0pXFwxKD8hYCkvO1xuY29uc3QgYnIgPSAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS87XG5jb25zdCBpbmxpbmVUZXh0ID0gL14oYCt8W15gXSkoPzooPz0gezIsfVxcbil8W1xcc1xcU10qPyg/Oig/PVtcXFxcPCFcXFtgKl9dfFxcYl98JCl8W14gXSg/PSB7Mix9XFxuKSkpLztcbi8vIGxpc3Qgb2YgdW5pY29kZSBwdW5jdHVhdGlvbiBtYXJrcywgcGx1cyBhbnkgbWlzc2luZyBjaGFyYWN0ZXJzIGZyb20gQ29tbW9uTWFyayBzcGVjXG5jb25zdCBfcHVuY3R1YXRpb24gPSAnXFxcXHB7UH1cXFxccHtTfSc7XG5jb25zdCBwdW5jdHVhdGlvbiA9IGVkaXQoL14oKD8hWypfXSlbXFxzcHVuY3R1YXRpb25dKS8sICd1JylcbiAgICAucmVwbGFjZSgvcHVuY3R1YXRpb24vZywgX3B1bmN0dWF0aW9uKS5nZXRSZWdleCgpO1xuLy8gc2VxdWVuY2VzIGVtIHNob3VsZCBza2lwIG92ZXIgW3RpdGxlXShsaW5rKSwgYGNvZGVgLCA8aHRtbD5cbmNvbnN0IGJsb2NrU2tpcCA9IC9cXFtbXltcXF1dKj9cXF1cXChbXlxcKFxcKV0qP1xcKXxgW15gXSo/YHw8W148Pl0qPz4vZztcbmNvbnN0IGVtU3Ryb25nTERlbGltID0gZWRpdCgvXig/OlxcKisoPzooKD8hXFwqKVtwdW5jdF0pfFteXFxzKl0pKXxeXysoPzooKD8hXylbcHVuY3RdKXwoW15cXHNfXSkpLywgJ3UnKVxuICAgIC5yZXBsYWNlKC9wdW5jdC9nLCBfcHVuY3R1YXRpb24pXG4gICAgLmdldFJlZ2V4KCk7XG5jb25zdCBlbVN0cm9uZ1JEZWxpbUFzdCA9IGVkaXQoJ15bXl8qXSo/X19bXl8qXSo/XFxcXCpbXl8qXSo/KD89X18pJyAvLyBTa2lwIG9ycGhhbiBpbnNpZGUgc3Ryb25nXG4gICAgKyAnfFteKl0rKD89W14qXSknIC8vIENvbnN1bWUgdG8gZGVsaW1cbiAgICArICd8KD8hXFxcXCopW3B1bmN0XShcXFxcKispKD89W1xcXFxzXXwkKScgLy8gKDEpICMqKiogY2FuIG9ubHkgYmUgYSBSaWdodCBEZWxpbWl0ZXJcbiAgICArICd8W15wdW5jdFxcXFxzXShcXFxcKispKD8hXFxcXCopKD89W3B1bmN0XFxcXHNdfCQpJyAvLyAoMikgYSoqKiMsIGEqKiogY2FuIG9ubHkgYmUgYSBSaWdodCBEZWxpbWl0ZXJcbiAgICArICd8KD8hXFxcXCopW3B1bmN0XFxcXHNdKFxcXFwqKykoPz1bXnB1bmN0XFxcXHNdKScgLy8gKDMpICMqKiphLCAqKiphIGNhbiBvbmx5IGJlIExlZnQgRGVsaW1pdGVyXG4gICAgKyAnfFtcXFxcc10oXFxcXCorKSg/IVxcXFwqKSg/PVtwdW5jdF0pJyAvLyAoNCkgKioqIyBjYW4gb25seSBiZSBMZWZ0IERlbGltaXRlclxuICAgICsgJ3woPyFcXFxcKilbcHVuY3RdKFxcXFwqKykoPyFcXFxcKikoPz1bcHVuY3RdKScgLy8gKDUpICMqKiojIGNhbiBiZSBlaXRoZXIgTGVmdCBvciBSaWdodCBEZWxpbWl0ZXJcbiAgICArICd8W15wdW5jdFxcXFxzXShcXFxcKispKD89W15wdW5jdFxcXFxzXSknLCAnZ3UnKSAvLyAoNikgYSoqKmEgY2FuIGJlIGVpdGhlciBMZWZ0IG9yIFJpZ2h0IERlbGltaXRlclxuICAgIC5yZXBsYWNlKC9wdW5jdC9nLCBfcHVuY3R1YXRpb24pXG4gICAgLmdldFJlZ2V4KCk7XG4vLyAoNikgTm90IGFsbG93ZWQgZm9yIF9cbmNvbnN0IGVtU3Ryb25nUkRlbGltVW5kID0gZWRpdCgnXlteXypdKj9cXFxcKlxcXFwqW15fKl0qP19bXl8qXSo/KD89XFxcXCpcXFxcKiknIC8vIFNraXAgb3JwaGFuIGluc2lkZSBzdHJvbmdcbiAgICArICd8W15fXSsoPz1bXl9dKScgLy8gQ29uc3VtZSB0byBkZWxpbVxuICAgICsgJ3woPyFfKVtwdW5jdF0oXyspKD89W1xcXFxzXXwkKScgLy8gKDEpICNfX18gY2FuIG9ubHkgYmUgYSBSaWdodCBEZWxpbWl0ZXJcbiAgICArICd8W15wdW5jdFxcXFxzXShfKykoPyFfKSg/PVtwdW5jdFxcXFxzXXwkKScgLy8gKDIpIGFfX18jLCBhX19fIGNhbiBvbmx5IGJlIGEgUmlnaHQgRGVsaW1pdGVyXG4gICAgKyAnfCg/IV8pW3B1bmN0XFxcXHNdKF8rKSg/PVtecHVuY3RcXFxcc10pJyAvLyAoMykgI19fX2EsIF9fX2EgY2FuIG9ubHkgYmUgTGVmdCBEZWxpbWl0ZXJcbiAgICArICd8W1xcXFxzXShfKykoPyFfKSg/PVtwdW5jdF0pJyAvLyAoNCkgX19fIyBjYW4gb25seSBiZSBMZWZ0IERlbGltaXRlclxuICAgICsgJ3woPyFfKVtwdW5jdF0oXyspKD8hXykoPz1bcHVuY3RdKScsICdndScpIC8vICg1KSAjX19fIyBjYW4gYmUgZWl0aGVyIExlZnQgb3IgUmlnaHQgRGVsaW1pdGVyXG4gICAgLnJlcGxhY2UoL3B1bmN0L2csIF9wdW5jdHVhdGlvbilcbiAgICAuZ2V0UmVnZXgoKTtcbmNvbnN0IGFueVB1bmN0dWF0aW9uID0gZWRpdCgvXFxcXChbcHVuY3RdKS8sICdndScpXG4gICAgLnJlcGxhY2UoL3B1bmN0L2csIF9wdW5jdHVhdGlvbilcbiAgICAuZ2V0UmVnZXgoKTtcbmNvbnN0IGF1dG9saW5rID0gZWRpdCgvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vKVxuICAgIC5yZXBsYWNlKCdzY2hlbWUnLCAvW2EtekEtWl1bYS16QS1aMC05Ky4tXXsxLDMxfS8pXG4gICAgLnJlcGxhY2UoJ2VtYWlsJywgL1thLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rKEApW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSsoPyFbLV9dKS8pXG4gICAgLmdldFJlZ2V4KCk7XG5jb25zdCBfaW5saW5lQ29tbWVudCA9IGVkaXQoX2NvbW1lbnQpLnJlcGxhY2UoJyg/Oi0tPnwkKScsICctLT4nKS5nZXRSZWdleCgpO1xuY29uc3QgdGFnID0gZWRpdCgnXmNvbW1lbnQnXG4gICAgKyAnfF48L1thLXpBLVpdW1xcXFx3Oi1dKlxcXFxzKj4nIC8vIHNlbGYtY2xvc2luZyB0YWdcbiAgICArICd8XjxbYS16QS1aXVtcXFxcdy1dKig/OmF0dHJpYnV0ZSkqP1xcXFxzKi8/PicgLy8gb3BlbiB0YWdcbiAgICArICd8XjxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+JyAvLyBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBlLmcuIDw/cGhwID8+XG4gICAgKyAnfF48IVthLXpBLVpdK1xcXFxzW1xcXFxzXFxcXFNdKj8+JyAvLyBkZWNsYXJhdGlvbiwgZS5nLiA8IURPQ1RZUEUgaHRtbD5cbiAgICArICd8XjwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPicpIC8vIENEQVRBIHNlY3Rpb25cbiAgICAucmVwbGFjZSgnY29tbWVudCcsIF9pbmxpbmVDb21tZW50KVxuICAgIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvXFxzK1thLXpBLVo6X11bXFx3LjotXSooPzpcXHMqPVxccypcIlteXCJdKlwifFxccyo9XFxzKidbXiddKid8XFxzKj1cXHMqW15cXHNcIic9PD5gXSspPy8pXG4gICAgLmdldFJlZ2V4KCk7XG5jb25zdCBfaW5saW5lTGFiZWwgPSAvKD86XFxbKD86XFxcXC58W15cXFtcXF1cXFxcXSkqXFxdfFxcXFwufGBbXmBdKmB8W15cXFtcXF1cXFxcYF0pKj8vO1xuY29uc3QgbGluayA9IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXChcXHMqKGhyZWYpKD86XFxzKyh0aXRsZSkpP1xccypcXCkvKVxuICAgIC5yZXBsYWNlKCdsYWJlbCcsIF9pbmxpbmVMYWJlbClcbiAgICAucmVwbGFjZSgnaHJlZicsIC88KD86XFxcXC58W15cXG48PlxcXFxdKSs+fFteXFxzXFx4MDAtXFx4MWZdKi8pXG4gICAgLnJlcGxhY2UoJ3RpdGxlJywgL1wiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCcoPzpcXFxcJz98W14nXFxcXF0pKid8XFwoKD86XFxcXFxcKT98W14pXFxcXF0pKlxcKS8pXG4gICAgLmdldFJlZ2V4KCk7XG5jb25zdCByZWZsaW5rID0gZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcWyhyZWYpXFxdLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBfaW5saW5lTGFiZWwpXG4gICAgLnJlcGxhY2UoJ3JlZicsIF9ibG9ja0xhYmVsKVxuICAgIC5nZXRSZWdleCgpO1xuY29uc3Qgbm9saW5rID0gZWRpdCgvXiE/XFxbKHJlZilcXF0oPzpcXFtcXF0pPy8pXG4gICAgLnJlcGxhY2UoJ3JlZicsIF9ibG9ja0xhYmVsKVxuICAgIC5nZXRSZWdleCgpO1xuY29uc3QgcmVmbGlua1NlYXJjaCA9IGVkaXQoJ3JlZmxpbmt8bm9saW5rKD8hXFxcXCgpJywgJ2cnKVxuICAgIC5yZXBsYWNlKCdyZWZsaW5rJywgcmVmbGluaylcbiAgICAucmVwbGFjZSgnbm9saW5rJywgbm9saW5rKVxuICAgIC5nZXRSZWdleCgpO1xuLyoqXG4gKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAqL1xuY29uc3QgaW5saW5lTm9ybWFsID0ge1xuICAgIF9iYWNrcGVkYWw6IG5vb3BUZXN0LCAvLyBvbmx5IHVzZWQgZm9yIEdGTSB1cmxcbiAgICBhbnlQdW5jdHVhdGlvbixcbiAgICBhdXRvbGluayxcbiAgICBibG9ja1NraXAsXG4gICAgYnIsXG4gICAgY29kZTogaW5saW5lQ29kZSxcbiAgICBkZWw6IG5vb3BUZXN0LFxuICAgIGVtU3Ryb25nTERlbGltLFxuICAgIGVtU3Ryb25nUkRlbGltQXN0LFxuICAgIGVtU3Ryb25nUkRlbGltVW5kLFxuICAgIGVzY2FwZSxcbiAgICBsaW5rLFxuICAgIG5vbGluayxcbiAgICBwdW5jdHVhdGlvbixcbiAgICByZWZsaW5rLFxuICAgIHJlZmxpbmtTZWFyY2gsXG4gICAgdGFnLFxuICAgIHRleHQ6IGlubGluZVRleHQsXG4gICAgdXJsOiBub29wVGVzdFxufTtcbi8qKlxuICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAqL1xuY29uc3QgaW5saW5lUGVkYW50aWMgPSB7XG4gICAgLi4uaW5saW5lTm9ybWFsLFxuICAgIGxpbms6IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXCgoLio/KVxcKS8pXG4gICAgICAgIC5yZXBsYWNlKCdsYWJlbCcsIF9pbmxpbmVMYWJlbClcbiAgICAgICAgLmdldFJlZ2V4KCksXG4gICAgcmVmbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxccypcXFsoW15cXF1dKilcXF0vKVxuICAgICAgICAucmVwbGFjZSgnbGFiZWwnLCBfaW5saW5lTGFiZWwpXG4gICAgICAgIC5nZXRSZWdleCgpXG59O1xuLyoqXG4gKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAqL1xuY29uc3QgaW5saW5lR2ZtID0ge1xuICAgIC4uLmlubGluZU5vcm1hbCxcbiAgICBlc2NhcGU6IGVkaXQoZXNjYXBlKS5yZXBsYWNlKCddKScsICd+fF0pJykuZ2V0UmVnZXgoKSxcbiAgICB1cmw6IGVkaXQoL14oKD86ZnRwfGh0dHBzPyk6XFwvXFwvfHd3d1xcLikoPzpbYS16QS1aMC05XFwtXStcXC4/KStbXlxcczxdKnxeZW1haWwvLCAnaScpXG4gICAgICAgIC5yZXBsYWNlKCdlbWFpbCcsIC9bQS1aYS16MC05Ll8rLV0rKEApW2EtekEtWjAtOS1fXSsoPzpcXC5bYS16QS1aMC05LV9dKlthLXpBLVowLTldKSsoPyFbLV9dKS8pXG4gICAgICAgIC5nZXRSZWdleCgpLFxuICAgIF9iYWNrcGVkYWw6IC8oPzpbXj8hLiw6OypfJ1wifigpJl0rfFxcKFteKV0qXFwpfCYoPyFbYS16QS1aMC05XSs7JCl8Wz8hLiw6OypfJ1wifildKyg/ISQpKSsvLFxuICAgIGRlbDogL14ofn4/KSg/PVteXFxzfl0pKFtcXHNcXFNdKj9bXlxcc35dKVxcMSg/PVtefl18JCkvLFxuICAgIHRleHQ6IC9eKFtgfl0rfFteYH5dKSg/Oig/PSB7Mix9XFxuKXwoPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCp+X118XFxiX3xodHRwcz86XFwvXFwvfGZ0cDpcXC9cXC98d3d3XFwufCQpfFteIF0oPz0gezIsfVxcbil8W15hLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0oPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApKSkvXG59O1xuLyoqXG4gKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICovXG5jb25zdCBpbmxpbmVCcmVha3MgPSB7XG4gICAgLi4uaW5saW5lR2ZtLFxuICAgIGJyOiBlZGl0KGJyKS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpLFxuICAgIHRleHQ6IGVkaXQoaW5saW5lR2ZtLnRleHQpXG4gICAgICAgIC5yZXBsYWNlKCdcXFxcYl8nLCAnXFxcXGJffCB7Mix9XFxcXG4nKVxuICAgICAgICAucmVwbGFjZSgvXFx7MixcXH0vZywgJyonKVxuICAgICAgICAuZ2V0UmVnZXgoKVxufTtcbi8qKlxuICogZXhwb3J0c1xuICovXG5jb25zdCBibG9jayA9IHtcbiAgICBub3JtYWw6IGJsb2NrTm9ybWFsLFxuICAgIGdmbTogYmxvY2tHZm0sXG4gICAgcGVkYW50aWM6IGJsb2NrUGVkYW50aWNcbn07XG5jb25zdCBpbmxpbmUgPSB7XG4gICAgbm9ybWFsOiBpbmxpbmVOb3JtYWwsXG4gICAgZ2ZtOiBpbmxpbmVHZm0sXG4gICAgYnJlYWtzOiBpbmxpbmVCcmVha3MsXG4gICAgcGVkYW50aWM6IGlubGluZVBlZGFudGljXG59O1xuXG4vKipcbiAqIEJsb2NrIExleGVyXG4gKi9cbmNsYXNzIF9MZXhlciB7XG4gICAgdG9rZW5zO1xuICAgIG9wdGlvbnM7XG4gICAgc3RhdGU7XG4gICAgdG9rZW5pemVyO1xuICAgIGlubGluZVF1ZXVlO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gVG9rZW5MaXN0IGNhbm5vdCBiZSBjcmVhdGVkIGluIG9uZSBnb1xuICAgICAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgICAgICB0aGlzLnRva2Vucy5saW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgX2RlZmF1bHRzO1xuICAgICAgICB0aGlzLm9wdGlvbnMudG9rZW5pemVyID0gdGhpcy5vcHRpb25zLnRva2VuaXplciB8fCBuZXcgX1Rva2VuaXplcigpO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRoaXMub3B0aW9ucy50b2tlbml6ZXI7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLmxleGVyID0gdGhpcztcbiAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaW5MaW5rOiBmYWxzZSxcbiAgICAgICAgICAgIGluUmF3QmxvY2s6IGZhbHNlLFxuICAgICAgICAgICAgdG9wOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJ1bGVzID0ge1xuICAgICAgICAgICAgYmxvY2s6IGJsb2NrLm5vcm1hbCxcbiAgICAgICAgICAgIGlubGluZTogaW5saW5lLm5vcm1hbFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICBydWxlcy5ibG9jayA9IGJsb2NrLnBlZGFudGljO1xuICAgICAgICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLnBlZGFudGljO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICAgICAgICAgIHJ1bGVzLmJsb2NrID0gYmxvY2suZ2ZtO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgICAgICAgICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUuYnJlYWtzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLmdmbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRva2VuaXplci5ydWxlcyA9IHJ1bGVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBvc2UgUnVsZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHJ1bGVzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIExleCBNZXRob2RcbiAgICAgKi9cbiAgICBzdGF0aWMgbGV4KHNyYywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZXhlciA9IG5ldyBfTGV4ZXIob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBsZXhlci5sZXgoc3JjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIExleCBJbmxpbmUgTWV0aG9kXG4gICAgICovXG4gICAgc3RhdGljIGxleElubGluZShzcmMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGV4ZXIgPSBuZXcgX0xleGVyKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbGV4ZXIuaW5saW5lVG9rZW5zKHNyYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByZXByb2Nlc3NpbmdcbiAgICAgKi9cbiAgICBsZXgoc3JjKSB7XG4gICAgICAgIHNyYyA9IHNyY1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpO1xuICAgICAgICB0aGlzLmJsb2NrVG9rZW5zKHNyYywgdGhpcy50b2tlbnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5saW5lUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmlubGluZVF1ZXVlW2ldO1xuICAgICAgICAgICAgdGhpcy5pbmxpbmVUb2tlbnMobmV4dC5zcmMsIG5leHQudG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlubGluZVF1ZXVlID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgICB9XG4gICAgYmxvY2tUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFx0L2csICcgICAgJykucmVwbGFjZSgvXiArJC9nbSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3JjID0gc3JjLnJlcGxhY2UoL14oICopKFxcdCspL2dtLCAoXywgbGVhZGluZywgdGFicykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWFkaW5nICsgJyAgICAnLnJlcGVhdCh0YWJzLmxlbmd0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9rZW47XG4gICAgICAgIGxldCBsYXN0VG9rZW47XG4gICAgICAgIGxldCBjdXRTcmM7XG4gICAgICAgIGxldCBsYXN0UGFyYWdyYXBoQ2xpcHBlZDtcbiAgICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2tcbiAgICAgICAgICAgICAgICAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5ibG9jay5zb21lKChleHRUb2tlbml6ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuID0gZXh0VG9rZW5pemVyLmNhbGwoeyBsZXhlcjogdGhpcyB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5ld2xpbmVcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnNwYWNlKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5yYXcubGVuZ3RoID09PSAxICYmIHRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBzaW5nbGUgXFxuIGFzIGEgc3BhY2VyLCBpdCdzIHRlcm1pbmF0aW5nIHRoZSBsYXN0IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIG1vdmUgaXQgdGhlcmUgc28gdGhhdCB3ZSBkb24ndCBnZXQgdW5uZWNlc3NhcnkgcGFyYWdyYXBoIHRhZ3NcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS5yYXcgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29kZVxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZShzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIC8vIEFuIGluZGVudGVkIGNvZGUgYmxvY2sgY2Fubm90IGludGVycnVwdCBhIHBhcmFncmFwaC5cbiAgICAgICAgICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZmVuY2VzXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5mZW5jZXMoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGVhZGluZ1xuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuaGVhZGluZyhzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoclxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuaHIoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYmxvY2txdW90ZVxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYmxvY2txdW90ZShzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBsaXN0XG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5saXN0KHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGh0bWxcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmh0bWwoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVmXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5kZWYoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMudG9rZW5zLmxpbmtzW3Rva2VuLnRhZ10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbnMubGlua3NbdG9rZW4udGFnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IHRva2VuLmhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdG9rZW4udGl0bGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0YWJsZSAoZ2ZtKVxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGFibGUoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbGhlYWRpbmdcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxoZWFkaW5nKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRvcC1sZXZlbCBwYXJhZ3JhcGhcbiAgICAgICAgICAgIC8vIHByZXZlbnQgcGFyYWdyYXBoIGNvbnN1bWluZyBleHRlbnNpb25zIGJ5IGNsaXBwaW5nICdzcmMnIHRvIGV4dGVuc2lvbiBzdGFydFxuICAgICAgICAgICAgY3V0U3JjID0gc3JjO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0QmxvY2spIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBTcmMgPSBzcmMuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgbGV0IHRlbXBTdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydEJsb2NrLmZvckVhY2goKGdldFN0YXJ0SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcFN0YXJ0ID0gZ2V0U3RhcnRJbmRleC5jYWxsKHsgbGV4ZXI6IHRoaXMgfSwgdGVtcFNyYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGVtcFN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0ZW1wU3RhcnQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleCA9IE1hdGgubWluKHN0YXJ0SW5kZXgsIHRlbXBTdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRJbmRleCA8IEluZmluaXR5ICYmIHN0YXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdXRTcmMgPSBzcmMuc3Vic3RyaW5nKDAsIHN0YXJ0SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS50b3AgJiYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIucGFyYWdyYXBoKGN1dFNyYykpKSB7XG4gICAgICAgICAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFBhcmFncmFwaENsaXBwZWQgJiYgbGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0UGFyYWdyYXBoQ2xpcHBlZCA9IChjdXRTcmMubGVuZ3RoICE9PSBzcmMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGV4dFxuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGV4dChzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWUucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyTXNnID0gJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS50b3AgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cbiAgICBpbmxpbmUoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgICAgICB0aGlzLmlubGluZVF1ZXVlLnB1c2goeyBzcmMsIHRva2VucyB9KTtcbiAgICAgICAgcmV0dXJuIHRva2VucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGV4aW5nL0NvbXBpbGluZ1xuICAgICAqL1xuICAgIGlubGluZVRva2VucyhzcmMsIHRva2VucyA9IFtdKSB7XG4gICAgICAgIGxldCB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmM7XG4gICAgICAgIC8vIFN0cmluZyB3aXRoIGxpbmtzIG1hc2tlZCB0byBhdm9pZCBpbnRlcmZlcmVuY2Ugd2l0aCBlbSBhbmQgc3Ryb25nXG4gICAgICAgIGxldCBtYXNrZWRTcmMgPSBzcmM7XG4gICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgbGV0IGtlZXBQcmV2Q2hhciwgcHJldkNoYXI7XG4gICAgICAgIC8vIE1hc2sgb3V0IHJlZmxpbmtzXG4gICAgICAgIGlmICh0aGlzLnRva2Vucy5saW5rcykge1xuICAgICAgICAgICAgY29uc3QgbGlua3MgPSBPYmplY3Qua2V5cyh0aGlzLnRva2Vucy5saW5rcyk7XG4gICAgICAgICAgICBpZiAobGlua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUucmVmbGlua1NlYXJjaC5leGVjKG1hc2tlZFNyYykpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtzLmluY2x1ZGVzKG1hdGNoWzBdLnNsaWNlKG1hdGNoWzBdLmxhc3RJbmRleE9mKCdbJykgKyAxLCAtMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrZWRTcmMgPSBtYXNrZWRTcmMuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgJ1snICsgJ2EnLnJlcGVhdChtYXRjaFswXS5sZW5ndGggLSAyKSArICddJyArIG1hc2tlZFNyYy5zbGljZSh0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUucmVmbGlua1NlYXJjaC5sYXN0SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE1hc2sgb3V0IG90aGVyIGJsb2Nrc1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmJsb2NrU2tpcC5leGVjKG1hc2tlZFNyYykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hc2tlZFNyYyA9IG1hc2tlZFNyYy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyAnWycgKyAnYScucmVwZWF0KG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5ibG9ja1NraXAubGFzdEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXNrIG91dCBlc2NhcGVkIGNoYXJhY3RlcnNcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbi5leGVjKG1hc2tlZFNyYykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hc2tlZFNyYyA9IG1hc2tlZFNyYy5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyAnKysnICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5hbnlQdW5jdHVhdGlvbi5sYXN0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzcmMpIHtcbiAgICAgICAgICAgIGlmICgha2VlcFByZXZDaGFyKSB7XG4gICAgICAgICAgICAgICAgcHJldkNoYXIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtlZXBQcmV2Q2hhciA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gZXh0ZW5zaW9uc1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuaW5saW5lXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuaW5saW5lLnNvbWUoKGV4dFRva2VuaXplcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gPSBleHRUb2tlbml6ZXIuY2FsbCh7IGxleGVyOiB0aGlzIH0sIHNyYywgdG9rZW5zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNjYXBlXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5lc2NhcGUoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGFnXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci50YWcoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFRva2VuICYmIHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gdG9rZW4ucmF3O1xuICAgICAgICAgICAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxpbmtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxpbmsoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5yZWZsaW5rKHNyYywgdGhpcy50b2tlbnMubGlua3MpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0VG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZW0gJiBzdHJvbmdcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVtU3Ryb25nKHNyYywgbWFza2VkU3JjLCBwcmV2Q2hhcikpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvZGVcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmNvZGVzcGFuKHNyYykpIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJyXG4gICAgICAgICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5icihzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWwgKGdmbSlcbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmRlbChzcmMpKSB7XG4gICAgICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhdXRvbGlua1xuICAgICAgICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYXV0b2xpbmsoc3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdXJsIChnZm0pXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuaW5MaW5rICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnVybChzcmMpKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGV4dFxuICAgICAgICAgICAgLy8gcHJldmVudCBpbmxpbmVUZXh0IGNvbnN1bWluZyBleHRlbnNpb25zIGJ5IGNsaXBwaW5nICdzcmMnIHRvIGV4dGVuc2lvbiBzdGFydFxuICAgICAgICAgICAgY3V0U3JjID0gc3JjO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wU3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRJbmxpbmUuZm9yRWFjaCgoZ2V0U3RhcnRJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoeyBsZXhlcjogdGhpcyB9LCB0ZW1wU3JjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wU3RhcnQgPT09ICdudW1iZXInICYmIHRlbXBTdGFydCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCwgdGVtcFN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4IDwgSW5maW5pdHkgJiYgc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1dFNyYyA9IHNyYy5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmlubGluZVRleHQoY3V0U3JjKSkge1xuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnJhdy5zbGljZSgtMSkgIT09ICdfJykgeyAvLyBUcmFjayBwcmV2Q2hhciBiZWZvcmUgc3RyaW5nIG9mIF9fX18gc3RhcnRlZFxuICAgICAgICAgICAgICAgICAgICBwcmV2Q2hhciA9IHRva2VuLnJhdy5zbGljZSgtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtlZXBQcmV2Q2hhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRva2VuLnJhdyArPSB0b2tlbi5yYXc7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cbmNsYXNzIF9SZW5kZXJlciB7XG4gICAgb3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgX2RlZmF1bHRzO1xuICAgIH1cbiAgICBjb2RlKGNvZGUsIGluZm9zdHJpbmcsIGVzY2FwZWQpIHtcbiAgICAgICAgY29uc3QgbGFuZyA9IChpbmZvc3RyaW5nIHx8ICcnKS5tYXRjaCgvXlxcUyovKT8uWzBdO1xuICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKC9cXG4kLywgJycpICsgJ1xcbic7XG4gICAgICAgIGlmICghbGFuZykge1xuICAgICAgICAgICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICAgICAgICAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZSQxKGNvZGUsIHRydWUpKVxuICAgICAgICAgICAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cImxhbmd1YWdlLSdcbiAgICAgICAgICAgICsgZXNjYXBlJDEobGFuZylcbiAgICAgICAgICAgICsgJ1wiPidcbiAgICAgICAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlJDEoY29kZSwgdHJ1ZSkpXG4gICAgICAgICAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbiAgICB9XG4gICAgYmxvY2txdW90ZShxdW90ZSkge1xuICAgICAgICByZXR1cm4gYDxibG9ja3F1b3RlPlxcbiR7cXVvdGV9PC9ibG9ja3F1b3RlPlxcbmA7XG4gICAgfVxuICAgIGh0bWwoaHRtbCwgYmxvY2spIHtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIGhlYWRpbmcodGV4dCwgbGV2ZWwsIHJhdykge1xuICAgICAgICAvLyBpZ25vcmUgSURzXG4gICAgICAgIHJldHVybiBgPGgke2xldmVsfT4ke3RleHR9PC9oJHtsZXZlbH0+XFxuYDtcbiAgICB9XG4gICAgaHIoKSB7XG4gICAgICAgIHJldHVybiAnPGhyPlxcbic7XG4gICAgfVxuICAgIGxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJztcbiAgICAgICAgY29uc3Qgc3RhcnRhdHQgPSAob3JkZXJlZCAmJiBzdGFydCAhPT0gMSkgPyAoJyBzdGFydD1cIicgKyBzdGFydCArICdcIicpIDogJyc7XG4gICAgICAgIHJldHVybiAnPCcgKyB0eXBlICsgc3RhcnRhdHQgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG4gICAgfVxuICAgIGxpc3RpdGVtKHRleHQsIHRhc2ssIGNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGA8bGk+JHt0ZXh0fTwvbGk+XFxuYDtcbiAgICB9XG4gICAgY2hlY2tib3goY2hlY2tlZCkge1xuICAgICAgICByZXR1cm4gJzxpbnB1dCAnXG4gICAgICAgICAgICArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpXG4gICAgICAgICAgICArICdkaXNhYmxlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiPic7XG4gICAgfVxuICAgIHBhcmFncmFwaCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBgPHA+JHt0ZXh0fTwvcD5cXG5gO1xuICAgIH1cbiAgICB0YWJsZShoZWFkZXIsIGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkpXG4gICAgICAgICAgICBib2R5ID0gYDx0Ym9keT4ke2JvZHl9PC90Ym9keT5gO1xuICAgICAgICByZXR1cm4gJzx0YWJsZT5cXG4nXG4gICAgICAgICAgICArICc8dGhlYWQ+XFxuJ1xuICAgICAgICAgICAgKyBoZWFkZXJcbiAgICAgICAgICAgICsgJzwvdGhlYWQ+XFxuJ1xuICAgICAgICAgICAgKyBib2R5XG4gICAgICAgICAgICArICc8L3RhYmxlPlxcbic7XG4gICAgfVxuICAgIHRhYmxlcm93KGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGA8dHI+XFxuJHtjb250ZW50fTwvdHI+XFxuYDtcbiAgICB9XG4gICAgdGFibGVjZWxsKGNvbnRlbnQsIGZsYWdzKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgICAgICAgY29uc3QgdGFnID0gZmxhZ3MuYWxpZ25cbiAgICAgICAgICAgID8gYDwke3R5cGV9IGFsaWduPVwiJHtmbGFncy5hbGlnbn1cIj5gXG4gICAgICAgICAgICA6IGA8JHt0eXBlfT5gO1xuICAgICAgICByZXR1cm4gdGFnICsgY29udGVudCArIGA8LyR7dHlwZX0+XFxuYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogc3BhbiBsZXZlbCByZW5kZXJlclxuICAgICAqL1xuICAgIHN0cm9uZyh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBgPHN0cm9uZz4ke3RleHR9PC9zdHJvbmc+YDtcbiAgICB9XG4gICAgZW0odGV4dCkge1xuICAgICAgICByZXR1cm4gYDxlbT4ke3RleHR9PC9lbT5gO1xuICAgIH1cbiAgICBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgICAgIHJldHVybiBgPGNvZGU+JHt0ZXh0fTwvY29kZT5gO1xuICAgIH1cbiAgICBicigpIHtcbiAgICAgICAgcmV0dXJuICc8YnI+JztcbiAgICB9XG4gICAgZGVsKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIGA8ZGVsPiR7dGV4dH08L2RlbD5gO1xuICAgIH1cbiAgICBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNsZWFuSHJlZiA9IGNsZWFuVXJsKGhyZWYpO1xuICAgICAgICBpZiAoY2xlYW5IcmVmID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBocmVmID0gY2xlYW5IcmVmO1xuICAgICAgICBsZXQgb3V0ID0gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIic7XG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgICAgICBjb25zdCBjbGVhbkhyZWYgPSBjbGVhblVybChocmVmKTtcbiAgICAgICAgaWYgKGNsZWFuSHJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgaHJlZiA9IGNsZWFuSHJlZjtcbiAgICAgICAgbGV0IG91dCA9IGA8aW1nIHNyYz1cIiR7aHJlZn1cIiBhbHQ9XCIke3RleHR9XCJgO1xuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgIG91dCArPSBgIHRpdGxlPVwiJHt0aXRsZX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICc+JztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgdGV4dCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBUZXh0UmVuZGVyZXJcbiAqIHJldHVybnMgb25seSB0aGUgdGV4dHVhbCBwYXJ0IG9mIHRoZSB0b2tlblxuICovXG5jbGFzcyBfVGV4dFJlbmRlcmVyIHtcbiAgICAvLyBubyBuZWVkIGZvciBibG9jayBsZXZlbCByZW5kZXJlcnNcbiAgICBzdHJvbmcodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZW0odGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgY29kZXNwYW4odGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZGVsKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGh0bWwodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgdGV4dCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiAnJyArIHRleHQ7XG4gICAgfVxuICAgIGltYWdlKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiAnJyArIHRleHQ7XG4gICAgfVxuICAgIGJyKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuXG4vKipcbiAqIFBhcnNpbmcgJiBDb21waWxpbmdcbiAqL1xuY2xhc3MgX1BhcnNlciB7XG4gICAgb3B0aW9ucztcbiAgICByZW5kZXJlcjtcbiAgICB0ZXh0UmVuZGVyZXI7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IF9kZWZhdWx0cztcbiAgICAgICAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBfUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlcjtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLnRleHRSZW5kZXJlciA9IG5ldyBfVGV4dFJlbmRlcmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBQYXJzZSBNZXRob2RcbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2UodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBfUGFyc2VyKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBQYXJzZSBJbmxpbmUgTWV0aG9kXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlSW5saW5lKHRva2Vucywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgX1BhcnNlcihvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBMb29wXG4gICAgICovXG4gICAgcGFyc2UodG9rZW5zLCB0b3AgPSB0cnVlKSB7XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgLy8gUnVuIGFueSByZW5kZXJlciBleHRlbnNpb25zXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyaWNUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1tnZW5lcmljVG9rZW4udHlwZV0uY2FsbCh7IHBhcnNlcjogdGhpcyB9LCBnZW5lcmljVG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChyZXQgIT09IGZhbHNlIHx8ICFbJ3NwYWNlJywgJ2hyJywgJ2hlYWRpbmcnLCAnY29kZScsICd0YWJsZScsICdibG9ja3F1b3RlJywgJ2xpc3QnLCAnaHRtbCcsICdwYXJhZ3JhcGgnLCAndGV4dCddLmluY2x1ZGVzKGdlbmVyaWNUb2tlbi50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmV0IHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2hyJzoge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnaGVhZGluZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZ1Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmhlYWRpbmcodGhpcy5wYXJzZUlubGluZShoZWFkaW5nVG9rZW4udG9rZW5zKSwgaGVhZGluZ1Rva2VuLmRlcHRoLCB1bmVzY2FwZSh0aGlzLnBhcnNlSW5saW5lKGhlYWRpbmdUb2tlbi50b2tlbnMsIHRoaXMudGV4dFJlbmRlcmVyKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnY29kZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZVRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmNvZGUoY29kZVRva2VuLnRleHQsIGNvZGVUb2tlbi5sYW5nLCAhIWNvZGVUb2tlbi5lc2NhcGVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZVRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWFkZXIgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFibGVUb2tlbi5oZWFkZXIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwodGhpcy5wYXJzZUlubGluZSh0YWJsZVRva2VuLmhlYWRlcltqXS50b2tlbnMpLCB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRhYmxlVG9rZW4uYWxpZ25bal0gfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGFibGVUb2tlbi5yb3dzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0YWJsZVRva2VuLnJvd3Nbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJvdy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwodGhpcy5wYXJzZUlubGluZShyb3dba10udG9rZW5zKSwgeyBoZWFkZXI6IGZhbHNlLCBhbGlnbjogdGFibGVUb2tlbi5hbGlnbltrXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50YWJsZShoZWFkZXIsIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxvY2txdW90ZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2txdW90ZVRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLnBhcnNlKGJsb2NrcXVvdGVUb2tlbi50b2tlbnMpO1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ibG9ja3F1b3RlKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnbGlzdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yZGVyZWQgPSBsaXN0VG9rZW4ub3JkZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBsaXN0VG9rZW4uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvb3NlID0gbGlzdFRva2VuLmxvb3NlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpc3RUb2tlbi5pdGVtcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGxpc3RUb2tlbi5pdGVtc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBpdGVtLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gaXRlbS50YXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1Cb2R5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSB0aGlzLnJlbmRlcmVyLmNoZWNrYm94KCEhY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRva2Vucy5sZW5ndGggPiAwICYmIGl0ZW0udG9rZW5zWzBdLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRva2Vuc1swXS50ZXh0ID0gY2hlY2tib3ggKyAnICcgKyBpdGVtLnRva2Vuc1swXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udG9rZW5zWzBdLnRva2VucyAmJiBpdGVtLnRva2Vuc1swXS50b2tlbnMubGVuZ3RoID4gMCAmJiBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnRleHQgPSBjaGVja2JveCArICcgJyArIGl0ZW0udG9rZW5zWzBdLnRva2Vuc1swXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGNoZWNrYm94ICsgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUJvZHkgKz0gY2hlY2tib3ggKyAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUJvZHkgKz0gdGhpcy5wYXJzZShpdGVtLnRva2VucywgbG9vc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGl0ZW1Cb2R5LCB0YXNrLCAhIWNoZWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnaHRtbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmh0bWwoaHRtbFRva2VuLnRleHQsIGh0bWxUb2tlbi5ibG9jayk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdwYXJhZ3JhcGgnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFncmFwaFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLnBhcnNlSW5saW5lKHBhcmFncmFwaFRva2VuLnRva2VucykpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IHRleHRUb2tlbi50b2tlbnMgPyB0aGlzLnBhcnNlSW5saW5lKHRleHRUb2tlbi50b2tlbnMpIDogdGV4dFRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpICsgMSA8IHRva2Vucy5sZW5ndGggJiYgdG9rZW5zW2kgKyAxXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRUb2tlbiA9IHRva2Vuc1srK2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSArPSAnXFxuJyArICh0ZXh0VG9rZW4udG9rZW5zID8gdGhpcy5wYXJzZUlubGluZSh0ZXh0VG9rZW4udG9rZW5zKSA6IHRleHRUb2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gdG9wID8gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgoYm9keSkgOiBib2R5O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnVG9rZW4gd2l0aCBcIicgKyB0b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgSW5saW5lIFRva2Vuc1xuICAgICAqL1xuICAgIHBhcnNlSW5saW5lKHRva2VucywgcmVuZGVyZXIpIHtcbiAgICAgICAgcmVuZGVyZXIgPSByZW5kZXJlciB8fCB0aGlzLnJlbmRlcmVyO1xuICAgICAgICBsZXQgb3V0ID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIC8vIFJ1biBhbnkgcmVuZGVyZXIgZXh0ZW5zaW9uc1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVycyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnNbdG9rZW4udHlwZV0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnNbdG9rZW4udHlwZV0uY2FsbCh7IHBhcnNlcjogdGhpcyB9LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnZXNjYXBlJywgJ2h0bWwnLCAnbGluaycsICdpbWFnZScsICdzdHJvbmcnLCAnZW0nLCAnY29kZXNwYW4nLCAnYnInLCAnZGVsJywgJ3RleHQnXS5pbmNsdWRlcyh0b2tlbi50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gcmV0IHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdlc2NhcGUnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzY2FwZVRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSByZW5kZXJlci50ZXh0KGVzY2FwZVRva2VuLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnaHRtbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmh0bWwodGFnVG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdsaW5rJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmxpbmsobGlua1Rva2VuLmhyZWYsIGxpbmtUb2tlbi50aXRsZSwgdGhpcy5wYXJzZUlubGluZShsaW5rVG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmltYWdlKGltYWdlVG9rZW4uaHJlZiwgaW1hZ2VUb2tlbi50aXRsZSwgaW1hZ2VUb2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cm9uZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Ryb25nVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnN0cm9uZyh0aGlzLnBhcnNlSW5saW5lKHN0cm9uZ1Rva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2VtJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbVRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSByZW5kZXJlci5lbSh0aGlzLnBhcnNlSW5saW5lKGVtVG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnY29kZXNwYW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVzcGFuVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmNvZGVzcGFuKGNvZGVzcGFuVG9rZW4udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdicic6IHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmJyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdkZWwnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbFRva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSByZW5kZXJlci5kZWwodGhpcy5wYXJzZUlubGluZShkZWxUb2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnRleHQodGV4dFRva2VuLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnVG9rZW4gd2l0aCBcIicgKyB0b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5cbmNsYXNzIF9Ib29rcyB7XG4gICAgb3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgX2RlZmF1bHRzO1xuICAgIH1cbiAgICBzdGF0aWMgcGFzc1Rocm91Z2hIb29rcyA9IG5ldyBTZXQoW1xuICAgICAgICAncHJlcHJvY2VzcycsXG4gICAgICAgICdwb3N0cHJvY2VzcycsXG4gICAgICAgICdwcm9jZXNzQWxsVG9rZW5zJ1xuICAgIF0pO1xuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgbWFya2Rvd24gYmVmb3JlIG1hcmtlZFxuICAgICAqL1xuICAgIHByZXByb2Nlc3MobWFya2Rvd24pIHtcbiAgICAgICAgcmV0dXJuIG1hcmtkb3duO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIEhUTUwgYWZ0ZXIgbWFya2VkIGlzIGZpbmlzaGVkXG4gICAgICovXG4gICAgcG9zdHByb2Nlc3MoaHRtbCkge1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhbGwgdG9rZW5zIGJlZm9yZSB3YWxrIHRva2Vuc1xuICAgICAqL1xuICAgIHByb2Nlc3NBbGxUb2tlbnModG9rZW5zKSB7XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxufVxuXG5jbGFzcyBNYXJrZWQge1xuICAgIGRlZmF1bHRzID0gX2dldERlZmF1bHRzKCk7XG4gICAgb3B0aW9ucyA9IHRoaXMuc2V0T3B0aW9ucztcbiAgICBwYXJzZSA9IHRoaXMuI3BhcnNlTWFya2Rvd24oX0xleGVyLmxleCwgX1BhcnNlci5wYXJzZSk7XG4gICAgcGFyc2VJbmxpbmUgPSB0aGlzLiNwYXJzZU1hcmtkb3duKF9MZXhlci5sZXhJbmxpbmUsIF9QYXJzZXIucGFyc2VJbmxpbmUpO1xuICAgIFBhcnNlciA9IF9QYXJzZXI7XG4gICAgUmVuZGVyZXIgPSBfUmVuZGVyZXI7XG4gICAgVGV4dFJlbmRlcmVyID0gX1RleHRSZW5kZXJlcjtcbiAgICBMZXhlciA9IF9MZXhlcjtcbiAgICBUb2tlbml6ZXIgPSBfVG9rZW5pemVyO1xuICAgIEhvb2tzID0gX0hvb2tzO1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy51c2UoLi4uYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJ1biBjYWxsYmFjayBmb3IgZXZlcnkgdG9rZW5cbiAgICAgKi9cbiAgICB3YWxrVG9rZW5zKHRva2VucywgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChjYWxsYmFjay5jYWxsKHRoaXMsIHRva2VuKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0YWJsZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGVUb2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdGFibGVUb2tlbi5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKGNlbGwudG9rZW5zLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHRhYmxlVG9rZW4ucm93cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKGNlbGwudG9rZW5zLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdsaXN0Jzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh0aGlzLndhbGtUb2tlbnMobGlzdFRva2VuLml0ZW1zLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmljVG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdHMuZXh0ZW5zaW9ucz8uY2hpbGRUb2tlbnM/LltnZW5lcmljVG9rZW4udHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1tnZW5lcmljVG9rZW4udHlwZV0uZm9yRWFjaCgoY2hpbGRUb2tlbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBnZW5lcmljVG9rZW5bY2hpbGRUb2tlbnNdLmZsYXQoSW5maW5pdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKHRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdlbmVyaWNUb2tlbi50b2tlbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy53YWxrVG9rZW5zKGdlbmVyaWNUb2tlbi50b2tlbnMsIGNhbGxiYWNrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gICAgdXNlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZGVmYXVsdHMuZXh0ZW5zaW9ucyB8fCB7IHJlbmRlcmVyczoge30sIGNoaWxkVG9rZW5zOiB7fSB9O1xuICAgICAgICBhcmdzLmZvckVhY2goKHBhY2spID0+IHtcbiAgICAgICAgICAgIC8vIGNvcHkgb3B0aW9ucyB0byBuZXcgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBvcHRzID0geyAuLi5wYWNrIH07XG4gICAgICAgICAgICAvLyBzZXQgYXN5bmMgdG8gdHJ1ZSBpZiBpdCB3YXMgc2V0IHRvIHRydWUgYmVmb3JlXG4gICAgICAgICAgICBvcHRzLmFzeW5jID0gdGhpcy5kZWZhdWx0cy5hc3luYyB8fCBvcHRzLmFzeW5jIHx8IGZhbHNlO1xuICAgICAgICAgICAgLy8gPT0tLSBQYXJzZSBcImFkZG9uXCIgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgICAgICAgICBpZiAocGFjay5leHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgcGFjay5leHRlbnNpb25zLmZvckVhY2goKGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4dC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4dGVuc2lvbiBuYW1lIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdyZW5kZXJlcicgaW4gZXh0KSB7IC8vIFJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZSZW5kZXJlciA9IGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2UmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGV4dGVuc2lvbiB3aXRoIGZ1bmMgdG8gcnVuIG5ldyBleHRlbnNpb24gYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBleHQucmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5yZW5kZXJlcnNbZXh0Lm5hbWVdID0gZXh0LnJlbmRlcmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgndG9rZW5pemVyJyBpbiBleHQpIHsgLy8gVG9rZW5pemVyIEV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXh0LmxldmVsIHx8IChleHQubGV2ZWwgIT09ICdibG9jaycgJiYgZXh0LmxldmVsICE9PSAnaW5saW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRlbnNpb24gbGV2ZWwgbXVzdCBiZSAnYmxvY2snIG9yICdpbmxpbmUnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0TGV2ZWwgPSBleHRlbnNpb25zW2V4dC5sZXZlbF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRMZXZlbC51bnNoaWZ0KGV4dC50b2tlbml6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHQubGV2ZWxdID0gW2V4dC50b2tlbml6ZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dC5zdGFydCkgeyAvLyBGdW5jdGlvbiB0byBjaGVjayBmb3Igc3RhcnQgb2YgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0LmxldmVsID09PSAnYmxvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0QmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRCbG9jay5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0QmxvY2sgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0SW5saW5lLnB1c2goZXh0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc3RhcnRJbmxpbmUgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoJ2NoaWxkVG9rZW5zJyBpbiBleHQgJiYgZXh0LmNoaWxkVG9rZW5zKSB7IC8vIENoaWxkIHRva2VucyB0byBiZSB2aXNpdGVkIGJ5IHdhbGtUb2tlbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZXh0Lm5hbWVdID0gZXh0LmNoaWxkVG9rZW5zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb3B0cy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vID09LS0gUGFyc2UgXCJvdmVyd3JpdGVcIiBleHRlbnNpb25zIC0tPT0gLy9cbiAgICAgICAgICAgIGlmIChwYWNrLnJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLmRlZmF1bHRzLnJlbmRlcmVyIHx8IG5ldyBfUmVuZGVyZXIodGhpcy5kZWZhdWx0cyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sucmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEocHJvcCBpbiByZW5kZXJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVuZGVyZXIgJyR7cHJvcH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG9wdGlvbnMgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyUHJvcCA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyRnVuYyA9IHBhY2sucmVuZGVyZXJbcmVuZGVyZXJQcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldlJlbmRlcmVyID0gcmVuZGVyZXJbcmVuZGVyZXJQcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSByZW5kZXJlciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlcltyZW5kZXJlclByb3BdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSByZW5kZXJlckZ1bmMuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldCB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhY2sudG9rZW5pemVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5pemVyID0gdGhpcy5kZWZhdWx0cy50b2tlbml6ZXIgfHwgbmV3IF9Ub2tlbml6ZXIodGhpcy5kZWZhdWx0cyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sudG9rZW5pemVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHByb3AgaW4gdG9rZW5pemVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0b2tlbml6ZXIgJyR7cHJvcH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnb3B0aW9ucycsICdydWxlcycsICdsZXhlciddLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgb3B0aW9ucywgcnVsZXMsIGFuZCBsZXhlciBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbml6ZXJQcm9wID0gcHJvcDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5pemVyRnVuYyA9IHBhY2sudG9rZW5pemVyW3Rva2VuaXplclByb3BdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2VG9rZW5pemVyID0gdG9rZW5pemVyW3Rva2VuaXplclByb3BdO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRva2VuaXplciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNhbm5vdCB0eXBlIHRva2VuaXplciBmdW5jdGlvbiBkeW5hbWljYWxseVxuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXJbdG9rZW5pemVyUHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJldCA9IHRva2VuaXplckZ1bmMuYXBwbHkodG9rZW5pemVyLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gcHJldlRva2VuaXplci5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA9PS0tIFBhcnNlIEhvb2tzIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgICAgICAgICAgaWYgKHBhY2suaG9va3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBob29rcyA9IHRoaXMuZGVmYXVsdHMuaG9va3MgfHwgbmV3IF9Ib29rcygpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwYWNrLmhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHByb3AgaW4gaG9va3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGhvb2sgJyR7cHJvcH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG9wdGlvbnMgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvb2tzUHJvcCA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvb2tzRnVuYyA9IHBhY2suaG9va3NbaG9va3NQcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkhvb2sgPSBob29rc1tob29rc1Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX0hvb2tzLnBhc3NUaHJvdWdoSG9va3MuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNhbm5vdCB0eXBlIGhvb2sgZnVuY3Rpb24gZHluYW1pY2FsbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tzW2hvb2tzUHJvcF0gPSAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdHMuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShob29rc0Z1bmMuY2FsbChob29rcywgYXJnKSkudGhlbihyZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZIb29rLmNhbGwoaG9va3MsIHJldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBob29rc0Z1bmMuY2FsbChob29rcywgYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldkhvb2suY2FsbChob29rcywgcmV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNhbm5vdCB0eXBlIGhvb2sgZnVuY3Rpb24gZHluYW1pY2FsbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tzW2hvb2tzUHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBob29rc0Z1bmMuYXBwbHkoaG9va3MsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHByZXZIb29rLmFwcGx5KGhvb2tzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5ob29rcyA9IGhvb2tzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gPT0tLSBQYXJzZSBXYWxrVG9rZW5zIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgICAgICAgICAgaWYgKHBhY2sud2Fsa1Rva2Vucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdhbGtUb2tlbnMgPSB0aGlzLmRlZmF1bHRzLndhbGtUb2tlbnM7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFja1dhbGt0b2tlbnMgPSBwYWNrLndhbGtUb2tlbnM7XG4gICAgICAgICAgICAgICAgb3B0cy53YWxrVG9rZW5zID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gocGFja1dhbGt0b2tlbnMuY2FsbCh0aGlzLCB0b2tlbikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2Fsa1Rva2Vucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh3YWxrVG9rZW5zLmNhbGwodGhpcywgdG9rZW4pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRzID0geyAuLi50aGlzLmRlZmF1bHRzLCAuLi5vcHRzIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0T3B0aW9ucyhvcHQpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHsgLi4udGhpcy5kZWZhdWx0cywgLi4ub3B0IH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBsZXhlcihzcmMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9MZXhlci5sZXgoc3JjLCBvcHRpb25zID8/IHRoaXMuZGVmYXVsdHMpO1xuICAgIH1cbiAgICBwYXJzZXIodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfUGFyc2VyLnBhcnNlKHRva2Vucywgb3B0aW9ucyA/PyB0aGlzLmRlZmF1bHRzKTtcbiAgICB9XG4gICAgI3BhcnNlTWFya2Rvd24obGV4ZXIsIHBhcnNlcikge1xuICAgICAgICByZXR1cm4gKHNyYywgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ09wdCA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICAgICAgY29uc3Qgb3B0ID0geyAuLi50aGlzLmRlZmF1bHRzLCAuLi5vcmlnT3B0IH07XG4gICAgICAgICAgICAvLyBTaG93IHdhcm5pbmcgaWYgYW4gZXh0ZW5zaW9uIHNldCBhc3luYyB0byB0cnVlIGJ1dCB0aGUgcGFyc2Ugd2FzIGNhbGxlZCB3aXRoIGFzeW5jOiBmYWxzZVxuICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdHMuYXN5bmMgPT09IHRydWUgJiYgb3JpZ09wdC5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdC5zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtYXJrZWQoKTogVGhlIGFzeW5jIG9wdGlvbiB3YXMgc2V0IHRvIHRydWUgYnkgYW4gZXh0ZW5zaW9uLiBUaGUgYXN5bmM6IGZhbHNlIG9wdGlvbiBzZW50IHRvIHBhcnNlIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRocm93RXJyb3IgPSB0aGlzLiNvbkVycm9yKCEhb3B0LnNpbGVudCwgISFvcHQuYXN5bmMpO1xuICAgICAgICAgICAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3JjID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IobmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZCBvciBudWxsJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IobmV3IEVycm9yKCdtYXJrZWQoKTogaW5wdXQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgJ1xuICAgICAgICAgICAgICAgICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdC5ob29rcykge1xuICAgICAgICAgICAgICAgIG9wdC5ob29rcy5vcHRpb25zID0gb3B0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdC5hc3luYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUob3B0Lmhvb2tzID8gb3B0Lmhvb2tzLnByZXByb2Nlc3Moc3JjKSA6IHNyYylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oc3JjID0+IGxleGVyKHNyYywgb3B0KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4odG9rZW5zID0+IG9wdC5ob29rcyA/IG9wdC5ob29rcy5wcm9jZXNzQWxsVG9rZW5zKHRva2VucykgOiB0b2tlbnMpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRva2VucyA9PiBvcHQud2Fsa1Rva2VucyA/IFByb21pc2UuYWxsKHRoaXMud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKSkudGhlbigoKSA9PiB0b2tlbnMpIDogdG9rZW5zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbih0b2tlbnMgPT4gcGFyc2VyKHRva2Vucywgb3B0KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oaHRtbCA9PiBvcHQuaG9va3MgPyBvcHQuaG9va3MucG9zdHByb2Nlc3MoaHRtbCkgOiBodG1sKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2godGhyb3dFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChvcHQuaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gb3B0Lmhvb2tzLnByZXByb2Nlc3Moc3JjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHRva2VucyA9IGxleGVyKHNyYywgb3B0KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0Lmhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VucyA9IG9wdC5ob29rcy5wcm9jZXNzQWxsVG9rZW5zKHRva2Vucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHQud2Fsa1Rva2Vucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndhbGtUb2tlbnModG9rZW5zLCBvcHQud2Fsa1Rva2Vucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBodG1sID0gcGFyc2VyKHRva2Vucywgb3B0KTtcbiAgICAgICAgICAgICAgICBpZiAob3B0Lmhvb2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBvcHQuaG9va3MucG9zdHByb2Nlc3MoaHRtbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBodG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgI29uRXJyb3Ioc2lsZW50LCBhc3luYykge1xuICAgICAgICByZXR1cm4gKGUpID0+IHtcbiAgICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQuJztcbiAgICAgICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICAgICAgICAgICAgICArIGVzY2FwZSQxKGUubWVzc2FnZSArICcnLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICArICc8L3ByZT4nO1xuICAgICAgICAgICAgICAgIGlmIChhc3luYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuY29uc3QgbWFya2VkSW5zdGFuY2UgPSBuZXcgTWFya2VkKCk7XG5mdW5jdGlvbiBtYXJrZWQoc3JjLCBvcHQpIHtcbiAgICByZXR1cm4gbWFya2VkSW5zdGFuY2UucGFyc2Uoc3JjLCBvcHQpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgSGFzaCBvZiBvcHRpb25zXG4gKi9cbm1hcmtlZC5vcHRpb25zID1cbiAgICBtYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIG1hcmtlZEluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG1hcmtlZC5kZWZhdWx0cyA9IG1hcmtlZEluc3RhbmNlLmRlZmF1bHRzO1xuICAgICAgICBjaGFuZ2VEZWZhdWx0cyhtYXJrZWQuZGVmYXVsdHMpO1xuICAgICAgICByZXR1cm4gbWFya2VkO1xuICAgIH07XG4vKipcbiAqIEdldHMgdGhlIG9yaWdpbmFsIG1hcmtlZCBkZWZhdWx0IG9wdGlvbnMuXG4gKi9cbm1hcmtlZC5nZXREZWZhdWx0cyA9IF9nZXREZWZhdWx0cztcbm1hcmtlZC5kZWZhdWx0cyA9IF9kZWZhdWx0cztcbi8qKlxuICogVXNlIEV4dGVuc2lvblxuICovXG5tYXJrZWQudXNlID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICBtYXJrZWRJbnN0YW5jZS51c2UoLi4uYXJncyk7XG4gICAgbWFya2VkLmRlZmF1bHRzID0gbWFya2VkSW5zdGFuY2UuZGVmYXVsdHM7XG4gICAgY2hhbmdlRGVmYXVsdHMobWFya2VkLmRlZmF1bHRzKTtcbiAgICByZXR1cm4gbWFya2VkO1xufTtcbi8qKlxuICogUnVuIGNhbGxiYWNrIGZvciBldmVyeSB0b2tlblxuICovXG5tYXJrZWQud2Fsa1Rva2VucyA9IGZ1bmN0aW9uICh0b2tlbnMsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIG1hcmtlZEluc3RhbmNlLndhbGtUb2tlbnModG9rZW5zLCBjYWxsYmFjayk7XG59O1xuLyoqXG4gKiBDb21waWxlcyBtYXJrZG93biB0byBIVE1MIHdpdGhvdXQgZW5jbG9zaW5nIGBwYCB0YWcuXG4gKlxuICogQHBhcmFtIHNyYyBTdHJpbmcgb2YgbWFya2Rvd24gc291cmNlIHRvIGJlIGNvbXBpbGVkXG4gKiBAcGFyYW0gb3B0aW9ucyBIYXNoIG9mIG9wdGlvbnNcbiAqIEByZXR1cm4gU3RyaW5nIG9mIGNvbXBpbGVkIEhUTUxcbiAqL1xubWFya2VkLnBhcnNlSW5saW5lID0gbWFya2VkSW5zdGFuY2UucGFyc2VJbmxpbmU7XG4vKipcbiAqIEV4cG9zZVxuICovXG5tYXJrZWQuUGFyc2VyID0gX1BhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBfUGFyc2VyLnBhcnNlO1xubWFya2VkLlJlbmRlcmVyID0gX1JlbmRlcmVyO1xubWFya2VkLlRleHRSZW5kZXJlciA9IF9UZXh0UmVuZGVyZXI7XG5tYXJrZWQuTGV4ZXIgPSBfTGV4ZXI7XG5tYXJrZWQubGV4ZXIgPSBfTGV4ZXIubGV4O1xubWFya2VkLlRva2VuaXplciA9IF9Ub2tlbml6ZXI7XG5tYXJrZWQuSG9va3MgPSBfSG9va3M7XG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5jb25zdCBvcHRpb25zID0gbWFya2VkLm9wdGlvbnM7XG5jb25zdCBzZXRPcHRpb25zID0gbWFya2VkLnNldE9wdGlvbnM7XG5jb25zdCB1c2UgPSBtYXJrZWQudXNlO1xuY29uc3Qgd2Fsa1Rva2VucyA9IG1hcmtlZC53YWxrVG9rZW5zO1xuY29uc3QgcGFyc2VJbmxpbmUgPSBtYXJrZWQucGFyc2VJbmxpbmU7XG5jb25zdCBwYXJzZSA9IG1hcmtlZDtcbmNvbnN0IHBhcnNlciA9IF9QYXJzZXIucGFyc2U7XG5jb25zdCBsZXhlciA9IF9MZXhlci5sZXg7XG5cbmV4cG9ydCB7IF9Ib29rcyBhcyBIb29rcywgX0xleGVyIGFzIExleGVyLCBNYXJrZWQsIF9QYXJzZXIgYXMgUGFyc2VyLCBfUmVuZGVyZXIgYXMgUmVuZGVyZXIsIF9UZXh0UmVuZGVyZXIgYXMgVGV4dFJlbmRlcmVyLCBfVG9rZW5pemVyIGFzIFRva2VuaXplciwgX2RlZmF1bHRzIGFzIGRlZmF1bHRzLCBfZ2V0RGVmYXVsdHMgYXMgZ2V0RGVmYXVsdHMsIGxleGVyLCBtYXJrZWQsIG9wdGlvbnMsIHBhcnNlLCBwYXJzZUlubGluZSwgcGFyc2VyLCBzZXRPcHRpb25zLCB1c2UsIHdhbGtUb2tlbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcmtlZC5lc20uanMubWFwXG4iXSwibmFtZXMiOlsiX2RlZmF1bHRzIiwiYXN5bmMiLCJicmVha3MiLCJleHRlbnNpb25zIiwiZ2ZtIiwiaG9va3MiLCJwZWRhbnRpYyIsInJlbmRlcmVyIiwic2lsZW50IiwidG9rZW5pemVyIiwid2Fsa1Rva2VucyIsImNoYW5nZURlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJlc2NhcGVUZXN0IiwiZXNjYXBlUmVwbGFjZSIsIlJlZ0V4cCIsInNvdXJjZSIsImVzY2FwZVRlc3ROb0VuY29kZSIsImVzY2FwZVJlcGxhY2VOb0VuY29kZSIsImVzY2FwZVJlcGxhY2VtZW50cyIsImdldEVzY2FwZVJlcGxhY2VtZW50IiwiY2giLCJlc2NhcGUkMSIsImh0bWwiLCJlbmNvZGUiLCJ0ZXN0IiwicmVwbGFjZSIsInVuZXNjYXBlVGVzdCIsInVuZXNjYXBlIiwiXyIsIm4iLCJ0b0xvd2VyQ2FzZSIsImNoYXJBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiY2FyZXQiLCJlZGl0IiwicmVnZXgiLCJvcHQiLCJvYmoiLCJuYW1lIiwidmFsIiwidmFsU291cmNlIiwiZ2V0UmVnZXgiLCJjbGVhblVybCIsImhyZWYiLCJlbmNvZGVVUkkiLCJlIiwibm9vcFRlc3QiLCJleGVjIiwic3BsaXRDZWxscyIsInRhYmxlUm93IiwiY291bnQiLCJjZWxscyIsIm1hdGNoIiwib2Zmc2V0Iiwic3RyIiwiZXNjYXBlZCIsImN1cnIiLCJzcGxpdCIsImkiLCJ0cmltIiwic2hpZnQiLCJsZW5ndGgiLCJwb3AiLCJzcGxpY2UiLCJwdXNoIiwicnRyaW0iLCJjIiwiaW52ZXJ0IiwibCIsInN1ZmZMZW4iLCJjdXJyQ2hhciIsInNsaWNlIiwib3V0cHV0TGluayIsImNhcCIsImxpbmsiLCJyYXciLCJsZXhlciIsInRpdGxlIiwidGV4dCIsInN0YXRlIiwiaW5MaW5rIiwidG9rZW4iLCJ0eXBlIiwidG9rZW5zIiwiaW5saW5lVG9rZW5zIiwiX1Rva2VuaXplciIsIm9wdGlvbnMiLCJydWxlcyIsImNvbnN0cnVjdG9yIiwidGhpcyIsInNwYWNlIiwic3JjIiwiYmxvY2siLCJuZXdsaW5lIiwiY29kZSIsImNvZGVCbG9ja1N0eWxlIiwiZmVuY2VzIiwibWF0Y2hJbmRlbnRUb0NvZGUiLCJpbmRlbnRUb0NvZGUiLCJtYXAiLCJub2RlIiwibWF0Y2hJbmRlbnRJbk5vZGUiLCJpbmRlbnRJbk5vZGUiLCJqb2luIiwiaW5kZW50Q29kZUNvbXBlbnNhdGlvbiIsImxhbmciLCJpbmxpbmUiLCJhbnlQdW5jdHVhdGlvbiIsImhlYWRpbmciLCJ0cmltbWVkIiwiZGVwdGgiLCJociIsImJsb2NrcXVvdGUiLCJ0b3AiLCJibG9ja1Rva2VucyIsImxpc3QiLCJidWxsIiwiaXNvcmRlcmVkIiwib3JkZXJlZCIsInN0YXJ0IiwibG9vc2UiLCJpdGVtcyIsIml0ZW1SZWdleCIsIml0ZW1Db250ZW50cyIsImVuZHNXaXRoQmxhbmtMaW5lIiwiZW5kRWFybHkiLCJsaW5lIiwidCIsInJlcGVhdCIsIm5leHRMaW5lIiwiaW5kZW50IiwidHJpbVN0YXJ0Iiwic2VhcmNoIiwiYmxhbmtMaW5lIiwibmV4dEJ1bGxldFJlZ2V4IiwiTWF0aCIsIm1pbiIsImhyUmVnZXgiLCJmZW5jZXNCZWdpblJlZ2V4IiwiaGVhZGluZ0JlZ2luUmVnZXgiLCJyYXdMaW5lIiwiaXNjaGVja2VkIiwiaXN0YXNrIiwidGFzayIsImNoZWNrZWQiLCJ0cmltRW5kIiwic3BhY2VycyIsImZpbHRlciIsImhhc011bHRpcGxlTGluZUJyZWFrcyIsInNvbWUiLCJwcmUiLCJkZWYiLCJ0YWciLCJ0YWJsZSIsImhlYWRlcnMiLCJhbGlnbnMiLCJyb3dzIiwiaXRlbSIsImhlYWRlciIsImFsaWduIiwicm93IiwiY2VsbCIsImxoZWFkaW5nIiwicGFyYWdyYXBoIiwiZXNjYXBlIiwiaW5SYXdCbG9jayIsInRyaW1tZWRVcmwiLCJydHJpbVNsYXNoIiwibGFzdFBhcmVuSW5kZXgiLCJiIiwiaW5kZXhPZiIsImxldmVsIiwiZmluZENsb3NpbmdCcmFja2V0IiwibGlua0xlbiIsInJlZmxpbmsiLCJsaW5rcyIsIm5vbGluayIsImVtU3Ryb25nIiwibWFza2VkU3JjIiwicHJldkNoYXIiLCJlbVN0cm9uZ0xEZWxpbSIsInB1bmN0dWF0aW9uIiwibExlbmd0aCIsInJEZWxpbSIsInJMZW5ndGgiLCJkZWxpbVRvdGFsIiwibWlkRGVsaW1Ub3RhbCIsImVuZFJlZyIsImVtU3Ryb25nUkRlbGltQXN0IiwiZW1TdHJvbmdSRGVsaW1VbmQiLCJsYXN0SW5kZXgiLCJsYXN0Q2hhckxlbmd0aCIsImluZGV4IiwiY29kZXNwYW4iLCJoYXNOb25TcGFjZUNoYXJzIiwiaGFzU3BhY2VDaGFyc09uQm90aEVuZHMiLCJiciIsImRlbCIsImF1dG9saW5rIiwidXJsIiwicHJldkNhcFplcm8iLCJfYmFja3BlZGFsIiwiaW5saW5lVGV4dCIsImJ1bGxldCIsIl9wYXJhZ3JhcGgiLCJfYmxvY2tMYWJlbCIsIl90YWciLCJfY29tbWVudCIsImJsb2NrTm9ybWFsIiwiZ2ZtVGFibGUiLCJibG9ja0dmbSIsImJsb2NrUGVkYW50aWMiLCJfcHVuY3R1YXRpb24iLCJfaW5saW5lQ29tbWVudCIsIl9pbmxpbmVMYWJlbCIsImlubGluZU5vcm1hbCIsImJsb2NrU2tpcCIsInJlZmxpbmtTZWFyY2giLCJpbmxpbmVQZWRhbnRpYyIsImlubGluZUdmbSIsImlubGluZUJyZWFrcyIsIm5vcm1hbCIsIl9MZXhlciIsImlubGluZVF1ZXVlIiwiT2JqZWN0IiwiY3JlYXRlIiwibGV4IiwibGV4SW5saW5lIiwibmV4dCIsImxhc3RUb2tlbiIsImN1dFNyYyIsImxhc3RQYXJhZ3JhcGhDbGlwcGVkIiwibGVhZGluZyIsInRhYnMiLCJleHRUb2tlbml6ZXIiLCJjYWxsIiwic3RhcnRCbG9jayIsInN0YXJ0SW5kZXgiLCJJbmZpbml0eSIsInRlbXBTcmMiLCJ0ZW1wU3RhcnQiLCJmb3JFYWNoIiwiZ2V0U3RhcnRJbmRleCIsImVyck1zZyIsImNoYXJDb2RlQXQiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsImtlZXBQcmV2Q2hhciIsImtleXMiLCJpbmNsdWRlcyIsImxhc3RJbmRleE9mIiwic3RhcnRJbmxpbmUiLCJfUmVuZGVyZXIiLCJpbmZvc3RyaW5nIiwicXVvdGUiLCJib2R5IiwibGlzdGl0ZW0iLCJjaGVja2JveCIsInRhYmxlcm93IiwiY29udGVudCIsInRhYmxlY2VsbCIsImZsYWdzIiwic3Ryb25nIiwiZW0iLCJjbGVhbkhyZWYiLCJvdXQiLCJpbWFnZSIsIl9UZXh0UmVuZGVyZXIiLCJfUGFyc2VyIiwidGV4dFJlbmRlcmVyIiwicGFyc2UiLCJwYXJzZUlubGluZSIsInJlbmRlcmVycyIsImdlbmVyaWNUb2tlbiIsInJldCIsInBhcnNlciIsImhlYWRpbmdUb2tlbiIsImNvZGVUb2tlbiIsInRhYmxlVG9rZW4iLCJqIiwiayIsImJsb2NrcXVvdGVUb2tlbiIsImxpc3RUb2tlbiIsIml0ZW1Cb2R5IiwidW5zaGlmdCIsImh0bWxUb2tlbiIsInBhcmFncmFwaFRva2VuIiwidGV4dFRva2VuIiwiZXNjYXBlVG9rZW4iLCJ0YWdUb2tlbiIsImxpbmtUb2tlbiIsImltYWdlVG9rZW4iLCJzdHJvbmdUb2tlbiIsImVtVG9rZW4iLCJjb2Rlc3BhblRva2VuIiwiZGVsVG9rZW4iLCJfSG9va3MiLCJzdGF0aWMiLCJTZXQiLCJwcmVwcm9jZXNzIiwibWFya2Rvd24iLCJwb3N0cHJvY2VzcyIsInByb2Nlc3NBbGxUb2tlbnMiLCJtYXJrZWRJbnN0YW5jZSIsImRlZmF1bHRzIiwic2V0T3B0aW9ucyIsIlBhcnNlciIsIlJlbmRlcmVyIiwiVGV4dFJlbmRlcmVyIiwiTGV4ZXIiLCJUb2tlbml6ZXIiLCJIb29rcyIsImFyZ3MiLCJ1c2UiLCJjYWxsYmFjayIsInZhbHVlcyIsImNvbmNhdCIsImNoaWxkVG9rZW5zIiwiZmxhdCIsInBhY2siLCJvcHRzIiwiZXh0IiwicHJldlJlbmRlcmVyIiwiYXBwbHkiLCJleHRMZXZlbCIsInByb3AiLCJyZW5kZXJlclByb3AiLCJyZW5kZXJlckZ1bmMiLCJ0b2tlbml6ZXJQcm9wIiwidG9rZW5pemVyRnVuYyIsInByZXZUb2tlbml6ZXIiLCJob29rc1Byb3AiLCJob29rc0Z1bmMiLCJwcmV2SG9vayIsInBhc3NUaHJvdWdoSG9va3MiLCJoYXMiLCJhcmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJwYWNrV2Fsa3Rva2VucyIsIm9yaWdPcHQiLCJ3YXJuIiwidGhyb3dFcnJvciIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiYWxsIiwiY2F0Y2giLCJtZXNzYWdlIiwibXNnIiwicmVqZWN0IiwibWFya2VkIiwiZ2V0RGVmYXVsdHMiXSwic291cmNlUm9vdCI6IiJ9