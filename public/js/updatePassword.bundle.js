(()=>{"use strict";var e,t,r,o,n,s={745:(e,t,r)=>{const o=(0,r(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");function n(e,t="errorMessage"){const r=document.getElementById(t);r?(r.innerHTML=e,r.classList.remove("hidden")):console.error("Error element not found:",t)}function s(){const e=document.getElementById("updatePasswordForm"),t=document.getElementById("errorMessage"),r=document.getElementById("statusMessage");e&&e.addEventListener("submit",(async e=>{e.preventDefault(),t&&(t.classList.add("hidden"),t.textContent=""),r&&(r.classList.add("hidden"),r.textContent="");const s=document.getElementById("password").value;if(s===document.getElementById("confirmPassword").value)if(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(s)||s.length<8)n("Le mot de passe ne respecte pas les critères de sécurité.");else{!function(e,t){const r=document.getElementById(e),o=document.getElementById(t);r&&(r.disabled=!0),o&&o.classList.remove("hidden")}("updateBtn","updateSpinner");try{const{error:e}=await o.auth.updateUser({password:s});if(e)throw e;(function(e,t="info",r="statusMessage"){const o=document.getElementById(r);o?(o.textContent=e,o.classList.forEach((e=>{e.startsWith("alert-")&&o.classList.remove(e)})),o.classList.add(`alert-${t}`),o.classList.remove("hidden")):console.error("Status element not found:",r)})("Mot de passe mis à jour avec succès!","success"),setTimeout((()=>{window.location.href="/login"}),2e3)}catch(e){console.error("Password update error:",e),n("Une erreur est survenue lors de la mise à jour du mot de passe.")}finally{!function(e,t){const r=document.getElementById(e),o=document.getElementById(t);r&&(r.disabled=!1),o&&o.classList.add("hidden")}("updateBtn","updateSpinner")}}else n("Les mots de passe ne correspondent pas.")}))}document.addEventListener("DOMContentLoaded",(()=>{s(),console.log("Update password page initialized")}))}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return s[e].call(r.exports,r,r.exports,i),r.exports}i.m=s,e=[],i.O=(t,r,o,n)=>{if(!r){var s=1/0;for(l=0;l<e.length;l++){for(var[r,o,n]=e[l],a=!0,d=0;d<r.length;d++)(!1&n||s>=n)&&Object.keys(i.O).every((e=>i.O[e](r[d])))?r.splice(d--,1):(a=!1,n<s&&(s=n));if(a){e.splice(l--,1);var c=o();void 0!==c&&(t=c)}}return t}n=n||0;for(var l=e.length;l>0&&e[l-1][2]>n;l--)e[l]=e[l-1];e[l]=[r,o,n]},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var n=Object.create(null);i.r(n);var s={};t=t||[null,r({}),r([]),r(r)];for(var a=2&o&&e;"object"==typeof a&&!~t.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,i.d(n,s),n},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,r)=>(i.f[r](e,t),t)),[])),i.u=e=>"js/"+e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},n="urbandocs_webapp:",i.l=(e,t,r,s)=>{if(o[e])o[e].push(t);else{var a,d;if(void 0!==r)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+r){a=u;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,i.nc&&a.setAttribute("nonce",i.nc),a.setAttribute("data-webpack",n+r),a.src=e),o[e]=[t];var p=(t,r)=>{a.onerror=a.onload=null,clearTimeout(f);var n=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(r))),t)return t(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),d&&document.head.appendChild(a)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e+"../"})(),(()=>{var e={607:0};i.f.j=(t,r)=>{var o=i.o(e,t)?e[t]:void 0;if(0!==o)if(o)r.push(o[2]);else{var n=new Promise(((r,n)=>o=e[t]=[r,n]));r.push(o[2]=n);var s=i.p+i.u(t),a=new Error;i.l(s,(r=>{if(i.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var n=r&&("load"===r.type?"missing":r.type),s=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+n+": "+s+")",a.name="ChunkLoadError",a.type=n,a.request=s,o[1](a)}}),"chunk-"+t,t)}},i.O.j=t=>0===e[t];var t=(t,r)=>{var o,n,[s,a,d]=r,c=0;if(s.some((t=>0!==e[t]))){for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(d)var l=d(i)}for(t&&t(r);c<s.length;c++)n=s[c],i.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return i.O(l)},r=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var d=i.O(void 0,[303],(()=>i(745)));d=i.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,