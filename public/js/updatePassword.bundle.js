(()=>{"use strict";var e,t,r,o,n,a={2057:(e,t,r)=>{var o=r(9660),n=r(3715);document.addEventListener("DOMContentLoaded",(()=>{(function(){const e=document.getElementById("updatePasswordForm"),t=document.getElementById("errorMessage"),r=document.getElementById("statusMessage");e&&e.addEventListener("submit",(async e=>{e.preventDefault(),t&&(t.classList.add("hidden"),t.textContent=""),r&&(r.classList.add("hidden"),r.textContent="");const a=document.getElementById("password").value;if(a===document.getElementById("confirmPassword").value)if(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(a)||a.length<8)(0,n.Qg)("Le mot de passe ne respecte pas les critères de sécurité.");else{(0,n.Cs)("updateBtn","updateSpinner");try{const{error:e}=await o.N.auth.updateUser({password:a});if(e)throw e;(0,n.wc)("Mot de passe mis à jour avec succès!","success"),setTimeout((()=>{window.location.href="/auth/login"}),2e3)}catch(e){console.error("Password update error:",e),(0,n.Qg)("Une erreur est survenue lors de la mise à jour du mot de passe.")}finally{(0,n.RZ)("updateBtn","updateSpinner")}}else(0,n.Qg)("Les mots de passe ne correspondent pas.")}))})(),console.log("Update password page initialized")}))}},s={};function i(e){var t=s[e];if(void 0!==t)return t.exports;var r=s[e]={exports:{}};return a[e].call(r.exports,r,r.exports,i),r.exports}i.m=a,e=[],i.O=(t,r,o,n)=>{if(!r){var a=1/0;for(c=0;c<e.length;c++){for(var[r,o,n]=e[c],s=!0,d=0;d<r.length;d++)(!1&n||a>=n)&&Object.keys(i.O).every((e=>i.O[e](r[d])))?r.splice(d--,1):(s=!1,n<a&&(a=n));if(s){e.splice(c--,1);var u=o();void 0!==u&&(t=u)}}return t}n=n||0;for(var c=e.length;c>0&&e[c-1][2]>n;c--)e[c]=e[c-1];e[c]=[r,o,n]},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var n=Object.create(null);i.r(n);var a={};t=t||[null,r({}),r([]),r(r)];for(var s=2&o&&e;"object"==typeof s&&!~t.indexOf(s);s=r(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,i.d(n,a),n},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,r)=>(i.f[r](e,t),t)),[])),i.u=e=>"js/"+e+".chunk.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},n="urbandocs_webapp:",i.l=(e,t,r,a)=>{if(o[e])o[e].push(t);else{var s,d;if(void 0!==r)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var l=u[c];if(l.getAttribute("src")==e||l.getAttribute("data-webpack")==n+r){s=l;break}}s||(d=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",n+r),s.src=e),o[e]=[t];var p=(t,r)=>{s.onerror=s.onload=null,clearTimeout(f);var n=o[e];if(delete o[e],s.parentNode&&s.parentNode.removeChild(s),n&&n.forEach((e=>e(r))),t)return t(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=p.bind(null,s.onerror),s.onload=p.bind(null,s.onload),d&&document.head.appendChild(s)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.j=607,i.p="/",(()=>{var e={607:0};i.f.j=(t,r)=>{var o=i.o(e,t)?e[t]:void 0;if(0!==o)if(o)r.push(o[2]);else{var n=new Promise(((r,n)=>o=e[t]=[r,n]));r.push(o[2]=n);var a=i.p+i.u(t),s=new Error;i.l(a,(r=>{if(i.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var n=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;s.message="Loading chunk "+t+" failed.\n("+n+": "+a+")",s.name="ChunkLoadError",s.type=n,s.request=a,o[1](s)}}),"chunk-"+t,t)}},i.O.j=t=>0===e[t];var t=(t,r)=>{var o,n,[a,s,d]=r,u=0;if(a.some((t=>0!==e[t]))){for(o in s)i.o(s,o)&&(i.m[o]=s[o]);if(d)var c=d(i)}for(t&&t(r);u<a.length;u++)n=a[u],i.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return i.O(c)},r=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var d=i.O(void 0,[76],(()=>i(2057)));d=i.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,