(()=>{"use strict";var e,t,r,o,n,a={797:(e,t,r)=>{const o=(0,r(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");function n(e,t="errorMessage"){const r=document.getElementById(t);r?(r.innerHTML=e,r.classList.remove("hidden")):console.error("Error element not found:",t)}function a(e,t="info",r="statusMessage"){const o=document.getElementById(r);o?(o.textContent=e,o.classList.forEach((e=>{e.startsWith("alert-")&&o.classList.remove(e)})),o.classList.add(`alert-${t}`),o.classList.remove("hidden")):console.error("Status element not found:",r)}function i(e,t){const r=document.getElementById(e),o=document.getElementById(t);r&&(r.disabled=!0),o&&o.classList.remove("hidden")}function s(e,t){const r=document.getElementById(e),o=document.getElementById(t);r&&(r.disabled=!1),o&&o.classList.add("hidden")}let l=null,c=null;window.hCaptchaLoadedCallback=function(){console.log("hCaptcha API ready (hCaptchaLoadedCallback executed).");const e=document.getElementById("hcaptcha-container");if(e&&window.hcaptcha&&!l){console.log("Rendering hCaptcha widget from hCaptchaLoadedCallback...");try{l=window.hcaptcha.render(e,{sitekey:"7bd46420-d130-46fe-b634-e93ed7784f96",callback:e=>{c=e,console.log("hCaptcha token obtained:",e)},"expired-callback":()=>{c=null,console.log("hCaptcha token expired.")},"error-callback":e=>{c=null,console.error("hCaptcha error callback:",e),n(`Erreur CAPTCHA: ${e}. Veuillez réessayer.`)}}),void 0===l?(console.error("hCaptcha.render did not return a widgetId. Sitekey or container issue?"),n("Erreur initialisation CAPTCHA (ID widget non retourné).")):console.log("hCaptcha widget rendered. ID:",l)}catch(e){console.error("Error rendering hCaptcha:",e),n("Impossible d'afficher le CAPTCHA.")}}else e?window.hcaptcha?l&&console.log("hCaptchaLoadedCallback: Widget already seems rendered."):console.error("hCaptchaLoadedCallback: window.hcaptcha API not found."):console.error("hCaptchaLoadedCallback: #hcaptcha-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{(function(){console.log("initSignupPage called");const e=document.getElementById("signupForm"),t=document.getElementById("errorMessage"),r=document.getElementById("statusMessage"),d=document.getElementById("googleSignUpBtn");document.getElementById("hcaptcha-container")||console.error("#hcaptcha-container not found in the DOM. CAPTCHA cannot be rendered."),window.hcaptcha&&"function"==typeof window.hCaptchaLoadedCallback&&!l&&(console.log("initSignupPage: hCaptcha API seems available and callback defined, attempting render if not already done."),document.getElementById("hcaptcha-container")&&!l?console.log("initSignupPage: hCaptcha container present, widget not rendered. Expecting script's onload."):l&&console.log("initSignupPage: hCaptcha widget already rendered.")),e?e.addEventListener("submit",(async d=>{d.preventDefault(),t&&t.classList.add("hidden"),r&&r.classList.add("hidden");const u=document.getElementById("email").value.trim(),p=document.getElementById("password").value,g=document.getElementById("confirmPassword").value;let h=document.getElementById("phone").value.trim(),m=[];if(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(u)||m.push("L'adresse email n'est pas valide."),p!==g&&m.push("Les mots de passe ne correspondent pas."),(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(p)||p.length<8)&&m.push("Le format du mot de passe est invalide."),h||m.push("Le numéro de téléphone est requis."),h&&!/^(0|\+33)[1-9]\d{8}$/.test(h)&&m.push("Le format du numéro de téléphone est invalide (ex: 0612345678 ou +33612345678)."),c||m.push("Veuillez compléter le CAPTCHA."),m.length>0)n(m.join("<br>"));else{i("signupBtn","signupSpinner");try{let t=h;h.startsWith("0")&&(t=`+33${h.substring(1)}`);const{data:r,error:n}=await o.auth.signUp({email:u,password:p,options:{captchaToken:c}});if(n)throw n;if(!r.user)throw new Error("Erreur lors de la création de l'utilisateur.");if(t&&r.user.id){const{error:e}=await o.from("profiles").update({phone:t}).eq("id",r.user.id);e?(console.warn("Erreur MAJ profil avec téléphone:",e),a(`Compte créé pour ${u}. Veuillez vérifier votre email. Erreur enregistrement téléphone.`,"warning")):a(`Compte créé avec succès pour ${u}. Veuillez vérifier votre email. Téléphone enregistré.`,"success")}else a(t?`Compte créé pour ${u}. Veuillez vérifier votre email.`:`Compte créé pour ${u}. Veuillez vérifier votre email. Pas de numéro de téléphone fourni.`,"success");e.reset()}catch(e){console.error("Email/Password Signup error:",e);let t=e.message||"Une erreur est survenue.";e.message&&e.message.includes("User already registered")?t="Cette adresse email est déjà utilisée. Veuillez vous connecter ou utiliser une autre adresse.":e.message&&e.message.includes("Unable to validate phone number")?t="Le numéro de téléphone fourni n'est pas valide.":e.message&&e.message.toLowerCase().includes("captcha protection")&&(t="Erreur CAPTCHA du serveur. Veuillez réessayer. ("+e.message+")"),n(t)}finally{s("signupBtn","signupSpinner"),window.hcaptcha&&null!==l&&window.hcaptcha.reset(l),c=null}}})):console.error("Signup form (signupForm) not found."),d?d.addEventListener("click",(async()=>{i("googleSignUpBtn","googleSignUpSpinner");try{const{error:e}=await o.auth.signInWithOAuth({provider:"google",options:{redirectTo:`${window.location.origin}/profile.html`}});e&&(console.error("Error signing up with Google:",e),n(e.message||"Erreur lors de l'inscription avec Google."))}catch(e){console.error("Exception during Google sign-up:",e),n("Une exception est survenue lors de l'inscription avec Google.")}finally{s("googleSignUpBtn","googleSignUpSpinner")}})):console.warn("Google Sign-Up button (googleSignUpBtn) not found.")})(),console.log("Signup page initialized")}))}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={exports:{}};return a[e].call(r.exports,r,r.exports,s),r.exports}s.m=a,e=[],s.O=(t,r,o,n)=>{if(!r){var a=1/0;for(d=0;d<e.length;d++){for(var[r,o,n]=e[d],i=!0,l=0;l<r.length;l++)(!1&n||a>=n)&&Object.keys(s.O).every((e=>s.O[e](r[l])))?r.splice(l--,1):(i=!1,n<a&&(a=n));if(i){e.splice(d--,1);var c=o();void 0!==c&&(t=c)}}return t}n=n||0;for(var d=e.length;d>0&&e[d-1][2]>n;d--)e[d]=e[d-1];e[d]=[r,o,n]},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var a={};t=t||[null,r({}),r([]),r(r)];for(var i=2&o&&e;"object"==typeof i&&!~t.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,s.d(n,a),n},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},n="urbandocs_webapp:",s.l=(e,t,r,a)=>{if(o[e])o[e].push(t);else{var i,l;if(void 0!==r)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+r){i=u;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",n+r),i.src=e),o[e]=[t];var p=(t,r)=>{i.onerror=i.onload=null,clearTimeout(g);var n=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),n&&n.forEach((e=>e(r))),t)return t(r)},g=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={787:0};s.f.j=(t,r)=>{var o=s.o(e,t)?e[t]:void 0;if(0!==o)if(o)r.push(o[2]);else{var n=new Promise(((r,n)=>o=e[t]=[r,n]));r.push(o[2]=n);var a=s.p+s.u(t),i=new Error;s.l(a,(r=>{if(s.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var n=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;i.message="Loading chunk "+t+" failed.\n("+n+": "+a+")",i.name="ChunkLoadError",i.type=n,i.request=a,o[1](i)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,r)=>{var o,n,[a,i,l]=r,c=0;if(a.some((t=>0!==e[t]))){for(o in i)s.o(i,o)&&(s.m[o]=i[o]);if(l)var d=l(s)}for(t&&t(r);c<a.length;c++)n=a[c],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(d)},r=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var l=s.O(void 0,[303],(()=>s(797)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,