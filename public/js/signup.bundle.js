(()=>{"use strict";var e,t,n,r,o,s={797:(e,t,n)=>{const r=(0,n(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");function o(e,t="errorMessage"){const n=document.getElementById(t);n?(n.innerHTML=e,n.classList.remove("hidden")):console.error("Error element not found:",t)}function s(e,t){const n=document.getElementById(e),r=document.getElementById(t);n&&(n.disabled=!0),r&&r.classList.remove("hidden")}function i(e,t){const n=document.getElementById(e),r=document.getElementById(t);n&&(n.disabled=!1),r&&r.classList.add("hidden")}let l=null,a=null;function d(){console.log("initSignupPage called");const e=document.getElementById("signupForm"),t=document.getElementById("errorMessage"),n=document.getElementById("statusMessage"),d=document.getElementById("googleSignUpBtn");document.getElementById("turnstile-container")||console.error("#turnstile-container not found in the DOM. CAPTCHA cannot be rendered."),e?e.addEventListener("submit",(async d=>{d.preventDefault(),t&&t.classList.add("hidden"),n&&n.classList.add("hidden");const u=document.getElementById("email").value.trim(),c=document.getElementById("password").value,p=document.getElementById("confirmPassword").value;let g=document.getElementById("phone").value.trim(),m=[];if(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(u)||m.push("L'adresse email n'est pas valide."),c!==p&&m.push("Les mots de passe ne correspondent pas."),(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(c)||c.length<8)&&m.push("Le format du mot de passe est invalide."),g||m.push("Le numéro de téléphone est requis."),g&&!/^(0|\+33)[1-9]\d{8}$/.test(g)&&m.push("Le format du numéro de téléphone est invalide (ex: 0612345678 ou +33612345678)."),l||m.push("Veuillez compléter le CAPTCHA."),m.length>0)o(m.join("<br>"));else{s("signupBtn","signupSpinner");try{g.startsWith("0")&&(e164Phone=`+33${g.substring(1)}`);const{data:t,error:n}=await r.auth.signUp({email:u,password:c,options:{captchaToken:l}});if(n)throw n;if(!t.user)throw new Error("Erreur lors de la création de l'utilisateur.");(function(e,t="info",n="statusMessage"){const r=document.getElementById(n);r?(r.textContent=e,r.classList.forEach((e=>{e.startsWith("alert-")&&r.classList.remove(e)})),r.classList.add(`alert-${t}`),r.classList.remove("hidden")):console.error("Status element not found:",n)})("Compte créé ! Un email de confirmation a été envoyé.","success"),e&&(e.classList.add("hidden"),e.reset())}catch(e){console.error("Email/Password Signup error:",e);let t=e.message||"Une erreur est survenue.";e.message&&e.message.includes("User already registered")?t="Cette adresse email est déjà utilisée. Veuillez vous connecter ou utiliser une autre adresse.":e.message&&e.message.includes("Unable to validate phone number")?t="Le numéro de téléphone fourni n'est pas valide.":e.message&&e.message.toLowerCase().includes("captcha protection")&&(t="Erreur CAPTCHA du serveur. Veuillez réessayer. ("+e.message+")"),o(t)}finally{i("signupBtn","signupSpinner"),window.turnstile&&a&&(window.turnstile.reset(a),console.log("Turnstile widget has been reset.")),l=null}}})):console.error("Signup form (signupForm) not found."),d?d.addEventListener("click",(async()=>{s("googleSignUpBtn","googleSignUpSpinner");try{const{error:e}=await r.auth.signInWithOAuth({provider:"google",options:{redirectTo:`${window.location.origin}/profile.html`}});e&&(console.error("Error signing up with Google:",e),o(e.message||"Erreur lors de l'inscription avec Google."))}catch(e){console.error("Exception during Google sign-up:",e),o("Une exception est survenue lors de l'inscription avec Google.")}finally{i("googleSignUpBtn","googleSignUpSpinner")}})):console.warn("Google Sign-Up button (googleSignUpBtn) not found.")}window.onloadTurnstileCallback=function(){console.log("Turnstile API ready (onloadTurnstileCallback executed).");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!a){console.log("Rendering Turnstile widget from onloadTurnstileCallback...");try{a=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){l=e,console.log("Turnstile token obtained:",e)},"expired-callback":()=>{console.log("Turnstile token expired. Resetting widget. ID:",a),window.turnstile&&a&&window.turnstile.reset(a),l=null},"error-callback":e=>{l=null,console.error("Turnstile error callback:",e),o(`Erreur CAPTCHA: ${e}. Veuillez réessayer.`)}}),void 0===a?(console.error("Turnstile.render did not return a widgetId. Sitekey or container issue?"),o("Erreur initialisation CAPTCHA (ID widget non retourné).")):console.log("Turnstile widget rendered. ID:",a)}catch(e){console.error("Error rendering Turnstile:",e),o("Impossible d'afficher le CAPTCHA.")}}else e?window.turnstile?a&&console.log("onloadTurnstileCallback: Widget already seems rendered."):console.error("onloadTurnstileCallback: window.turnstile API not found."):console.error("onloadTurnstileCallback: #turnstile-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{d(),console.log("Signup page initialized")}))}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e].call(n.exports,n,n.exports,l),n.exports}l.m=s,e=[],l.O=(t,n,r,o)=>{if(!n){var s=1/0;for(u=0;u<e.length;u++){for(var[n,r,o]=e[u],i=!0,a=0;a<n.length;a++)(!1&o||s>=o)&&Object.keys(l.O).every((e=>l.O[e](n[a])))?n.splice(a--,1):(i=!1,o<s&&(s=o));if(i){e.splice(u--,1);var d=r();void 0!==d&&(t=d)}}return t}o=o||0;for(var u=e.length;u>0&&e[u-1][2]>o;u--)e[u]=e[u-1];e[u]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);l.r(o);var s={};t=t||[null,n({}),n([]),n(n)];for(var i=2&r&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,l.d(o,s),o},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",l.l=(e,t,n,s)=>{if(r[e])r[e].push(t);else{var i,a;if(void 0!==n)for(var d=document.getElementsByTagName("script"),u=0;u<d.length;u++){var c=d[u];if(c.getAttribute("src")==e||c.getAttribute("data-webpack")==o+n){i=c;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",o+n),i.src=e),r[e]=[t];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(g);var o=r[e];if(delete r[e],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},g=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),a&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={787:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var s=l.p+l.u(t),i=new Error;l.l(s,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",i.name="ChunkLoadError",i.type=o,i.request=s,r[1](i)}}),"chunk-"+t,t)}},l.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[s,i,a]=n,d=0;if(s.some((t=>0!==e[t]))){for(r in i)l.o(i,r)&&(l.m[r]=i[r]);if(a)var u=a(l)}for(t&&t(n);d<s.length;d++)o=s[d],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return l.O(u)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=l.O(void 0,[303],(()=>l(797)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,