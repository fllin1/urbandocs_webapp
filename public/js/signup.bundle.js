(()=>{"use strict";var e,t,n,r,o,s={4810:(e,t,n)=>{var r=n(3715),o=n(9660);let s=null,i=null;window.onloadTurnstileCallback=function(){console.log("Turnstile API ready (onloadTurnstileCallback executed).");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!i){console.log("Rendering Turnstile widget from onloadTurnstileCallback...");try{i=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){s=e,console.log("Turnstile token obtained:",e)},"expired-callback":()=>{console.log("Turnstile token expired. Resetting widget. ID:",i),window.turnstile&&i&&window.turnstile.reset(i),s=null},"error-callback":e=>{s=null,console.error("Turnstile error callback:",e),(0,r.Qg)(`Erreur CAPTCHA: ${e}. Veuillez r√©essayer.`)}}),void 0===i?(console.error("Turnstile.render did not return a widgetId. Sitekey or container issue?"),(0,r.Qg)("Erreur initialisation CAPTCHA (ID widget non retourn√©).")):console.log("Turnstile widget rendered. ID:",i)}catch(e){console.error("Error rendering Turnstile:",e),(0,r.Qg)("Impossible d'afficher le CAPTCHA.")}}else e?window.turnstile?i&&console.log("onloadTurnstileCallback: Widget already seems rendered."):console.error("onloadTurnstileCallback: window.turnstile API not found."):console.error("onloadTurnstileCallback: #turnstile-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{(function(){console.log("initSignupPage called");const e=document.getElementById("signupForm"),t=(document.getElementById("errorMessage"),document.getElementById("statusMessage"),document.getElementById("googleSignUpBtn")),n=document.getElementById("turnstile-container"),l=document.getElementById("tosCheckbox"),a=document.getElementById("tosModal"),d=document.getElementById("tosModalBody"),c=document.getElementById("signupBtn"),u=document.getElementById("tosStatusMessage"),p=document.getElementById("tosLink"),g=document.getElementById("tosModalClose");function m(){a&&(a.classList.remove("show"),a.style.display="none",document.body.style.overflow="")}c&&(c.disabled=!0),t&&(t.disabled=!0),l&&(l.disabled=!0),p&&a&&p.addEventListener("click",(e=>{e.preventDefault(),a&&(a.classList.add("show"),a.style.display="block",document.body.style.overflow="hidden",d&&"true"!==d.dataset.loaded&&async function(){try{d.innerHTML="<p>Chargement des conditions d'utilisation...</p>";const e=await fetch("/policies/terms");if(!e.ok)throw new Error(`Failed to load Terms of Service: ${e.status}`);const t=await e.text(),n=(new DOMParser).parseFromString(t,"text/html"),r=n.querySelector("main")||n.querySelector(".policy-container")||n.body;d.innerHTML=r?r.innerHTML:t,d.dataset.loaded="true",d.scrollTop=0,l&&(l.disabled=!1)}catch(e){console.error("Error loading ToS:",e),d.innerHTML='\n        <div style="color: #dc3545; padding: 1rem; border: 1px solid #dc3545; border-radius: 4px; background-color: #f8d7da;">\n          <p><strong>Erreur lors du chargement des conditions d\'utilisation.</strong></p>\n          <p>Veuillez r√©essayer ou consulter les conditions directement sur <a href="/policies/terms" target="_blank">cette page</a>.</p>\n        </div>\n      ',l&&(l.disabled=!1)}}(),l&&(l.disabled=!1))})),g&&g.addEventListener("click",(()=>{m()})),a&&a.addEventListener("click",(e=>{e.target===a&&m()})),l&&l.addEventListener("change",(()=>{const e=l.checked;if(c&&(c.disabled=!e),t&&(t.disabled=!e),u&&(e?u.classList.add("hidden"):u.classList.remove("hidden")),e){const e=document.getElementById("errorMessage");e&&e.innerHTML.includes("Conditions G√©n√©rales d'Utilisation")&&(0,r.Bt)("errorMessage")}else(0,r.Qg)("Veuillez accepter les Conditions G√©n√©rales d'Utilisation.","errorMessage")})),n||console.error("#turnstile-container not found in the DOM. CAPTCHA cannot be rendered."),e?e.addEventListener("submit",(async t=>{t.preventDefault();const n=document.getElementById("email").value.trim(),a=document.getElementById("password").value,d=document.getElementById("confirmPassword").value;let c=document.getElementById("phone").value.trim(),u=[];if(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n)||u.push("L'adresse email n'est pas valide."),a!==d&&u.push("Les mots de passe ne correspondent pas."),(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(a)||a.length<8)&&u.push("Le format du mot de passe est invalide."),c||u.push("Le num√©ro de t√©l√©phone est requis."),c&&!/^(0|\+33)[1-9]\d{8}$/.test(c)&&u.push("Le format du num√©ro de t√©l√©phone est invalide (ex: 0612345678 ou +33612345678)."),s||u.push("Veuillez compl√©ter le CAPTCHA."),l&&l.checked||u.push("Veuillez lire et accepter les Conditions G√©n√©rales d'Utilisation."),u.length>0)(0,r.Qg)(u.join("<br>"));else{(0,r.Cs)("signupBtn","signupSpinner");try{let t=c;c.startsWith("0")&&(t=`+33${c.substring(1)}`);const{data:r,error:i}=await o.N.auth.signUp({email:n,password:a,options:{captchaToken:s}});if(i)throw i;if(!r.user)throw new Error("Erreur lors de la cr√©ation de l'utilisateur.");if(t&&r.user.id)try{await new Promise((e=>setTimeout(e,100)));const{error:e}=await o.N.from("profiles").update({phone:t}).eq("id",r.user.id);e&&console.warn("Could not update profile with phone number:",e)}catch(e){console.warn("Profile update failed:",e)}!function(e){const t=document.getElementById("statusMessage");t&&(t.innerHTML=`\n      <div class="signup-success">\n        <h3>Compte cr√©√© avec succ√®s !</h3>\n        <p><strong>Un email de confirmation a √©t√© envoy√© √† :</strong><br>\n        <code>${e}</code></p>\n        \n        <div class="confirmation-instructions">\n          <h4>üìß Prochaines √©tapes :</h4>\n          <ol>\n            <li>V√©rifiez votre bo√Æte de r√©ception (et n'oubliez pas vos spams !)</li>\n            <li>Cliquez sur le lien de confirmation dans l'email</li>\n            <li>Vous pourrez ensuite vous connecter avec vos identifiants</li>\n          </ol>\n        </div>\n        \n        <div class="confirmation-note">\n          <p><strong>Note :</strong> Vous devez confirmer votre email avant de pouvoir vous connecter.</p>\n        </div>\n      </div>\n    `,t.classList.remove("hidden"),t.classList.add("success"))}(n),e&&(e.classList.add("hidden"),e.reset())}catch(e){console.error("Email/Password Signup error:",e);let t=e.message||"Une erreur est survenue.";e.message&&e.message.includes("User already registered")?t="Cette adresse email est d√©j√† utilis√©e. Veuillez vous connecter ou utiliser une autre adresse.":e.message&&e.message.includes("Unable to validate phone number")?t="Le num√©ro de t√©l√©phone fourni n'est pas valide.":e.message&&e.message.toLowerCase().includes("captcha protection")&&(t="Erreur CAPTCHA du serveur. Veuillez r√©essayer. ("+e.message+")"),(0,r.Qg)(t)}finally{(0,r.RZ)("signupBtn","signupSpinner"),window.turnstile&&i&&(window.turnstile.reset(i),console.log("Turnstile widget has been reset.")),s=null}}})):console.error("Signup form (signupForm) not found."),t?t.addEventListener("click",(async()=>{(0,r.Cs)("googleSignUpBtn","googleSignUpSpinner");try{const{error:e}=await o.N.auth.signInWithOAuth({provider:"google",options:{}});e&&(console.error("Error signing up with Google:",e),(0,r.Qg)(e.message||"Erreur lors de l'inscription avec Google."))}catch(e){console.error("Exception during Google sign-up:",e),(0,r.Qg)("Une exception est survenue lors de l'inscription avec Google.")}finally{(0,r.RZ)("googleSignUpBtn","googleSignUpSpinner")}})):console.warn("Google Sign-Up button (googleSignUpBtn) not found.")})(),console.log("Signup page initialized")}))}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e].call(n.exports,n,n.exports,l),n.exports}l.m=s,e=[],l.O=(t,n,r,o)=>{if(!n){var s=1/0;for(c=0;c<e.length;c++){for(var[n,r,o]=e[c],i=!0,a=0;a<n.length;a++)(!1&o||s>=o)&&Object.keys(l.O).every((e=>l.O[e](n[a])))?n.splice(a--,1):(i=!1,o<s&&(s=o));if(i){e.splice(c--,1);var d=r();void 0!==d&&(t=d)}}return t}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);l.r(o);var s={};t=t||[null,n({}),n([]),n(n)];for(var i=2&r&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,l.d(o,s),o},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",l.l=(e,t,n,s)=>{if(r[e])r[e].push(t);else{var i,a;if(void 0!==n)for(var d=document.getElementsByTagName("script"),c=0;c<d.length;c++){var u=d[c];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==o+n){i=u;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",o+n),i.src=e),r[e]=[t];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(g);var o=r[e];if(delete r[e],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},g=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),a&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.j=787,(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={787:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var s=l.p+l.u(t),i=new Error;l.l(s,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+s+")",i.name="ChunkLoadError",i.type=o,i.request=s,r[1](i)}}),"chunk-"+t,t)}},l.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[s,i,a]=n,d=0;if(s.some((t=>0!==e[t]))){for(r in i)l.o(i,r)&&(l.m[r]=i[r]);if(a)var c=a(l)}for(t&&t(n);d<s.length;d++)o=s[d],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return l.O(c)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=l.O(void 0,[76],(()=>l(4810)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,