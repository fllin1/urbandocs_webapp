(()=>{"use strict";var e,t,n,o,r,s={4810:(e,t,n)=>{var o=n(3715),r=n(9660);let s=null,i=null;window.onloadTurnstileCallback=function(){console.log("Turnstile API ready (onloadTurnstileCallback executed).");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!i){console.log("Rendering Turnstile widget from onloadTurnstileCallback...");try{i=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){s=e,console.log("Turnstile token obtained:",e)},"expired-callback":()=>{console.log("Turnstile token expired. Resetting widget. ID:",i),window.turnstile&&i&&window.turnstile.reset(i),s=null},"error-callback":e=>{s=null,console.error("Turnstile error callback:",e),(0,o.Qg)(`Erreur CAPTCHA: ${e}. Veuillez r√©essayer.`)}}),void 0===i?(console.error("Turnstile.render did not return a widgetId. Sitekey or container issue?"),(0,o.Qg)("Erreur initialisation CAPTCHA (ID widget non retourn√©).")):console.log("Turnstile widget rendered. ID:",i)}catch(e){console.error("Error rendering Turnstile:",e),(0,o.Qg)("Impossible d'afficher le CAPTCHA.")}}else e?window.turnstile?i&&console.log("onloadTurnstileCallback: Widget already seems rendered."):console.error("onloadTurnstileCallback: window.turnstile API not found."):console.error("onloadTurnstileCallback: #turnstile-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{(function(){console.log("initSignupPage called");const e=document.getElementById("signupForm"),t=(document.getElementById("errorMessage"),document.getElementById("statusMessage"),document.getElementById("googleSignUpBtn")),n=document.getElementById("turnstile-container"),l=document.getElementById("tosCheckbox"),a=document.getElementById("tosModal"),d=document.getElementById("tosModalBody"),u=document.getElementById("signupBtn"),c=document.getElementById("tosStatusMessage"),g=document.getElementById("tosLink"),p=document.getElementById("tosModalClose");function m(){a&&(a.classList.remove("show"),a.style.display="none",document.body.style.overflow="")}u&&(u.disabled=!0),t&&(t.disabled=!0),l&&(l.disabled=!0),g&&a&&g.addEventListener("click",(e=>{e.preventDefault(),a&&(a.classList.add("show"),a.style.display="block",document.body.style.overflow="hidden",d&&"true"!==d.dataset.loaded&&async function(){try{d.innerHTML="<p>Chargement des conditions d'utilisation...</p>";const e=await fetch("/policies/terms");if(!e.ok)throw new Error(`Failed to load Terms of Service: ${e.status}`);const t=await e.text(),n=(new DOMParser).parseFromString(t,"text/html"),o=n.querySelector("main")||n.querySelector(".policy-container")||n.body;d.innerHTML=o?o.innerHTML:t,d.dataset.loaded="true",d.scrollTop=0,l&&(l.disabled=!1)}catch(e){console.error("Error loading ToS:",e),d.innerHTML='\n        <div style="color: #dc3545; padding: 1rem; border: 1px solid #dc3545; border-radius: 4px; background-color: #f8d7da;">\n          <p><strong>Erreur lors du chargement des conditions d\'utilisation.</strong></p>\n          <p>Veuillez r√©essayer ou consulter les conditions directement sur <a href="/policies/terms" target="_blank">cette page</a>.</p>\n        </div>\n      ',l&&(l.disabled=!1)}}(),l&&(l.disabled=!1))})),p&&p.addEventListener("click",(()=>{m()})),a&&a.addEventListener("click",(e=>{e.target===a&&m()})),l&&l.addEventListener("change",(()=>{const e=l.checked;if(u&&(u.disabled=!e),t&&(t.disabled=!e),c&&(e?c.classList.add("hidden"):c.classList.remove("hidden")),e){const e=document.getElementById("errorMessage");e&&e.innerHTML.includes("Conditions G√©n√©rales d'Utilisation")&&(0,o.Bt)("errorMessage")}else(0,o.Qg)("Veuillez accepter les Conditions G√©n√©rales d'Utilisation.","errorMessage")})),n||console.error("#turnstile-container not found in the DOM. CAPTCHA cannot be rendered."),e?e.addEventListener("submit",(async t=>{t.preventDefault();const n=document.getElementById("email").value.trim(),a=document.getElementById("password").value,d=document.getElementById("confirmPassword").value;let u=document.getElementById("phone").value.trim(),c=[];if(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n)||c.push("L'adresse email n'est pas valide."),a!==d&&c.push("Les mots de passe ne correspondent pas."),(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(a)||a.length<8)&&c.push("Le format du mot de passe est invalide."),u||c.push("Le num√©ro de t√©l√©phone est requis."),u&&!/^(0|\+33)[1-9]\d{8}$/.test(u)&&c.push("Le format du num√©ro de t√©l√©phone est invalide (ex: 0612345678 ou +33612345678)."),s||c.push("Veuillez compl√©ter le CAPTCHA."),l&&l.checked||c.push("Veuillez lire et accepter les Conditions G√©n√©rales d'Utilisation."),c.length>0)(0,o.Qg)(c.join("<br>"));else{(0,o.Cs)("signupBtn","signupSpinner");try{let t=u;u.startsWith("0")&&(t=`+33${u.substring(1)}`);const{data:o,error:i}=await r.N.auth.signUp({email:n,password:a,options:{captchaToken:s}});if(i)throw i;if(!o.user)throw new Error("Erreur lors de la cr√©ation de l'utilisateur.");if(t&&o.user.id)try{await new Promise((e=>setTimeout(e,100)));const{error:e}=await r.N.from("profiles").update({phone:t}).eq("id",o.user.id);e&&console.warn("Could not update profile with phone number:",e)}catch(e){console.warn("Profile update failed:",e)}!function(e){const t=document.getElementById("statusMessage");t&&(t.innerHTML=`\n      <div class="signup-success">\n        <h3>Compte cr√©√© avec succ√®s !</h3>\n        <p><strong>Un email de confirmation a √©t√© envoy√© √† :</strong><br>\n        <code>${e}</code></p>\n        \n        <div class="confirmation-instructions">\n          <h4>üìß Prochaines √©tapes :</h4>\n          <ol>\n            <li>V√©rifiez votre bo√Æte de r√©ception (et n'oubliez pas vos spams !)</li>\n            <li>Cliquez sur le lien de confirmation dans l'email</li>\n            <li>Vous pourrez ensuite vous connecter avec vos identifiants</li>\n          </ol>\n        </div>\n        \n        <div class="confirmation-note">\n          <p><strong>Note :</strong> Vous devez confirmer votre email avant de pouvoir vous connecter.</p>\n        </div>\n      </div>\n    `,t.classList.remove("hidden"),t.classList.add("success"))}(n),e&&(e.classList.add("hidden"),e.reset())}catch(e){console.error("Email/Password Signup error:",e);let t=e.message||"Une erreur est survenue.";e.message&&e.message.includes("User already registered")?t="Cette adresse email est d√©j√† utilis√©e. Veuillez vous connecter ou utiliser une autre adresse.":e.message&&e.message.includes("Unable to validate phone number")?t="Le num√©ro de t√©l√©phone fourni n'est pas valide.":e.message&&e.message.toLowerCase().includes("captcha protection")&&(t="Erreur CAPTCHA du serveur. Veuillez r√©essayer. ("+e.message+")"),(0,o.Qg)(t)}finally{(0,o.RZ)("signupBtn","signupSpinner"),window.turnstile&&i&&(window.turnstile.reset(i),console.log("Turnstile widget has been reset.")),s=null}}})):console.error("Signup form (signupForm) not found."),t?t.addEventListener("click",(async()=>{(0,o.Cs)("googleSignUpBtn","googleSignUpSpinner");try{const{error:e}=await r.N.auth.signInWithOAuth({provider:"google",options:{}});e&&(console.error("Error signing up with Google:",e),(0,o.Qg)(e.message||"Erreur lors de l'inscription avec Google."))}catch(e){console.error("Exception during Google sign-up:",e),(0,o.Qg)("Une exception est survenue lors de l'inscription avec Google.")}finally{(0,o.RZ)("googleSignUpBtn","googleSignUpSpinner")}})):console.warn("Google Sign-Up button (googleSignUpBtn) not found.")})(),console.log("Signup page initialized")}))}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return s[e].call(n.exports,n,n.exports,l),n.exports}l.m=s,e=[],l.O=(t,n,o,r)=>{if(!n){var s=1/0;for(u=0;u<e.length;u++){for(var[n,o,r]=e[u],i=!0,a=0;a<n.length;a++)(!1&r||s>=r)&&Object.keys(l.O).every((e=>l.O[e](n[a])))?n.splice(a--,1):(i=!1,r<s&&(s=r));if(i){e.splice(u--,1);var d=o();void 0!==d&&(t=d)}}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);l.r(r);var s={};t=t||[null,n({}),n([]),n(n)];for(var i=2&o&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,l.d(r,s),r},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>"js/"+e+".chunk.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",l.l=(e,t,n,s)=>{if(o[e])o[e].push(t);else{var i,a;if(void 0!==n)for(var d=document.getElementsByTagName("script"),u=0;u<d.length;u++){var c=d[u];if(c.getAttribute("src")==e||c.getAttribute("data-webpack")==r+n){i=c;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",r+n),i.src=e),o[e]=[t];var g=(t,n)=>{i.onerror=i.onload=null,clearTimeout(p);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},p=setTimeout(g.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=g.bind(null,i.onerror),i.onload=g.bind(null,i.onload),a&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.j=787,l.p="/",(()=>{var e={787:0};l.f.j=(t,n)=>{var o=l.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var s=l.p+l.u(t),i=new Error;l.l(s,(n=>{if(l.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",i.name="ChunkLoadError",i.type=r,i.request=s,o[1](i)}}),"chunk-"+t,t)}},l.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[s,i,a]=n,d=0;if(s.some((t=>0!==e[t]))){for(o in i)l.o(i,o)&&(l.m[o]=i[o]);if(a)var u=a(l)}for(t&&t(n);d<s.length;d++)r=s[d],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(u)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=l.O(void 0,[76],(()=>l(4810)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LDZCQUFJQSxLQUFtQyw4QkFBSyxHQUN4R0QsRUFBbUIvRCxRQUFRMEQsRUFBcUJmLEtBQUssS0FBTSxJQUMzRG9CLEVBQW1CbkksS0FBTzhILEVBQXFCZixLQUFLLEtBQU1vQixFQUFtQm5JLEtBQUsrRyxLQUFLb0IsRyxLQ2xGdkYsSUFBSUUsRUFBc0J0RyxFQUFvQlEsT0FBRTVGLEVBQVcsQ0FBQyxLQUFLLElBQU9vRixFQUFvQixRQUM1RnNHLEVBQXNCdEcsRUFBb0JRLEVBQUU4RixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy9hdXRoL3NpZ251cC5qcyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwLy4vc3JjL2pzL2VudHJpZXMvc2lnbnVwLmpzIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL3J1bnRpbWVJZCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwidXJiYW5kb2NzX3dlYmFwcDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblxuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIi8vIHNyYy9hdXRoL3NpZ251cC5qc1xyXG4vKipcclxuICogU2lnbnVwIE1vZHVsZVxyXG4gKiBAbW9kdWxlIHNpZ251cFxyXG4gKiBAZGVzY3JpcHRpb24gSGFuZGxlcyB1c2VyIHJlZ2lzdHJhdGlvbiB3aXRoIGNsaWVudC1zaWRlIHZhbGlkYXRpb24sIEdvb2dsZSBPQXV0aCwgYW5kIHBob25lIHZlcmlmaWNhdGlvbiB1c2luZyBTdXBhYmFzZS5cclxuICogQHZlcnNpb24gMC4yLjFcclxuICpcclxuICogQGNoYW5nZWxvZ1xyXG4gKiAtIDAuMi4xICgyMDI1LTA1LTE4KTogQWRkZWQgY2FwdGNoYSB3aXRoIENsb3VkZmxhcmUgVHVybnN0aWxlLlxyXG4gKiAtIDAuMi4wICgyMDI1LTA1LTE4KTogQWRkZWQgcGhvbmUgbnVtYmVyIGlucHV0LCBPVFAgc2VuZGluZyBhbmQgdmVyaWZpY2F0aW9uIGZvciBlbWFpbC9wYXNzd29yZCBzaWdudXAuXHJcbiAqIC0gMC4xLjEgKDIwMjUtMDUtMTgpOiBBZGRlZCBHb29nbGUgU2lnbi1VcCBmdW5jdGlvbmFsaXR5LlxyXG4gKiAtIDAuMS4wICgyMDI1LTA1LTE1KTogTWlncmF0ZWQgdG8gU3VwYWJhc2UgY2xpZW50LXNpZGUgYXV0aCAodmVyc2lvbmluZyBhZGp1c3RlZClcclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gIHNob3dFcnJvcixcclxuICBzaG93U3RhdHVzLFxyXG4gIHNob3dMb2FkaW5nLFxyXG4gIGhpZGVMb2FkaW5nLFxyXG4gIGhpZGVFbGVtZW50LFxyXG59IGZyb20gXCIuL2F1dGguanNcIjtcclxuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiLi4vc3VwYWJhc2UtY2xpZW50LmpzXCI7XHJcblxyXG4vLyBTdG9yZSBwaG9uZSBudW1iZXIgdGVtcG9yYXJpbHkgYmV0d2VlbiBzdGVwc1xyXG5sZXQgY2FwdGNoYVRva2VuID0gbnVsbDsgLy8gVG8gc3RvcmUgdGhlIGNhcHRjaGEgdG9rZW4gKHVzZWQgYnkgYm90aCBoQ2FwdGNoYSBhbmQgVHVybnN0aWxlKVxyXG5sZXQgdHVybnN0aWxlV2lkZ2V0SWQgPSBudWxsOyAvLyBUbyBzdG9yZSBUdXJuc3RpbGUgd2lkZ2V0IElEXHJcblxyXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBDbG91ZGZsYXJlIFR1cm5zdGlsZSBzY3JpcHQgb25jZSBpdCdzIGxvYWRlZFxyXG4vLyAoZHVlIHRvICZvbmxvYWQ9b25sb2FkVHVybnN0aWxlQ2FsbGJhY2sgaW4gdGhlIHNjcmlwdCB0YWcgaW4gc2lnbnVwLmh0bWwpXHJcbndpbmRvdy5vbmxvYWRUdXJuc3RpbGVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICBjb25zb2xlLmxvZyhcIlR1cm5zdGlsZSBBUEkgcmVhZHkgKG9ubG9hZFR1cm5zdGlsZUNhbGxiYWNrIGV4ZWN1dGVkKS5cIik7XHJcbiAgY29uc3QgdHVybnN0aWxlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dXJuc3RpbGUtY29udGFpbmVyXCIpO1xyXG5cclxuICBpZiAodHVybnN0aWxlQ29udGFpbmVyICYmIHdpbmRvdy50dXJuc3RpbGUgJiYgIXR1cm5zdGlsZVdpZGdldElkKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBUdXJuc3RpbGUgd2lkZ2V0IGZyb20gb25sb2FkVHVybnN0aWxlQ2FsbGJhY2suLi5cIik7XHJcbiAgICB0cnkge1xyXG4gICAgICB0dXJuc3RpbGVXaWRnZXRJZCA9IHdpbmRvdy50dXJuc3RpbGUucmVuZGVyKHR1cm5zdGlsZUNvbnRhaW5lciwge1xyXG4gICAgICAgIHNpdGVrZXk6IFwiMHg0QUFBQUFBQmR6WTNJbk9VMl9Jbjk5XCIsXHJcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgICAgY2FwdGNoYVRva2VuID0gdG9rZW47XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlR1cm5zdGlsZSB0b2tlbiBvYnRhaW5lZDpcIiwgdG9rZW4pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJleHBpcmVkLWNhbGxiYWNrXCI6ICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICBcIlR1cm5zdGlsZSB0b2tlbiBleHBpcmVkLiBSZXNldHRpbmcgd2lkZ2V0LiBJRDpcIixcclxuICAgICAgICAgICAgdHVybnN0aWxlV2lkZ2V0SWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAod2luZG93LnR1cm5zdGlsZSAmJiB0dXJuc3RpbGVXaWRnZXRJZCkge1xyXG4gICAgICAgICAgICB3aW5kb3cudHVybnN0aWxlLnJlc2V0KHR1cm5zdGlsZVdpZGdldElkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhcHRjaGFUb2tlbiA9IG51bGw7IC8vIENsZWFyIHRoZSB0b2tlblxyXG4gICAgICAgICAgLy8gV2lkZ2V0IHNob3VsZCBiZSByZWFkeSBmb3IgYSBuZXcgY2hhbGxlbmdlIGFmdGVyIHJlc2V0LlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJlcnJvci1jYWxsYmFja1wiOiAoZXJyKSA9PiB7XHJcbiAgICAgICAgICBjYXB0Y2hhVG9rZW4gPSBudWxsO1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlR1cm5zdGlsZSBlcnJvciBjYWxsYmFjazpcIiwgZXJyKTtcclxuICAgICAgICAgIHNob3dFcnJvcihgRXJyZXVyIENBUFRDSEE6ICR7ZXJyfS4gVmV1aWxsZXogcsOpZXNzYXllci5gKTtcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHR1cm5zdGlsZVdpZGdldElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgXCJUdXJuc3RpbGUucmVuZGVyIGRpZCBub3QgcmV0dXJuIGEgd2lkZ2V0SWQuIFNpdGVrZXkgb3IgY29udGFpbmVyIGlzc3VlP1wiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzaG93RXJyb3IoXCJFcnJldXIgaW5pdGlhbGlzYXRpb24gQ0FQVENIQSAoSUQgd2lkZ2V0IG5vbiByZXRvdXJuw6kpLlwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlR1cm5zdGlsZSB3aWRnZXQgcmVuZGVyZWQuIElEOlwiLCB0dXJuc3RpbGVXaWRnZXRJZCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJlbmRlcmluZyBUdXJuc3RpbGU6XCIsIGUpO1xyXG4gICAgICBzaG93RXJyb3IoXCJJbXBvc3NpYmxlIGQnYWZmaWNoZXIgbGUgQ0FQVENIQS5cIik7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICghdHVybnN0aWxlQ29udGFpbmVyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwib25sb2FkVHVybnN0aWxlQ2FsbGJhY2s6ICN0dXJuc3RpbGUtY29udGFpbmVyIG5vdCBmb3VuZC5cIik7XHJcbiAgfSBlbHNlIGlmICghd2luZG93LnR1cm5zdGlsZSkge1xyXG4gICAgY29uc29sZS5lcnJvcihcIm9ubG9hZFR1cm5zdGlsZUNhbGxiYWNrOiB3aW5kb3cudHVybnN0aWxlIEFQSSBub3QgZm91bmQuXCIpO1xyXG4gIH0gZWxzZSBpZiAodHVybnN0aWxlV2lkZ2V0SWQpIHtcclxuICAgIGNvbnNvbGUubG9nKFwib25sb2FkVHVybnN0aWxlQ2FsbGJhY2s6IFdpZGdldCBhbHJlYWR5IHNlZW1zIHJlbmRlcmVkLlwiKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogU2hvdyBkZXRhaWxlZCBzaWdudXAgc3VjY2VzcyBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCAtIFRoZSBlbWFpbCBhZGRyZXNzIHVzZWQgZm9yIHNpZ251cFxyXG4gKi9cclxuZnVuY3Rpb24gc2hvd1NpZ251cFN1Y2Nlc3MoZW1haWwpIHtcclxuICBjb25zdCBzdGF0dXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGF0dXNNZXNzYWdlXCIpO1xyXG4gIGlmIChzdGF0dXNFbGVtZW50KSB7XHJcbiAgICBzdGF0dXNFbGVtZW50LmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cInNpZ251cC1zdWNjZXNzXCI+XHJcbiAgICAgICAgPGgzPkNvbXB0ZSBjcsOpw6kgYXZlYyBzdWNjw6hzICE8L2gzPlxyXG4gICAgICAgIDxwPjxzdHJvbmc+VW4gZW1haWwgZGUgY29uZmlybWF0aW9uIGEgw6l0w6kgZW52b3nDqSDDoCA6PC9zdHJvbmc+PGJyPlxyXG4gICAgICAgIDxjb2RlPiR7ZW1haWx9PC9jb2RlPjwvcD5cclxuICAgICAgICBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlybWF0aW9uLWluc3RydWN0aW9uc1wiPlxyXG4gICAgICAgICAgPGg0PvCfk6cgUHJvY2hhaW5lcyDDqXRhcGVzIDo8L2g0PlxyXG4gICAgICAgICAgPG9sPlxyXG4gICAgICAgICAgICA8bGk+VsOpcmlmaWV6IHZvdHJlIGJvw650ZSBkZSByw6ljZXB0aW9uIChldCBuJ291YmxpZXogcGFzIHZvcyBzcGFtcyAhKTwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5DbGlxdWV6IHN1ciBsZSBsaWVuIGRlIGNvbmZpcm1hdGlvbiBkYW5zIGwnZW1haWw8L2xpPlxyXG4gICAgICAgICAgICA8bGk+Vm91cyBwb3VycmV6IGVuc3VpdGUgdm91cyBjb25uZWN0ZXIgYXZlYyB2b3MgaWRlbnRpZmlhbnRzPC9saT5cclxuICAgICAgICAgIDwvb2w+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpcm1hdGlvbi1ub3RlXCI+XHJcbiAgICAgICAgICA8cD48c3Ryb25nPk5vdGUgOjwvc3Ryb25nPiBWb3VzIGRldmV6IGNvbmZpcm1lciB2b3RyZSBlbWFpbCBhdmFudCBkZSBwb3V2b2lyIHZvdXMgY29ubmVjdGVyLjwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgO1xyXG4gICAgc3RhdHVzRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgc3RhdHVzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic3VjY2Vzc1wiKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyB0aGUgc2lnbnVwIHBhZ2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0U2lnbnVwUGFnZSgpIHtcclxuICBjb25zb2xlLmxvZyhcImluaXRTaWdudXBQYWdlIGNhbGxlZFwiKTtcclxuICBjb25zdCBzaWdudXBGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaWdudXBGb3JtXCIpO1xyXG4gIGNvbnN0IGVycm9yTWVzc2FnZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3JNZXNzYWdlXCIpO1xyXG4gIGNvbnN0IHN0YXR1c01lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXR1c01lc3NhZ2VcIik7XHJcbiAgY29uc3QgZ29vZ2xlU2lnblVwQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnb29nbGVTaWduVXBCdG5cIik7XHJcbiAgY29uc3QgdHVybnN0aWxlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dXJuc3RpbGUtY29udGFpbmVyXCIpO1xyXG5cclxuICAvLyAtLS0gVGVybXMgb2YgU2VydmljZSBMb2dpYyBmb3IgU2lnbnVwIC0tLVxyXG4gIGNvbnN0IHRvc0NoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3NDaGVja2JveFwiKTtcclxuICBjb25zdCB0b3NNb2RhbEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvc01vZGFsXCIpO1xyXG4gIGNvbnN0IHRvc01vZGFsQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9zTW9kYWxCb2R5XCIpO1xyXG4gIGNvbnN0IHNpZ251cEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2lnbnVwQnRuXCIpO1xyXG4gIGNvbnN0IHRvc1N0YXR1c01lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvc1N0YXR1c01lc3NhZ2VcIik7XHJcbiAgY29uc3QgdG9zTGluayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9zTGlua1wiKTtcclxuICBjb25zdCB0b3NNb2RhbENsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3NNb2RhbENsb3NlXCIpO1xyXG5cclxuICAvLyBJbml0aWFsbHkgZGlzYWJsZSBzaWdudXAgYnV0dG9uLCBHb29nbGUgYnV0dG9uLCBhbmQgY2hlY2tib3hcclxuICBpZiAoc2lnbnVwQnRuKSB7XHJcbiAgICBzaWdudXBCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuICBpZiAoZ29vZ2xlU2lnblVwQnRuKSB7XHJcbiAgICBnb29nbGVTaWduVXBCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuICBpZiAodG9zQ2hlY2tib3gpIHtcclxuICAgIHRvc0NoZWNrYm94LmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIEN1c3RvbSBtb2RhbCBoYW5kbGluZ1xyXG4gIGlmICh0b3NMaW5rICYmIHRvc01vZGFsRWxlbWVudCkge1xyXG4gICAgdG9zTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBzaG93TW9kYWwoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRvc01vZGFsQ2xvc2UpIHtcclxuICAgIHRvc01vZGFsQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgaGlkZU1vZGFsKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIENsb3NlIG1vZGFsIHdoZW4gY2xpY2tpbmcgb3V0c2lkZVxyXG4gIGlmICh0b3NNb2RhbEVsZW1lbnQpIHtcclxuICAgIHRvc01vZGFsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgaWYgKGUudGFyZ2V0ID09PSB0b3NNb2RhbEVsZW1lbnQpIHtcclxuICAgICAgICBoaWRlTW9kYWwoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzaG93TW9kYWwoKSB7XHJcbiAgICBpZiAodG9zTW9kYWxFbGVtZW50KSB7XHJcbiAgICAgIHRvc01vZGFsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2hvd1wiKTtcclxuICAgICAgdG9zTW9kYWxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cclxuICAgICAgLy8gTG9hZCBUb1MgY29udGVudCBpZiBub3QgYWxyZWFkeSBsb2FkZWRcclxuICAgICAgaWYgKHRvc01vZGFsQm9keSAmJiB0b3NNb2RhbEJvZHkuZGF0YXNldC5sb2FkZWQgIT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgbG9hZFRvU0NvbnRlbnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRW5hYmxlIGNoZWNrYm94IGltbWVkaWF0ZWx5IHdoZW4gbW9kYWwgb3BlbnNcclxuICAgICAgaWYgKHRvc0NoZWNrYm94KSB7XHJcbiAgICAgICAgdG9zQ2hlY2tib3guZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGlkZU1vZGFsKCkge1xyXG4gICAgaWYgKHRvc01vZGFsRWxlbWVudCkge1xyXG4gICAgICB0b3NNb2RhbEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICAgIHRvc01vZGFsRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcIlwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFRvU0NvbnRlbnQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0b3NNb2RhbEJvZHkuaW5uZXJIVE1MID1cclxuICAgICAgICBcIjxwPkNoYXJnZW1lbnQgZGVzIGNvbmRpdGlvbnMgZCd1dGlsaXNhdGlvbi4uLjwvcD5cIjtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCIvcG9saWNpZXMvdGVybXNcIik7XHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIFRlcm1zIG9mIFNlcnZpY2U6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0b3NIdG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG5cclxuICAgICAgLy8gRXh0cmFjdCBqdXN0IHRoZSBjb250ZW50IGZyb20gdGhlIEhUTUxcclxuICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG4gICAgICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHRvc0h0bWwsIFwidGV4dC9odG1sXCIpO1xyXG4gICAgICBjb25zdCBtYWluQ29udGVudCA9XHJcbiAgICAgICAgZG9jLnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpIHx8XHJcbiAgICAgICAgZG9jLnF1ZXJ5U2VsZWN0b3IoXCIucG9saWN5LWNvbnRhaW5lclwiKSB8fFxyXG4gICAgICAgIGRvYy5ib2R5O1xyXG5cclxuICAgICAgaWYgKG1haW5Db250ZW50KSB7XHJcbiAgICAgICAgdG9zTW9kYWxCb2R5LmlubmVySFRNTCA9IG1haW5Db250ZW50LmlubmVySFRNTDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0b3NNb2RhbEJvZHkuaW5uZXJIVE1MID0gdG9zSHRtbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdG9zTW9kYWxCb2R5LmRhdGFzZXQubG9hZGVkID0gXCJ0cnVlXCI7XHJcbiAgICAgIHRvc01vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xyXG5cclxuICAgICAgLy8gRW5hYmxlIGNoZWNrYm94IGFmdGVyIGNvbnRlbnQgaXMgbG9hZGVkXHJcbiAgICAgIGlmICh0b3NDaGVja2JveCkge1xyXG4gICAgICAgIHRvc0NoZWNrYm94LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIFRvUzpcIiwgZXJyb3IpO1xyXG4gICAgICB0b3NNb2RhbEJvZHkuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXYgc3R5bGU9XCJjb2xvcjogI2RjMzU0NTsgcGFkZGluZzogMXJlbTsgYm9yZGVyOiAxcHggc29saWQgI2RjMzU0NTsgYm9yZGVyLXJhZGl1czogNHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhkN2RhO1wiPlxyXG4gICAgICAgICAgPHA+PHN0cm9uZz5FcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGRlcyBjb25kaXRpb25zIGQndXRpbGlzYXRpb24uPC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgPHA+VmV1aWxsZXogcsOpZXNzYXllciBvdSBjb25zdWx0ZXIgbGVzIGNvbmRpdGlvbnMgZGlyZWN0ZW1lbnQgc3VyIDxhIGhyZWY9XCIvcG9saWNpZXMvdGVybXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5jZXR0ZSBwYWdlPC9hPi48L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIGA7XHJcblxyXG4gICAgICAvLyBFbmFibGUgY2hlY2tib3ggZXZlbiBpZiB0aGVyZSdzIGFuIGVycm9yIGxvYWRpbmcgY29udGVudFxyXG4gICAgICBpZiAodG9zQ2hlY2tib3gpIHtcclxuICAgICAgICB0b3NDaGVja2JveC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBIYW5kbGUgY2hlY2tib3ggY2hhbmdlXHJcbiAgaWYgKHRvc0NoZWNrYm94KSB7XHJcbiAgICB0b3NDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgaXNDaGVja2VkID0gdG9zQ2hlY2tib3guY2hlY2tlZDtcclxuXHJcbiAgICAgIC8vIEVuYWJsZS9kaXNhYmxlIGJvdGggYnV0dG9ucyBiYXNlZCBvbiBUb1MgYWNjZXB0YW5jZVxyXG4gICAgICBpZiAoc2lnbnVwQnRuKSB7XHJcbiAgICAgICAgc2lnbnVwQnRuLmRpc2FibGVkID0gIWlzQ2hlY2tlZDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZ29vZ2xlU2lnblVwQnRuKSB7XHJcbiAgICAgICAgZ29vZ2xlU2lnblVwQnRuLmRpc2FibGVkID0gIWlzQ2hlY2tlZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSGlkZS9zaG93IFRvUyBzdGF0dXMgbWVzc2FnZVxyXG4gICAgICBpZiAodG9zU3RhdHVzTWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChpc0NoZWNrZWQpIHtcclxuICAgICAgICAgIHRvc1N0YXR1c01lc3NhZ2UuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdG9zU3RhdHVzTWVzc2FnZS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFpc0NoZWNrZWQpIHtcclxuICAgICAgICBzaG93RXJyb3IoXHJcbiAgICAgICAgICBcIlZldWlsbGV6IGFjY2VwdGVyIGxlcyBDb25kaXRpb25zIEfDqW7DqXJhbGVzIGQnVXRpbGlzYXRpb24uXCIsXHJcbiAgICAgICAgICBcImVycm9yTWVzc2FnZVwiXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDbGVhciBUb1MtcmVsYXRlZCBlcnJvciBtZXNzYWdlc1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3JNZXNzYWdlXCIpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGVycm9yRWxlbWVudCAmJlxyXG4gICAgICAgICAgZXJyb3JFbGVtZW50LmlubmVySFRNTC5pbmNsdWRlcyhcIkNvbmRpdGlvbnMgR8OpbsOpcmFsZXMgZCdVdGlsaXNhdGlvblwiKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgaGlkZUVsZW1lbnQoXCJlcnJvck1lc3NhZ2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy8gLS0tIEVuZCBUZXJtcyBvZiBTZXJ2aWNlIExvZ2ljIGZvciBTaWdudXAgLS0tXHJcblxyXG4gIGlmICghdHVybnN0aWxlQ29udGFpbmVyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICBcIiN0dXJuc3RpbGUtY29udGFpbmVyIG5vdCBmb3VuZCBpbiB0aGUgRE9NLiBDQVBUQ0hBIGNhbm5vdCBiZSByZW5kZXJlZC5cIlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGlmIChzaWdudXBGb3JtKSB7XHJcbiAgICBzaWdudXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgYXN5bmMgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgY29uc3QgZW1haWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVtYWlsXCIpLnZhbHVlLnRyaW0oKTtcclxuICAgICAgY29uc3QgcGFzc3dvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhc3N3b3JkXCIpLnZhbHVlO1xyXG4gICAgICBjb25zdCBjb25maXJtUGFzc3dvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbmZpcm1QYXNzd29yZFwiKS52YWx1ZTtcclxuICAgICAgbGV0IHBob25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaG9uZVwiKS52YWx1ZS50cmltKCk7IC8vIEdldCBwaG9uZSBudW1iZXJcclxuXHJcbiAgICAgIGxldCB2YWxpZGF0aW9uRXJyb3JzID0gW107XHJcbiAgICAgIGNvbnN0IGVtYWlsUGF0dGVybiA9IC9eW15cXHNAXStAW15cXHNAXStcXC5bXlxcc0BdKyQvO1xyXG4gICAgICBpZiAoIWVtYWlsUGF0dGVybi50ZXN0KGVtYWlsKSlcclxuICAgICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goXCJMJ2FkcmVzc2UgZW1haWwgbidlc3QgcGFzIHZhbGlkZS5cIik7XHJcbiAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKVxyXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaChcIkxlcyBtb3RzIGRlIHBhc3NlIG5lIGNvcnJlc3BvbmRlbnQgcGFzLlwiKTtcclxuICAgICAgY29uc3QgcGFzc3dvcmRDb21wbGV4aXR5UGF0dGVybiA9IC9eKD89LipbYS16XSkoPz0uKltBLVpdKSg/PS4qXFxkKS4rJC87XHJcbiAgICAgIGlmICghcGFzc3dvcmRDb21wbGV4aXR5UGF0dGVybi50ZXN0KHBhc3N3b3JkKSB8fCBwYXNzd29yZC5sZW5ndGggPCA4KVxyXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaChcIkxlIGZvcm1hdCBkdSBtb3QgZGUgcGFzc2UgZXN0IGludmFsaWRlLlwiKTtcclxuICAgICAgaWYgKCFwaG9uZSkgdmFsaWRhdGlvbkVycm9ycy5wdXNoKFwiTGUgbnVtw6lybyBkZSB0w6lsw6lwaG9uZSBlc3QgcmVxdWlzLlwiKTtcclxuICAgICAgLy8gQmFzaWMgcGhvbmUgdmFsaWRhdGlvbiAoeW91IG1pZ2h0IHdhbnQgYSBtb3JlIHJvYnVzdCBvbmUpXHJcbiAgICAgIGNvbnN0IHBob25lUGF0dGVybiA9IC9eKDB8XFwrMzMpWzEtOV1cXGR7OH0kLzsgLy8gRXhhbXBsZTogMDYxMjM0NTY3OCBvciArMzM2MTIzNDU2NzhcclxuICAgICAgaWYgKHBob25lICYmICFwaG9uZVBhdHRlcm4udGVzdChwaG9uZSkpXHJcbiAgICAgICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKFxyXG4gICAgICAgICAgXCJMZSBmb3JtYXQgZHUgbnVtw6lybyBkZSB0w6lsw6lwaG9uZSBlc3QgaW52YWxpZGUgKGV4OiAwNjEyMzQ1Njc4IG91ICszMzYxMjM0NTY3OCkuXCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgaWYgKCFjYXB0Y2hhVG9rZW4pIHtcclxuICAgICAgICAvLyBDaGVjayBpZiBjYXB0Y2hhIGlzIHNvbHZlZFxyXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaChcIlZldWlsbGV6IGNvbXBsw6l0ZXIgbGUgQ0FQVENIQS5cIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdG9zQ2hlY2tib3ggfHwgIXRvc0NoZWNrYm94LmNoZWNrZWQpIHtcclxuICAgICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goXHJcbiAgICAgICAgICBcIlZldWlsbGV6IGxpcmUgZXQgYWNjZXB0ZXIgbGVzIENvbmRpdGlvbnMgR8OpbsOpcmFsZXMgZCdVdGlsaXNhdGlvbi5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh2YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBzaG93RXJyb3IodmFsaWRhdGlvbkVycm9ycy5qb2luKFwiPGJyPlwiKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzaG93TG9hZGluZyhcInNpZ251cEJ0blwiLCBcInNpZ251cFNwaW5uZXJcIik7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IGUxNjRQaG9uZSA9IHBob25lO1xyXG4gICAgICAgIGlmIChwaG9uZS5zdGFydHNXaXRoKFwiMFwiKSkge1xyXG4gICAgICAgICAgZTE2NFBob25lID0gYCszMyR7cGhvbmUuc3Vic3RyaW5nKDEpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdGVwIDE6IFNpZ24gdXAgd2l0aCBlbWFpbCBhbmQgcGFzc3dvcmRcclxuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yOiBzaWduVXBFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduVXAoe1xyXG4gICAgICAgICAgZW1haWwsXHJcbiAgICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICAgIG9wdGlvbnM6IHsgY2FwdGNoYVRva2VuIH0sIC8vIFBhc3MgY2FwdGNoYSB0b2tlblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoc2lnblVwRXJyb3IpIHRocm93IHNpZ25VcEVycm9yO1xyXG4gICAgICAgIGlmICghZGF0YS51c2VyKVxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyZXVyIGxvcnMgZGUgbGEgY3LDqWF0aW9uIGRlIGwndXRpbGlzYXRldXIuXCIpO1xyXG5cclxuICAgICAgICAvLyBTdGVwIDI6IFVwZGF0ZSBwcm9maWxlIHdpdGggcGhvbmUgbnVtYmVyIGlmIHByb3ZpZGVkXHJcbiAgICAgICAgLy8gTm90ZTogVGhlIHByb2ZpbGUgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUgZGF0YWJhc2UgdHJpZ2dlclxyXG4gICAgICAgIGlmIChlMTY0UGhvbmUgJiYgZGF0YS51c2VyLmlkKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBXYWl0IGEgbW9tZW50IGZvciB0aGUgdHJpZ2dlciB0byBjcmVhdGUgdGhlIHByb2ZpbGVcclxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB7IGVycm9yOiBwcm9maWxlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAgICAgLmZyb20oXCJwcm9maWxlc1wiKVxyXG4gICAgICAgICAgICAgIC51cGRhdGUoeyBwaG9uZTogZTE2NFBob25lIH0pXHJcbiAgICAgICAgICAgICAgLmVxKFwiaWRcIiwgZGF0YS51c2VyLmlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9maWxlRXJyb3IpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgICAgICBcIkNvdWxkIG5vdCB1cGRhdGUgcHJvZmlsZSB3aXRoIHBob25lIG51bWJlcjpcIixcclxuICAgICAgICAgICAgICAgIHByb2ZpbGVFcnJvclxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgLy8gRG9uJ3QgdGhyb3cgZXJyb3IgaGVyZSBhcyB0aGUgbWFpbiBzaWdudXAgd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBjYXRjaCAocHJvZmlsZVVwZGF0ZUVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlByb2ZpbGUgdXBkYXRlIGZhaWxlZDpcIiwgcHJvZmlsZVVwZGF0ZUVycm9yKTtcclxuICAgICAgICAgICAgLy8gRG9uJ3QgdGhyb3cgZXJyb3IgaGVyZSBhcyB0aGUgbWFpbiBzaWdudXAgd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNob3cgc3VjY2VzcyBtZXNzYWdlIHdpdGggZGV0YWlsZWQgaW5zdHJ1Y3Rpb25zXHJcbiAgICAgICAgc2hvd1NpZ251cFN1Y2Nlc3MoZW1haWwpO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHRoZSBmb3JtIGFuZCByZXNldCBpdFxyXG4gICAgICAgIGlmIChzaWdudXBGb3JtKSB7XHJcbiAgICAgICAgICBzaWdudXBGb3JtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7IC8vIEhpZGUgdGhlIGZvcm1cclxuICAgICAgICAgIHNpZ251cEZvcm0ucmVzZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVtYWlsL1Bhc3N3b3JkIFNpZ251cCBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgICAgIGxldCBkaXNwbGF5RXJyb3IgPSBlcnJvci5tZXNzYWdlIHx8IFwiVW5lIGVycmV1ciBlc3Qgc3VydmVudWUuXCI7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgZXJyb3IubWVzc2FnZSAmJlxyXG4gICAgICAgICAgZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIlVzZXIgYWxyZWFkeSByZWdpc3RlcmVkXCIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBkaXNwbGF5RXJyb3IgPVxyXG4gICAgICAgICAgICBcIkNldHRlIGFkcmVzc2UgZW1haWwgZXN0IGTDqWrDoCB1dGlsaXPDqWUuIFZldWlsbGV6IHZvdXMgY29ubmVjdGVyIG91IHV0aWxpc2VyIHVuZSBhdXRyZSBhZHJlc3NlLlwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICYmXHJcbiAgICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiVW5hYmxlIHRvIHZhbGlkYXRlIHBob25lIG51bWJlclwiKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgZGlzcGxheUVycm9yID0gXCJMZSBudW3DqXJvIGRlIHTDqWzDqXBob25lIGZvdXJuaSBuJ2VzdCBwYXMgdmFsaWRlLlwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICYmXHJcbiAgICAgICAgICBlcnJvci5tZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJjYXB0Y2hhIHByb3RlY3Rpb25cIilcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGRpc3BsYXlFcnJvciA9XHJcbiAgICAgICAgICAgIFwiRXJyZXVyIENBUFRDSEEgZHUgc2VydmV1ci4gVmV1aWxsZXogcsOpZXNzYXllci4gKFwiICtcclxuICAgICAgICAgICAgZXJyb3IubWVzc2FnZSArXHJcbiAgICAgICAgICAgIFwiKVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzaG93RXJyb3IoZGlzcGxheUVycm9yKTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBoaWRlTG9hZGluZyhcInNpZ251cEJ0blwiLCBcInNpZ251cFNwaW5uZXJcIik7XHJcbiAgICAgICAgaWYgKHdpbmRvdy50dXJuc3RpbGUgJiYgdHVybnN0aWxlV2lkZ2V0SWQpIHtcclxuICAgICAgICAgIHdpbmRvdy50dXJuc3RpbGUucmVzZXQodHVybnN0aWxlV2lkZ2V0SWQpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJUdXJuc3RpbGUgd2lkZ2V0IGhhcyBiZWVuIHJlc2V0LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FwdGNoYVRva2VuID0gbnVsbDsgLy8gQ2xlYXIgdG9rZW4gYWZ0ZXIgdXNlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiU2lnbnVwIGZvcm0gKHNpZ251cEZvcm0pIG5vdCBmb3VuZC5cIik7XHJcbiAgfVxyXG5cclxuICBpZiAoZ29vZ2xlU2lnblVwQnRuKSB7XHJcbiAgICBnb29nbGVTaWduVXBCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgc2hvd0xvYWRpbmcoXCJnb29nbGVTaWduVXBCdG5cIiwgXCJnb29nbGVTaWduVXBTcGlubmVyXCIpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbkluV2l0aE9BdXRoKHtcclxuICAgICAgICAgIHByb3ZpZGVyOiBcImdvb2dsZVwiLFxyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAvLyBHb29nbGUgT0F1dCBoIHdpbGwgaGFuZGxlIHRoZSByZWRpcmVjdCBhZnRlciBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIE5vIGN1c3RvbSByZWRpcmVjdFRvIG5lZWRlZCAtIGxldCBTdXBhYmFzZSBoYW5kbGUgdGhlIGRlZmF1bHQgZmxvd1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzaWduaW5nIHVwIHdpdGggR29vZ2xlOlwiLCBlcnJvcik7XHJcbiAgICAgICAgICBzaG93RXJyb3IoXHJcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgfHwgXCJFcnJldXIgbG9ycyBkZSBsJ2luc2NyaXB0aW9uIGF2ZWMgR29vZ2xlLlwiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPbiBzdWNjZXNzLCBTdXBhYmFzZSBoYW5kbGVzIHRoZSByZWRpcmVjdCBhdXRvbWF0aWNhbGx5XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkV4Y2VwdGlvbiBkdXJpbmcgR29vZ2xlIHNpZ24tdXA6XCIsIGVycm9yKTtcclxuICAgICAgICBzaG93RXJyb3IoXHJcbiAgICAgICAgICBcIlVuZSBleGNlcHRpb24gZXN0IHN1cnZlbnVlIGxvcnMgZGUgbCdpbnNjcmlwdGlvbiBhdmVjIEdvb2dsZS5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgaGlkZUxvYWRpbmcoXCJnb29nbGVTaWduVXBCdG5cIiwgXCJnb29nbGVTaWduVXBTcGlubmVyXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS53YXJuKFwiR29vZ2xlIFNpZ24tVXAgYnV0dG9uIChnb29nbGVTaWduVXBCdG4pIG5vdCBmb3VuZC5cIik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaW5pdFNpZ251cFBhZ2UsXHJcbn07XHJcbiIsIi8vIHNyYy9lbnRyaWVzL3NpZ251cC5qc1xyXG4vKipcclxuICogU2lnbnVwIEVudHJ5IFBvaW50XHJcbiAqXHJcbiAqIFRoaXMgbW9kdWxlIHNlcnZlcyBhcyB0aGUgZW50cnkgcG9pbnQgZm9yIHRoZSBzaWdudXAgcGFnZS5cclxuICovXHJcblxyXG4vLyBJbXBvcnQgb3VyIHNpZ251cCBtb2R1bGVcclxuaW1wb3J0IHsgaW5pdFNpZ251cFBhZ2UgfSBmcm9tIFwiLi4vYXV0aC9zaWdudXAuanNcIjtcclxuXHJcbi8vIEluaXRpYWxpemUgc2lnbnVwIHBhZ2Ugd2hlbiBET00gaXMgbG9hZGVkXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcclxuICAvLyBJbml0aWFsaXplIHNpZ251cCBwYWdlXHJcbiAgaW5pdFNpZ251cFBhZ2UoKTtcclxuXHJcbiAgY29uc29sZS5sb2coXCJTaWdudXAgcGFnZSBpbml0aWFsaXplZFwiKTtcclxufSk7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcImpzL1wiICsgY2h1bmtJZCArIFwiLmNodW5rLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaiA9IDc4NzsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0Nzg3OiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rdXJiYW5kb2NzX3dlYmFwcFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt1cmJhbmRvY3Nfd2ViYXBwXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbNzZdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg0ODEwKSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsImNhcHRjaGFUb2tlbiIsInR1cm5zdGlsZVdpZGdldElkIiwid2luZG93Iiwib25sb2FkVHVybnN0aWxlQ2FsbGJhY2siLCJjb25zb2xlIiwibG9nIiwidHVybnN0aWxlQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInR1cm5zdGlsZSIsInJlbmRlciIsInNpdGVrZXkiLCJjYWxsYmFjayIsInRva2VuIiwicmVzZXQiLCJlcnIiLCJlcnJvciIsInVuZGVmaW5lZCIsImUiLCJhZGRFdmVudExpc3RlbmVyIiwic2lnbnVwRm9ybSIsImdvb2dsZVNpZ25VcEJ0biIsInRvc0NoZWNrYm94IiwidG9zTW9kYWxFbGVtZW50IiwidG9zTW9kYWxCb2R5Iiwic2lnbnVwQnRuIiwidG9zU3RhdHVzTWVzc2FnZSIsInRvc0xpbmsiLCJ0b3NNb2RhbENsb3NlIiwiaGlkZU1vZGFsIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic3R5bGUiLCJkaXNwbGF5IiwiYm9keSIsIm92ZXJmbG93IiwiZGlzYWJsZWQiLCJwcmV2ZW50RGVmYXVsdCIsImFkZCIsImRhdGFzZXQiLCJsb2FkZWQiLCJhc3luYyIsImlubmVySFRNTCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsIkVycm9yIiwic3RhdHVzIiwidG9zSHRtbCIsInRleHQiLCJkb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJtYWluQ29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxUb3AiLCJsb2FkVG9TQ29udGVudCIsInRhcmdldCIsImlzQ2hlY2tlZCIsImNoZWNrZWQiLCJlcnJvckVsZW1lbnQiLCJpbmNsdWRlcyIsImVtYWlsIiwidmFsdWUiLCJ0cmltIiwicGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJwaG9uZSIsInZhbGlkYXRpb25FcnJvcnMiLCJ0ZXN0IiwicHVzaCIsImxlbmd0aCIsImpvaW4iLCJlMTY0UGhvbmUiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiZGF0YSIsInNpZ25VcEVycm9yIiwiYXV0aCIsInNpZ25VcCIsIm9wdGlvbnMiLCJ1c2VyIiwiaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJwcm9maWxlRXJyb3IiLCJmcm9tIiwidXBkYXRlIiwiZXEiLCJ3YXJuIiwicHJvZmlsZVVwZGF0ZUVycm9yIiwic3RhdHVzRWxlbWVudCIsInNob3dTaWdudXBTdWNjZXNzIiwiZGlzcGxheUVycm9yIiwibWVzc2FnZSIsInRvTG93ZXJDYXNlIiwic2lnbkluV2l0aE9BdXRoIiwicHJvdmlkZXIiLCJpbml0U2lnbnVwUGFnZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwiZnVsZmlsbGVkIiwiaiIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJnZXRQcm90b3R5cGVPZiIsIm9iaiIsInQiLCJtb2RlIiwidGhpcyIsIl9fZXNNb2R1bGUiLCJ0aGVuIiwibnMiLCJjcmVhdGUiLCJkZWYiLCJjdXJyZW50IiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZiIsImNodW5rSWQiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwibCIsInVybCIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYmluZCIsInR5cGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInAiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm5hbWUiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=