(()=>{"use strict";var e,t,n,r,o,i={797:(e,t,n)=>{const r=(0,n(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");function o(e,t="errorMessage"){const n=document.getElementById(t);n?(n.innerHTML=e,n.classList.remove("hidden")):console.error("Error element not found:",t)}function i(e,t){const n=document.getElementById(e),r=document.getElementById(t);n&&(n.disabled=!0),r&&r.classList.remove("hidden")}function s(e,t){const n=document.getElementById(e),r=document.getElementById(t);n&&(n.disabled=!1),r&&r.classList.add("hidden")}let l=null,a=null;function u(){console.log("initSignupPage called");const e=document.getElementById("signupForm"),t=(document.getElementById("errorMessage"),document.getElementById("statusMessage"),document.getElementById("googleSignUpBtn"));document.getElementById("turnstile-container")||console.error("#turnstile-container not found in the DOM. CAPTCHA cannot be rendered."),e?e.addEventListener("submit",(async t=>{t.preventDefault();const n=document.getElementById("email").value.trim(),u=document.getElementById("password").value,d=document.getElementById("confirmPassword").value;let c=document.getElementById("phone").value.trim(),p=[];if(/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(n)||p.push("L'adresse email n'est pas valide."),u!==d&&p.push("Les mots de passe ne correspondent pas."),(!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(u)||u.length<8)&&p.push("Le format du mot de passe est invalide."),c||p.push("Le numéro de téléphone est requis."),c&&!/^(0|\+33)[1-9]\d{8}$/.test(c)&&p.push("Le format du numéro de téléphone est invalide (ex: 0612345678 ou +33612345678)."),l||p.push("Veuillez compléter le CAPTCHA."),p.length>0)o(p.join("<br>"));else{i("signupBtn","signupSpinner");try{let t=c;c.startsWith("0")&&(t=`+33${c.substring(1)}`);const{data:o,error:i}=await r.auth.signUp({email:n,password:u,options:{captchaToken:l}});if(i)throw i;if(!o.user)throw new Error("Erreur lors de la création de l'utilisateur.");t&&o.user.id&&await r.from("profiles").update({phone:t}).eq("id",o.user.id),function(e,t="info",n="statusMessage"){const r=document.getElementById(n);r?(r.textContent=e,r.classList.forEach((e=>{e.startsWith("alert-")&&r.classList.remove(e)})),r.classList.add(`alert-${t}`),r.classList.remove("hidden")):console.error("Status element not found:",n)}("Compte créé ! Un email de confirmation a été envoyé.","success"),e&&(e.classList.add("hidden"),e.reset())}catch(e){console.error("Email/Password Signup error:",e);let t=e.message||"Une erreur est survenue.";e.message&&e.message.includes("User already registered")?t="Cette adresse email est déjà utilisée. Veuillez vous connecter ou utiliser une autre adresse.":e.message&&e.message.includes("Unable to validate phone number")?t="Le numéro de téléphone fourni n'est pas valide.":e.message&&e.message.toLowerCase().includes("captcha protection")&&(t="Erreur CAPTCHA du serveur. Veuillez réessayer. ("+e.message+")"),o(t)}finally{s("signupBtn","signupSpinner"),window.turnstile&&a&&(window.turnstile.reset(a),console.log("Turnstile widget has been reset.")),l=null}}})):console.error("Signup form (signupForm) not found."),t?t.addEventListener("click",(async()=>{i("googleSignUpBtn","googleSignUpSpinner");try{const{error:e}=await r.auth.signInWithOAuth({provider:"google",options:{redirectTo:`${window.location.origin}/profile.html`}});e&&(console.error("Error signing up with Google:",e),o(e.message||"Erreur lors de l'inscription avec Google."))}catch(e){console.error("Exception during Google sign-up:",e),o("Une exception est survenue lors de l'inscription avec Google.")}finally{s("googleSignUpBtn","googleSignUpSpinner")}})):console.warn("Google Sign-Up button (googleSignUpBtn) not found.")}window.onloadTurnstileCallback=function(){console.log("Turnstile API ready (onloadTurnstileCallback executed).");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!a){console.log("Rendering Turnstile widget from onloadTurnstileCallback...");try{a=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){l=e,console.log("Turnstile token obtained:",e)},"expired-callback":()=>{console.log("Turnstile token expired. Resetting widget. ID:",a),window.turnstile&&a&&window.turnstile.reset(a),l=null},"error-callback":e=>{l=null,console.error("Turnstile error callback:",e),o(`Erreur CAPTCHA: ${e}. Veuillez réessayer.`)}}),void 0===a?(console.error("Turnstile.render did not return a widgetId. Sitekey or container issue?"),o("Erreur initialisation CAPTCHA (ID widget non retourné).")):console.log("Turnstile widget rendered. ID:",a)}catch(e){console.error("Error rendering Turnstile:",e),o("Impossible d'afficher le CAPTCHA.")}}else e?window.turnstile?a&&console.log("onloadTurnstileCallback: Widget already seems rendered."):console.error("onloadTurnstileCallback: window.turnstile API not found."):console.error("onloadTurnstileCallback: #turnstile-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{u(),console.log("Signup page initialized")}))}},s={};function l(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e].call(n.exports,n,n.exports,l),n.exports}l.m=i,e=[],l.O=(t,n,r,o)=>{if(!n){var i=1/0;for(d=0;d<e.length;d++){for(var[n,r,o]=e[d],s=!0,a=0;a<n.length;a++)(!1&o||i>=o)&&Object.keys(l.O).every((e=>l.O[e](n[a])))?n.splice(a--,1):(s=!1,o<i&&(i=o));if(s){e.splice(d--,1);var u=r();void 0!==u&&(t=u)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);l.r(o);var i={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,l.d(o,i),o},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",l.l=(e,t,n,i)=>{if(r[e])r[e].push(t);else{var s,a;if(void 0!==n)for(var u=document.getElementsByTagName("script"),d=0;d<u.length;d++){var c=u[d];if(c.getAttribute("src")==e||c.getAttribute("data-webpack")==o+n){s=c;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",o+n),s.src=e),r[e]=[t];var p=(t,n)=>{s.onerror=s.onload=null,clearTimeout(g);var o=r[e];if(delete r[e],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(n))),t)return t(n)},g=setTimeout(p.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=p.bind(null,s.onerror),s.onload=p.bind(null,s.onload),a&&document.head.appendChild(s)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={787:0};l.f.j=(t,n)=>{var r=l.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var i=l.p+l.u(t),s=new Error;l.l(i,(n=>{if(l.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",s.name="ChunkLoadError",s.type=o,s.request=i,r[1](s)}}),"chunk-"+t,t)}},l.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[i,s,a]=n,u=0;if(i.some((t=>0!==e[t]))){for(r in s)l.o(s,r)&&(l.m[r]=s[r]);if(a)var d=a(l)}for(t&&t(n);u<i.length;u++)o=i[u],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return l.O(d)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=l.O(void 0,[303],(()=>l(797)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,