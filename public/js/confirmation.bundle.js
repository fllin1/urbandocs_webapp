(()=>{"use strict";var e,t,n,r,o,i={1008:(e,t,n)=>{var r=n(3715),o=n(9660);let i=null,a=null,s=null;async function l(e){if(e.preventDefault(),!a)return void(0,r.Qg)("Veuillez compléter le CAPTCHA avant de confirmer.");if(!i)return void(0,r.Qg)("Données de confirmation manquantes.");const t=document.getElementById("confirmBtn"),n=document.getElementById("confirmSpinner");t&&(t.disabled=!0),n&&n.classList.remove("hidden");try{"url"===i.type?await async function(e){try{const t=decodeURIComponent(e);console.log("Attempting email confirmation with URL:",t);const n=new URL(t),r=n.searchParams.get("token"),i=n.searchParams.get("type");if(!r)throw new Error("Token manquant dans l'URL de confirmation.");console.log("Extracted from URL - token:",r.substring(0,20)+"...","type:",i);const{data:a,error:s}=await o.N.auth.verifyOtp({token_hash:r,type:"email"});if(s)throw console.error("Error during URL-based confirmation:",s),new Error("Erreur lors de la confirmation: "+s.message);if(!a.user||!a.session)throw new Error("Impossible de confirmer l'email. Le lien est peut-être expiré ou déjà utilisé.");console.log("Email confirmed successfully via URL:",a.user.email),c()}catch(e){throw console.error("Confirmation processing error:",e),e}}(i.data):"token"===i.type&&await async function(e,t="signup"){try{console.log("Attempting token confirmation with type:",t);const{data:n,error:r}=await o.N.auth.verifyOtp({token_hash:e,type:"email"});if(r)throw console.error("Error during verifyOtp:",r),new Error("Erreur lors de la vérification du token: "+r.message);if(!n.user||!n.session)throw new Error("Impossible de confirmer l'email. Le token est peut-être invalide ou a expiré.");console.log("Email confirmed successfully:",n.user.email),c()}catch(e){throw console.error("Error during token-based confirmation:",e),e}}(i.data,i.tokenType)}catch(e){console.error("Confirmation error:",e),(0,r.Qg)(`Erreur lors de la confirmation: ${e.message}`)}finally{t&&(t.disabled=!1),n&&n.classList.add("hidden"),window.turnstile&&s&&window.turnstile.reset(s),a=null,t&&(t.disabled=!0)}}function c(e){const t=document.getElementById("confirmationForm"),n=document.getElementById("successMessage");t&&t.classList.add("hidden"),n&&(n.innerHTML='\n      <div class="confirmation-success">\n        <span class="success-icon">✅</span>\n        <h3>Confirmation réussie !</h3>\n        <p>Votre compte a été confirmé avec succès.</p>\n        <p>Vous allez être redirigé vers la page de connexion dans quelques secondes...</p>\n      </div>\n    ',n.classList.remove("hidden")),setTimeout((()=>{window.location.href="/auth/login"}),3e3)}window.onloadTurnstileCallback=function(){console.log("Turnstile API ready for confirmation page.");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!s){console.log("Rendering Turnstile widget for confirmation...");try{s=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){a=e,console.log("Turnstile token obtained for confirmation:",e);const t=document.getElementById("confirmBtn");t&&(t.disabled=!1)},"expired-callback":()=>{console.log("Turnstile token expired on confirmation page."),window.turnstile&&s&&window.turnstile.reset(s),a=null;const e=document.getElementById("confirmBtn");e&&(e.disabled=!0)},"error-callback":e=>{a=null,console.error("Turnstile error on confirmation page:",e),(0,r.Qg)(`Erreur CAPTCHA: ${e}. Veuillez réessayer.`);const t=document.getElementById("confirmBtn");t&&(t.disabled=!0)}}),void 0===s?(console.error("Turnstile.render did not return a widgetId for confirmation."),(0,r.Qg)("Erreur initialisation CAPTCHA.")):console.log("Turnstile widget rendered for confirmation. ID:",s)}catch(e){console.error("Error rendering Turnstile on confirmation page:",e),(0,r.Qg)("Impossible d'afficher le CAPTCHA.")}}},document.addEventListener("DOMContentLoaded",(()=>{(function(){const e=new URLSearchParams(window.location.search),t=window.location.hash;let n=e.get("token");const o=e.get("type");let a=e.get("confirmation_url");if(t){const e=new URLSearchParams(t.substring(1));n||(n=e.get("access_token")||e.get("token"))}console.log("Confirmation page initialized with:",{confirmationToken:n?"present":"missing",type:o,confirmationUrl:a?"present":"missing",urlHash:t||"none"}),document.getElementById("statusMessage"),document.getElementById("errorMessage");const s=document.getElementById("loading"),c=document.getElementById("confirmationForm"),d=document.getElementById("confirmForm");if(s&&s.classList.remove("hidden"),a)i={type:"url",data:a},u();else{if(!n||"signup"!==o&&"email_change"!==o)return s&&s.classList.add("hidden"),void(0,r.Qg)("Erreur: URL ou jeton de confirmation manquant ou invalide.");i={type:"token",data:n,tokenType:o},u()}function u(){s&&s.classList.add("hidden"),c&&c.classList.remove("hidden"),(0,r.wc)("Lien de confirmation valide. Veuillez compléter le CAPTCHA et confirmer.","info")}d&&d.addEventListener("submit",l)})(),console.log("Confirmation page initialized")}))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return i[e].call(n.exports,n,n.exports,s),n.exports}s.m=i,e=[],s.O=(t,n,r,o)=>{if(!n){var i=1/0;for(d=0;d<e.length;d++){for(var[n,r,o]=e[d],a=!0,l=0;l<n.length;l++)(!1&o||i>=o)&&Object.keys(s.O).every((e=>s.O[e](n[l])))?n.splice(l--,1):(a=!1,o<i&&(i=o));if(a){e.splice(d--,1);var c=r();void 0!==c&&(t=c)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);s.r(o);var i={};t=t||[null,n({}),n([]),n(n)];for(var a=2&r&&e;"object"==typeof a&&!~t.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(o,i),o},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",s.l=(e,t,n,i)=>{if(r[e])r[e].push(t);else{var a,l;if(void 0!==n)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==o+n){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",o+n),a.src=e),r[e]=[t];var m=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var o=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},f=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=508,(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={508:0};s.f.j=(t,n)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var i=s.p+s.u(t),a=new Error;s.l(i,(n=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+o+": "+i+")",a.name="ChunkLoadError",a.type=o,a.request=i,r[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[i,a,l]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);if(l)var d=l(s)}for(t&&t(n);c<i.length;c++)o=i[c],s.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return s.O(d)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var l=s.O(void 0,[76],(()=>s(1008)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,