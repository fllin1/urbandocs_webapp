(()=>{"use strict";var e,t,o,r,n,i={618:(e,t,o)=>{function r(e,t="info",o="statusMessage"){const r=document.getElementById(o);r?(r.textContent=e,r.classList.forEach((e=>{e.startsWith("alert-")&&r.classList.remove(e)})),r.classList.add(`alert-${t}`),r.classList.remove("hidden")):console.error("Status element not found:",o)}function n(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!1),r&&r.classList.add("hidden")}function i(){const e=new URLSearchParams(window.location.search).get("confirmation_url"),t=document.getElementById("confirmButton"),o=(document.getElementById("statusMessage"),document.getElementById("tosCheckbox")),i=document.getElementById("tosModal"),a=document.getElementById("tosModalBody");if(!e)return function(e,t="errorMessage"){const o=document.getElementById(t);o?(o.innerHTML=e,o.classList.remove("hidden")):console.error("Error element not found:",t)}("Erreur: URL de confirmation manquante."),void(t.disabled=!0);i&&(i.addEventListener("show.bs.modal",(async()=>{if("true"!==a.dataset.loaded)try{const e=await fetch("/terms");if(!e.ok)throw new Error(`Failed to load Terms of Service: ${e.status}`);const t=await e.text();a.innerHTML=t,a.dataset.loaded="true"}catch(e){console.error(e)}})),a.addEventListener("scroll",(()=>{a.scrollHeight-a.scrollTop<=a.clientHeight+2&&(o.disabled=!1)}))),o&&o.addEventListener("change",(()=>{t.disabled=!o.checked})),t.addEventListener("click",(()=>{!async function(e){document.getElementById("confirmButton"),document.getElementById("statusMessage");const t=document.getElementById("loading"),o=(document.getElementById("confirmSpinner"),document.getElementById("tosCheckbox"),()=>{n("confirmButton","confirmSpinner"),t&&t.classList.add("d-none"),r("Votre email a été vérifié! Redirection vers la page de connexion...","success"),setTimeout((()=>{window.location.href="/login"}),2e3)});(function(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!0),r&&r.classList.remove("hidden")})("confirmButton","confirmSpinner"),t&&t.classList.remove("d-none");try{const t=decodeURIComponent(e);console.log("Confirming email with URL:",t);const r=await fetch(t,{redirect:"manual"});if("opaqueredirect"===r.type)console.log("Supabase confirmation successful, redirect indicated (opaqueredirect)."),o();else{if(!r.ok){let e;console.log("Supabase confirmation failed with status:",r.status);const t=r.headers.get("content-type");t&&t.includes("application/json")?(e=await r.json(),console.log("Error Response JSON:",e)):(e=await r.text(),console.log("Error Response text:",e));let o="La confirmation a échoué.";throw e&&"object"==typeof e?e.error_description?o=e.error_description:e.msg?o=e.msg:e.error&&(o=e.error):e&&"string"==typeof e&&""!==e.trim()&&(o=e),new Error(o)}console.log("Supabase confirmation successful with a direct 2xx response."),o()}}catch(e){console.error("Confirmation processing error:",e),e.stack&&console.error("Error stack:",e.stack),n("confirmButton","confirmSpinner"),t&&t.classList.add("d-none"),r(`Une erreur est survenue durant la confirmation: ${e.message}`,"danger")}}(e)}))}(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU"),document.addEventListener("DOMContentLoaded",(()=>{i(),console.log("Confirmation page initialized")}))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var o=a[e]={exports:{}};return i[e].call(o.exports,o,o.exports,s),o.exports}s.m=i,e=[],s.O=(t,o,r,n)=>{if(!o){var i=1/0;for(l=0;l<e.length;l++){for(var[o,r,n]=e[l],a=!0,c=0;c<o.length;c++)(!1&n||i>=n)&&Object.keys(s.O).every((e=>s.O[e](o[c])))?o.splice(c--,1):(a=!1,n<i&&(i=n));if(a){e.splice(l--,1);var d=r();void 0!==d&&(t=d)}}return t}n=n||0;for(var l=e.length;l>0&&e[l-1][2]>n;l--)e[l]=e[l-1];e[l]=[o,r,n]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var i={};t=t||[null,o({}),o([]),o(o)];for(var a=2&r&&e;"object"==typeof a&&!~t.indexOf(a);a=o(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(n,i),n},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,o)=>(s.f[o](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},n="urbandocs_webapp:",s.l=(e,t,o,i)=>{if(r[e])r[e].push(t);else{var a,c;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+o){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",n+o),a.src=e),r[e]=[t];var m=(t,o)=>{a.onerror=a.onload=null,clearTimeout(f);var n=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(o))),t)return t(o)},f=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={508:0};s.f.j=(t,o)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)o.push(r[2]);else{var n=new Promise(((o,n)=>r=e[t]=[o,n]));o.push(r[2]=n);var i=s.p+s.u(t),a=new Error;s.l(i,(o=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;a.message="Loading chunk "+t+" failed.\n("+n+": "+i+")",a.name="ChunkLoadError",a.type=n,a.request=i,r[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,o)=>{var r,n,[i,a,c]=o,d=0;if(i.some((t=>0!==e[t]))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);if(c)var l=c(s)}for(t&&t(o);d<i.length;d++)n=i[d],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(l)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var c=s.O(void 0,[303],(()=>s(618)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,