(()=>{"use strict";var e,n,t,o,r,i={1008:(e,n,t)=>{var o=t(3715),r=t(9660);let i=null,a=null,s=null;async function l(e){if(e.preventDefault(),!a)return void(0,o.Qg)("Veuillez compléter le CAPTCHA avant de confirmer.");if(!i)return void(0,o.Qg)("Données de confirmation manquantes.");const n=document.getElementById("confirmBtn"),t=document.getElementById("confirmSpinner");n&&(n.disabled=!0),t&&t.classList.remove("hidden");try{"url"===i.type?await async function(e){try{const n=decodeURIComponent(e);console.log("Attempting email confirmation with URL:",n);const t=new URL(n),o=t.searchParams.get("token"),i=t.searchParams.get("type");if(!o)throw new Error("Token manquant dans l'URL de confirmation.");console.log("Extracted from URL - token:",o.substring(0,20)+"...","type:",i);const{data:a,error:s}=await r.N.auth.verifyOtp({token_hash:o,type:"email"});if(s)throw console.error("Error during URL-based confirmation:",s),new Error("Erreur lors de la confirmation: "+s.message);if(!a.user||!a.session)throw new Error("Impossible de confirmer l'email. Le lien est peut-être expiré ou déjà utilisé.");console.log("Email confirmed successfully via URL:",a.user.email),c()}catch(e){throw console.error("Confirmation processing error:",e),e}}(i.data):"token"===i.type&&await async function(e,n="signup"){try{console.log("Attempting token confirmation with type:",n);const{data:t,error:o}=await r.N.auth.verifyOtp({token_hash:e,type:"email"});if(o)throw console.error("Error during verifyOtp:",o),new Error("Erreur lors de la vérification du token: "+o.message);if(!t.user||!t.session)throw new Error("Impossible de confirmer l'email. Le token est peut-être invalide ou a expiré.");console.log("Email confirmed successfully:",t.user.email),c()}catch(e){throw console.error("Error during token-based confirmation:",e),e}}(i.data,i.tokenType)}catch(e){console.error("Confirmation error:",e),(0,o.Qg)(`Erreur lors de la confirmation: ${e.message}`)}finally{n&&(n.disabled=!1),t&&t.classList.add("hidden"),window.turnstile&&s&&window.turnstile.reset(s),a=null,n&&(n.disabled=!0)}}function c(e){const n=document.getElementById("confirmationForm"),t=document.getElementById("successMessage");n&&n.classList.add("hidden"),t&&(t.innerHTML='\n      <div class="confirmation-success">\n        <span class="success-icon">✅</span>\n        <h3>Confirmation réussie !</h3>\n        <p>Votre compte a été confirmé avec succès.</p>\n        <p>Vous allez être redirigé vers la page de connexion dans quelques secondes...</p>\n      </div>\n    ',t.classList.remove("hidden")),setTimeout((()=>{window.location.href="/auth/login"}),3e3)}window.onloadTurnstileCallback=function(){console.log("Turnstile API ready for confirmation page.");const e=document.getElementById("turnstile-container");if(e&&window.turnstile&&!s){console.log("Rendering Turnstile widget for confirmation...");try{s=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){a=e,console.log("Turnstile token obtained for confirmation:",e);const n=document.getElementById("confirmBtn");n&&(n.disabled=!1)},"expired-callback":()=>{console.log("Turnstile token expired on confirmation page."),window.turnstile&&s&&window.turnstile.reset(s),a=null;const e=document.getElementById("confirmBtn");e&&(e.disabled=!0)},"error-callback":e=>{a=null,console.error("Turnstile error on confirmation page:",e),(0,o.Qg)(`Erreur CAPTCHA: ${e}. Veuillez réessayer.`);const n=document.getElementById("confirmBtn");n&&(n.disabled=!0)}}),void 0===s?(console.error("Turnstile.render did not return a widgetId for confirmation."),(0,o.Qg)("Erreur initialisation CAPTCHA.")):console.log("Turnstile widget rendered for confirmation. ID:",s)}catch(e){console.error("Error rendering Turnstile on confirmation page:",e),(0,o.Qg)("Impossible d'afficher le CAPTCHA.")}}},document.addEventListener("DOMContentLoaded",(()=>{(function(){const e=new URLSearchParams(window.location.search),n=window.location.hash;let t=e.get("token");const r=e.get("type");let a=e.get("confirmation_url");if(n){const e=new URLSearchParams(n.substring(1));t||(t=e.get("access_token")||e.get("token"))}console.log("Confirmation page initialized with:",{confirmationToken:t?"present":"missing",type:r,confirmationUrl:a?"present":"missing",urlHash:n||"none"}),document.getElementById("statusMessage"),document.getElementById("errorMessage");const s=document.getElementById("loading"),c=document.getElementById("confirmationForm"),d=document.getElementById("confirmForm");if(s&&s.classList.remove("hidden"),a)i={type:"url",data:a},u();else{if(!t||"signup"!==r&&"email_change"!==r)return s&&s.classList.add("hidden"),void(0,o.Qg)("Erreur: URL ou jeton de confirmation manquant ou invalide.");i={type:"token",data:t,tokenType:r},u()}function u(){s&&s.classList.add("hidden"),c&&c.classList.remove("hidden"),(0,o.wc)("Lien de confirmation valide. Veuillez compléter le CAPTCHA et confirmer.","info")}d&&d.addEventListener("submit",l)})(),console.log("Confirmation page initialized")}))}},a={};function s(e){var n=a[e];if(void 0!==n)return n.exports;var t=a[e]={exports:{}};return i[e].call(t.exports,t,t.exports,s),t.exports}s.m=i,e=[],s.O=(n,t,o,r)=>{if(!t){var i=1/0;for(d=0;d<e.length;d++){for(var[t,o,r]=e[d],a=!0,l=0;l<t.length;l++)(!1&r||i>=r)&&Object.keys(s.O).every((e=>s.O[e](t[l])))?t.splice(l--,1):(a=!1,r<i&&(i=r));if(a){e.splice(d--,1);var c=o();void 0!==c&&(n=c)}}return n}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[t,o,r]},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);s.r(r);var i={};n=n||[null,t({}),t([]),t(t)];for(var a=2&o&&e;"object"==typeof a&&!~n.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((n=>i[n]=()=>e[n]));return i.default=()=>e,s.d(r,i),r},s.d=(e,n)=>{for(var t in n)s.o(n,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((n,t)=>(s.f[t](e,n),n)),[])),s.u=e=>"js/"+e+".chunk.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o={},r="urbandocs_webapp:",s.l=(e,n,t,i)=>{if(o[e])o[e].push(n);else{var a,l;if(void 0!==t)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+t){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+t),a.src=e),o[e]=[n];var f=(n,t)=>{a.onerror=a.onload=null,clearTimeout(m);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(t))),n)return n(t)},m=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=508,s.p="/",(()=>{var e={508:0};s.f.j=(n,t)=>{var o=s.o(e,n)?e[n]:void 0;if(0!==o)if(o)t.push(o[2]);else{var r=new Promise(((t,r)=>o=e[n]=[t,r]));t.push(o[2]=r);var i=s.p+s.u(n),a=new Error;s.l(i,(t=>{if(s.o(e,n)&&(0!==(o=e[n])&&(e[n]=void 0),o)){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;a.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",a.name="ChunkLoadError",a.type=r,a.request=i,o[1](a)}}),"chunk-"+n,n)}},s.O.j=n=>0===e[n];var n=(n,t)=>{var o,r,[i,a,l]=t,c=0;if(i.some((n=>0!==e[n]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(l)var d=l(s)}for(n&&n(t);c<i.length;c++)r=i[c],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(d)},t=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var l=s.O(void 0,[76],(()=>s(1008)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,