(()=>{"use strict";var e,n,o,t,r,i={6542:(e,n,o)=>{var t=o(3715),r=o(9660);let i=null,s=null;function l(){const e=document.getElementById("loginForm"),n=document.getElementById("errorMessage"),o=document.getElementById("togglePassword"),l=document.getElementById("password"),a=document.getElementById("googleSignInBtn");o&&l&&o.addEventListener("click",(()=>{const e="password"===l.getAttribute("type")?"text":"password";l.setAttribute("type",e);const n=o.querySelector("i");"password"===e?(n.classList.remove("bi-eye"),n.classList.add("bi-eye-slash")):(n.classList.remove("bi-eye-slash"),n.classList.add("bi-eye"))})),e&&e.addEventListener("submit",(async e=>{e.preventDefault(),n&&(n.classList.add("hidden"),n.textContent="");const o=document.getElementById("statusMessage");o&&(o.classList.add("hidden"),o.textContent="");const l=document.getElementById("email").value,a=document.getElementById("password").value;if(l&&a)if(i){(0,t.Cs)("loginBtn","loginSpinner");try{await async function(e,n){try{const{data:o,error:s}=await r.N.auth.signInWithPassword({email:e,password:n,options:{captchaToken:i}});if(s)throw s.message.toLowerCase().includes("email not confirmed")?new Error("Votre email n'a pas été confirmé. Veuillez vérifier votre boîte de réception."):s.message.toLowerCase().includes("invalid login credentials")?new Error("Email ou mot de passe incorrect."):new Error(s.message);if(!o.session)throw console.error("Login error: Missing session data from Supabase response",o),new Error("Données de session manquantes après la connexion.");o.user&&((0,t.lt)(o.user),console.log("[login.js] User data saved locally"));try{const e=await fetch(`${r.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.session.access_token}`},body:JSON.stringify({action:"status"})}),n=await e.json();if(n.success&&n.data.deletion_scheduled)return(0,t.wc)("Connexion réussie! Redirection vers le statut de suppression...","info"),setTimeout((()=>{window.location.href="/user/account-deletion-status"}),1e3),o.user}catch(e){console.warn("Could not check deletion status:",e)}return(0,t.wc)("Connexion réussie! Redirection...","success"),setTimeout((()=>{window.location.href="/"}),500),o.user}catch(e){throw console.error("Login error:",e),e}}(l,a)}catch(e){console.error("Login error:",e),(0,t.Qg)(e.message||"La connexion a échoué. Vérifiez vos identifiants.")}finally{(0,t.RZ)("loginBtn","loginSpinner"),window.turnstile&&s&&(window.turnstile.reset(s),console.log("Turnstile login widget has been reset.")),i=null}}else(0,t.Qg)("Veuillez compléter le CAPTCHA.");else(0,t.Qg)("Veuillez remplir tous les champs.")})),a?a.addEventListener("click",(async()=>{(0,t.Cs)("googleSignInBtn","googleSignInSpinner");try{const{error:e}=await r.N.auth.signInWithOAuth({provider:"google",options:{}});e&&(console.error("Error signing in with Google:",e),(0,t.Qg)(e.message||"Erreur lors de la connexion avec Google."))}catch(e){console.error("Exception during Google sign-in:",e),(0,t.Qg)("Une exception est survenue lors de la connexion avec Google.")}finally{(0,t.RZ)("googleSignInBtn","googleSignInSpinner")}})):console.warn("Google Sign-In button (googleSignInBtn) not found.")}window.onloadTurnstileLoginCallback=function(){console.log("Turnstile Login API ready (onloadTurnstileLoginCallback executed).");const e=document.getElementById("turnstile-login-container");if(e&&window.turnstile&&!s){console.log("Rendering Turnstile widget for login...");try{s=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){i=e,console.log("Turnstile login token obtained:",e)},"expired-callback":()=>{console.log("Turnstile login token expired. Resetting widget. ID:",s),window.turnstile&&s&&window.turnstile.reset(s),i=null},"error-callback":e=>{i=null,console.error("Turnstile login error callback:",e),(0,t.Qg)(`Erreur CAPTCHA (login): ${e}. Veuillez réessayer.`)}}),void 0===s?(console.error("Turnstile.render (login) did not return a widgetId. Sitekey or container issue?"),(0,t.Qg)("Erreur initialisation CAPTCHA (login, ID widget non retourné).")):console.log("Turnstile login widget rendered. ID:",s)}catch(e){console.error("Error rendering Turnstile for login:",e),(0,t.Qg)("Impossible d'afficher le CAPTCHA (login).")}}else e?window.turnstile?s&&console.log("onloadTurnstileLoginCallback: Login widget already seems rendered."):console.error("onloadTurnstileLoginCallback: window.turnstile API not found."):console.error("onloadTurnstileLoginCallback: #turnstile-login-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{l(),console.log("Login page initialized")}))}},s={};function l(e){var n=s[e];if(void 0!==n)return n.exports;var o=s[e]={exports:{}};return i[e].call(o.exports,o,o.exports,l),o.exports}l.m=i,e=[],l.O=(n,o,t,r)=>{if(!o){var i=1/0;for(d=0;d<e.length;d++){for(var[o,t,r]=e[d],s=!0,a=0;a<o.length;a++)(!1&r||i>=r)&&Object.keys(l.O).every((e=>l.O[e](o[a])))?o.splice(a--,1):(s=!1,r<i&&(i=r));if(s){e.splice(d--,1);var c=t();void 0!==c&&(n=c)}}return n}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[o,t,r]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var r=Object.create(null);l.r(r);var i={};n=n||[null,o({}),o([]),o(o)];for(var s=2&t&&e;"object"==typeof s&&!~n.indexOf(s);s=o(s))Object.getOwnPropertyNames(s).forEach((n=>i[n]=()=>e[n]));return i.default=()=>e,l.d(r,i),r},l.d=(e,n)=>{for(var o in n)l.o(n,o)&&!l.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((n,o)=>(l.f[o](e,n),n)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t={},r="urbandocs_webapp:",l.l=(e,n,o,i)=>{if(t[e])t[e].push(n);else{var s,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+o){s=u;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",r+o),s.src=e),t[e]=[n];var g=(n,o)=>{s.onerror=s.onload=null,clearTimeout(p);var r=t[e];if(delete t[e],s.parentNode&&s.parentNode.removeChild(s),r&&r.forEach((e=>e(o))),n)return n(o)},p=setTimeout(g.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=g.bind(null,s.onerror),s.onload=g.bind(null,s.onload),a&&document.head.appendChild(s)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.j=966,(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var n=l.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var t=o.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=o[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={966:0};l.f.j=(n,o)=>{var t=l.o(e,n)?e[n]:void 0;if(0!==t)if(t)o.push(t[2]);else{var r=new Promise(((o,r)=>t=e[n]=[o,r]));o.push(t[2]=r);var i=l.p+l.u(n),s=new Error;l.l(i,(o=>{if(l.o(e,n)&&(0!==(t=e[n])&&(e[n]=void 0),t)){var r=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;s.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",s.name="ChunkLoadError",s.type=r,s.request=i,t[1](s)}}),"chunk-"+n,n)}},l.O.j=n=>0===e[n];var n=(n,o)=>{var t,r,[i,s,a]=o,c=0;if(i.some((n=>0!==e[n]))){for(t in s)l.o(s,t)&&(l.m[t]=s[t]);if(a)var d=a(l)}for(n&&n(o);c<i.length;c++)r=i[c],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(d)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))})();var a=l.O(void 0,[76],(()=>l(6542)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,