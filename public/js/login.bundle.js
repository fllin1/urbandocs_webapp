(()=>{"use strict";var e,t,o,n,r,s={418:(e,t,o)=>{const n=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let r=null;function s(e,t="errorMessage"){const o=document.getElementById(t);o?(o.innerHTML=e,o.classList.remove("hidden")):console.error("Error element not found:",t)}function i(e,t){const o=document.getElementById(e),n=document.getElementById(t);o&&(o.disabled=!0),n&&n.classList.remove("hidden")}function a(e,t){const o=document.getElementById(e),n=document.getElementById(t);o&&(o.disabled=!1),n&&n.classList.add("hidden")}function l(){const e=document.getElementById("loginForm"),t=document.getElementById("errorMessage"),o=document.getElementById("togglePassword"),l=document.getElementById("password"),c=document.getElementById("googleSignInBtn");o&&l&&o.addEventListener("click",(()=>{const e="password"===l.getAttribute("type")?"text":"password";l.setAttribute("type",e);const t=o.querySelector("i");"password"===e?(t.classList.remove("bi-eye"),t.classList.add("bi-eye-slash")):(t.classList.remove("bi-eye-slash"),t.classList.add("bi-eye"))})),e&&e.addEventListener("submit",(async e=>{e.preventDefault(),t&&(t.classList.add("hidden"),t.textContent="");const o=document.getElementById("statusMessage");o&&(o.classList.add("hidden"),o.textContent="");const l=document.getElementById("email").value,c=document.getElementById("password").value;if(l&&c){i("loginBtn","loginSpinner");try{await async function(e,t){try{const{data:s,error:i}=await n.auth.signInWithPassword({email:e,password:t});if(i)throw i.message.toLowerCase().includes("email not confirmed")?new Error("Votre email n'a pas été confirmé. Veuillez vérifier votre boîte de réception."):i.message.toLowerCase().includes("invalid login credentials")?new Error("Email ou mot de passe incorrect."):new Error(i.message);if(!s.session)throw console.error("Login error: Missing session data from Supabase response",s),new Error("Données de session manquantes après la connexion.");return s.user&&(o=s.user,r=o,o?localStorage.setItem("currentUser",JSON.stringify(o)):localStorage.removeItem("currentUser"),console.log("[login.js] User data saved locally")),function(e,t="info",o="statusMessage"){const n=document.getElementById(o);n?(n.textContent=e,n.classList.forEach((e=>{e.startsWith("alert-")&&n.classList.remove(e)})),n.classList.add(`alert-${t}`),n.classList.remove("hidden")):console.error("Status element not found:",o)}("Connexion réussie! Redirection...","success"),setTimeout((()=>{window.location.href="/"}),1e3),s.user}catch(e){throw console.error("Login error:",e),e}var o}(l,c)}catch(e){console.error("Login error:",e),s(e.message||"La connexion a échoué. Vérifiez vos identifiants.")}finally{a("loginBtn","loginSpinner")}}else s("Veuillez remplir tous les champs.")})),c?c.addEventListener("click",(async()=>{i("googleSignInBtn","googleSignInSpinner");try{const{error:e}=await n.auth.signInWithOAuth({provider:"google",options:{}});e&&(console.error("Error signing in with Google:",e),s(e.message||"Erreur lors de la connexion avec Google."))}catch(e){console.error("Exception during Google sign-in:",e),s("Une exception est survenue lors de la connexion avec Google.")}finally{a("googleSignInBtn","googleSignInSpinner")}})):console.warn("Google Sign-In button (googleSignInBtn) not found.")}document.addEventListener("DOMContentLoaded",(()=>{l(),console.log("Login page initialized")}))}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var o=i[e]={exports:{}};return s[e].call(o.exports,o,o.exports,a),o.exports}a.m=s,e=[],a.O=(t,o,n,r)=>{if(!o){var s=1/0;for(d=0;d<e.length;d++){for(var[o,n,r]=e[d],i=!0,l=0;l<o.length;l++)(!1&r||s>=r)&&Object.keys(a.O).every((e=>a.O[e](o[l])))?o.splice(l--,1):(i=!1,r<s&&(s=r));if(i){e.splice(d--,1);var c=n();void 0!==c&&(t=c)}}return t}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[o,n,r]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var r=Object.create(null);a.r(r);var s={};t=t||[null,o({}),o([]),o(o)];for(var i=2&n&&e;"object"==typeof i&&!~t.indexOf(i);i=o(i))Object.getOwnPropertyNames(i).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,a.d(r,s),r},a.d=(e,t)=>{for(var o in t)a.o(t,o)&&!a.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,o)=>(a.f[o](e,t),t)),[])),a.u=e=>"js/"+e+".bundle.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="urbandocs_webapp:",a.l=(e,t,o,s)=>{if(n[e])n[e].push(t);else{var i,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+o){i=u;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",r+o),i.src=e),n[e]=[t];var g=(t,o)=>{i.onerror=i.onload=null,clearTimeout(m);var r=n[e];if(delete n[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(o))),t)return t(o)},m=setTimeout(g.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=g.bind(null,i.onerror),i.onload=g.bind(null,i.onload),l&&document.head.appendChild(i)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var n=o.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=o[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e+"../"})(),(()=>{var e={966:0};a.f.j=(t,o)=>{var n=a.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else{var r=new Promise(((o,r)=>n=e[t]=[o,r]));o.push(n[2]=r);var s=a.p+a.u(t),i=new Error;a.l(s,(o=>{if(a.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var r=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",i.name="ChunkLoadError",i.type=r,i.request=s,n[1](i)}}),"chunk-"+t,t)}},a.O.j=t=>0===e[t];var t=(t,o)=>{var n,r,[s,i,l]=o,c=0;if(s.some((t=>0!==e[t]))){for(n in i)a.o(i,n)&&(a.m[n]=i[n]);if(l)var d=l(a)}for(t&&t(o);c<s.length;c++)r=s[c],a.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return a.O(d)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var l=a.O(void 0,[303],(()=>a(418)));l=a.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,