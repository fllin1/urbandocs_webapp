(()=>{"use strict";var e,n,t,o,r,i={418:(e,n,t)=>{const o=(0,t(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let r=null;function i(e,n="errorMessage"){const t=document.getElementById(n);t?(t.innerHTML=e,t.classList.remove("hidden")):console.error("Error element not found:",n)}function s(e,n){const t=document.getElementById(e),o=document.getElementById(n);t&&(t.disabled=!0),o&&o.classList.remove("hidden")}function l(e,n){const t=document.getElementById(e),o=document.getElementById(n);t&&(t.disabled=!1),o&&o.classList.add("hidden")}let a=null,c=null;function d(){const e=document.getElementById("loginForm"),n=document.getElementById("errorMessage"),t=document.getElementById("togglePassword"),d=document.getElementById("password"),u=document.getElementById("googleSignInBtn");t&&d&&t.addEventListener("click",(()=>{const e="password"===d.getAttribute("type")?"text":"password";d.setAttribute("type",e);const n=t.querySelector("i");"password"===e?(n.classList.remove("bi-eye"),n.classList.add("bi-eye-slash")):(n.classList.remove("bi-eye-slash"),n.classList.add("bi-eye"))})),e&&e.addEventListener("submit",(async e=>{e.preventDefault(),n&&(n.classList.add("hidden"),n.textContent="");const t=document.getElementById("statusMessage");t&&(t.classList.add("hidden"),t.textContent="");const d=document.getElementById("email").value,u=document.getElementById("password").value;if(d&&u)if(a){s("loginBtn","loginSpinner");try{await async function(e,n){try{const{data:i,error:s}=await o.auth.signInWithPassword({email:e,password:n,options:{captchaToken:a}});if(s)throw s.message.toLowerCase().includes("email not confirmed")?new Error("Votre email n'a pas été confirmé. Veuillez vérifier votre boîte de réception."):s.message.toLowerCase().includes("invalid login credentials")?new Error("Email ou mot de passe incorrect."):new Error(s.message);if(!i.session)throw console.error("Login error: Missing session data from Supabase response",i),new Error("Données de session manquantes après la connexion.");return i.user&&(t=i.user,r=t,t?localStorage.setItem("currentUser",JSON.stringify(t)):localStorage.removeItem("currentUser"),console.log("[login.js] User data saved locally")),function(e,n="info",t="statusMessage"){const o=document.getElementById(t);o?(o.textContent=e,o.classList.forEach((e=>{e.startsWith("alert-")&&o.classList.remove(e)})),o.classList.add(`alert-${n}`),o.classList.remove("hidden")):console.error("Status element not found:",t)}("Connexion réussie! Redirection...","success"),setTimeout((()=>{window.location.href="/"}),500),i.user}catch(e){throw console.error("Login error:",e),e}var t}(d,u)}catch(e){console.error("Login error:",e),i(e.message||"La connexion a échoué. Vérifiez vos identifiants.")}finally{l("loginBtn","loginSpinner"),window.turnstile&&c&&(window.turnstile.reset(c),console.log("Turnstile login widget has been reset.")),a=null}}else i("Veuillez compléter le CAPTCHA.");else i("Veuillez remplir tous les champs.")})),u?u.addEventListener("click",(async()=>{s("googleSignInBtn","googleSignInSpinner");try{const{error:e}=await o.auth.signInWithOAuth({provider:"google",options:{}});e&&(console.error("Error signing in with Google:",e),i(e.message||"Erreur lors de la connexion avec Google."))}catch(e){console.error("Exception during Google sign-in:",e),i("Une exception est survenue lors de la connexion avec Google.")}finally{l("googleSignInBtn","googleSignInSpinner")}})):console.warn("Google Sign-In button (googleSignInBtn) not found.")}window.onloadTurnstileLoginCallback=function(){console.log("Turnstile Login API ready (onloadTurnstileLoginCallback executed).");const e=document.getElementById("turnstile-login-container");if(e&&window.turnstile&&!c){console.log("Rendering Turnstile widget for login...");try{c=window.turnstile.render(e,{sitekey:"0x4AAAAAABdzY3InOU2_In99",callback:function(e){a=e,console.log("Turnstile login token obtained:",e)},"expired-callback":()=>{console.log("Turnstile login token expired. Resetting widget. ID:",c),window.turnstile&&c&&window.turnstile.reset(c),a=null},"error-callback":e=>{a=null,console.error("Turnstile login error callback:",e),i(`Erreur CAPTCHA (login): ${e}. Veuillez réessayer.`)}}),void 0===c?(console.error("Turnstile.render (login) did not return a widgetId. Sitekey or container issue?"),i("Erreur initialisation CAPTCHA (login, ID widget non retourné).")):console.log("Turnstile login widget rendered. ID:",c)}catch(e){console.error("Error rendering Turnstile for login:",e),i("Impossible d'afficher le CAPTCHA (login).")}}else e?window.turnstile?c&&console.log("onloadTurnstileLoginCallback: Login widget already seems rendered."):console.error("onloadTurnstileLoginCallback: window.turnstile API not found."):console.error("onloadTurnstileLoginCallback: #turnstile-login-container not found.")},document.addEventListener("DOMContentLoaded",(()=>{d(),console.log("Login page initialized")}))}},s={};function l(e){var n=s[e];if(void 0!==n)return n.exports;var t=s[e]={exports:{}};return i[e].call(t.exports,t,t.exports,l),t.exports}l.m=i,e=[],l.O=(n,t,o,r)=>{if(!t){var i=1/0;for(d=0;d<e.length;d++){for(var[t,o,r]=e[d],s=!0,a=0;a<t.length;a++)(!1&r||i>=r)&&Object.keys(l.O).every((e=>l.O[e](t[a])))?t.splice(a--,1):(s=!1,r<i&&(i=r));if(s){e.splice(d--,1);var c=o();void 0!==c&&(n=c)}}return n}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[t,o,r]},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);l.r(r);var i={};n=n||[null,t({}),t([]),t(t)];for(var s=2&o&&e;"object"==typeof s&&!~n.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((n=>i[n]=()=>e[n]));return i.default=()=>e,l.d(r,i),r},l.d=(e,n)=>{for(var t in n)l.o(n,t)&&!l.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((n,t)=>(l.f[t](e,n),n)),[])),l.u=e=>"js/"+e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o={},r="urbandocs_webapp:",l.l=(e,n,t,i)=>{if(o[e])o[e].push(n);else{var s,a;if(void 0!==t)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+t){s=u;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",r+t),s.src=e),o[e]=[n];var g=(n,t)=>{s.onerror=s.onload=null,clearTimeout(m);var r=o[e];if(delete o[e],s.parentNode&&s.parentNode.removeChild(s),r&&r.forEach((e=>e(t))),n)return n(t)},m=setTimeout(g.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=g.bind(null,s.onerror),s.onload=g.bind(null,s.onload),a&&document.head.appendChild(s)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var n=l.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={966:0};l.f.j=(n,t)=>{var o=l.o(e,n)?e[n]:void 0;if(0!==o)if(o)t.push(o[2]);else{var r=new Promise(((t,r)=>o=e[n]=[t,r]));t.push(o[2]=r);var i=l.p+l.u(n),s=new Error;l.l(i,(t=>{if(l.o(e,n)&&(0!==(o=e[n])&&(e[n]=void 0),o)){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;s.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",s.name="ChunkLoadError",s.type=r,s.request=i,o[1](s)}}),"chunk-"+n,n)}},l.O.j=n=>0===e[n];var n=(n,t)=>{var o,r,[i,s,a]=t,c=0;if(i.some((n=>0!==e[n]))){for(o in s)l.o(s,o)&&(l.m[o]=s[o]);if(a)var d=a(l)}for(n&&n(t);c<i.length;c++)r=i[c],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(d)},t=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var a=l.O(void 0,[303],(()=>l(418)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,