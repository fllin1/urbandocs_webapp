(()=>{"use strict";var e,t,r,o,n,i={6528:(e,t,r)=>{var o=r(9251),n=r(9660);async function i(e){e.preventDefault();const t=e.target.querySelector('button[type="submit"]'),r=t.textContent;t.disabled=!0,t.textContent="Envoi en cours...";try{const t=new FormData(e.target),r={name:t.get("name"),email:t.get("email"),subject:t.get("subject"),message:t.get("message")};if(!(r.name&&r.email&&r.subject&&r.message))throw new Error("Tous les champs sont requis");const o={name:String(r.name).trim(),email:String(r.email).trim(),subject:String(r.subject).trim(),message:String(r.message).trim()};console.log("Submitting contact data:",o);const{data:i,error:s}=await n.N.from("support_messages").insert(o).select().single();if(s)throw console.error("Supabase error:",s),"42501"===s.code?new Error("Erreur de permission. Veuillez réessayer ou nous contacter directement."):"PGRST301"===s.code?new Error("Erreur de validation des données. Vérifiez vos informations."):new Error(`Erreur lors de l'enregistrement: ${s.message}`);console.log("Successfully inserted to database:",i);try{await async function(e){try{const t=await fetch("https://ofeyssipibktmbfebibo.supabase.co/functions/v1/discord-contact-notification",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU"},body:JSON.stringify({record:e})});if(!t.ok){const e=await t.json();throw new Error(`Discord API error: ${t.status} - ${e.error||"Unknown error"}`)}const r=await t.json();return console.log("Discord notification sent successfully:",r),r}catch(e){throw console.error("Failed to send Discord notification:",e),e}}({...i,created_at:i.created_at||(new Date).toISOString()})}catch(e){console.warn("Discord notification failed:",e)}a("Message envoyé avec succès ! Nous vous répondrons bientôt.","success"),e.target.reset()}catch(e){console.error("Error sending contact message:",e),a(e.message||"Erreur lors de l'envoi du message. Veuillez réessayer.","error")}finally{t.disabled=!1,t.textContent=r}}function a(e,t="info"){document.querySelectorAll(".notification").forEach((e=>e.remove()));const r=document.createElement("div");return r.className=`notification notification-${t}`,r.textContent=e,Object.assign(r.style,{position:"fixed",top:"20px",right:"20px",padding:"15px 20px",borderRadius:"5px",color:"white",fontWeight:"bold",zIndex:"10000",maxWidth:"400px",backgroundColor:"success"===t?"#10b981":"error"===t?"#ef4444":"#3b82f6"}),document.body.appendChild(r),setTimeout((()=>{r.parentNode&&r.remove()}),5e3),r}document.addEventListener("DOMContentLoaded",(()=>{try{(0,o.Mt)(),!function(){const e=document.querySelector(".contact-form");return!!e&&(e.addEventListener("submit",i),console.log("Contact form initialized"),!0)}()?console.warn("Contact form not found on this page"):console.log("Contact page initialized successfully")}catch(e){console.error("Error initializing contact page:",e)}}))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return i[e].call(r.exports,r,r.exports,s),r.exports}s.m=i,e=[],s.O=(t,r,o,n)=>{if(!r){var i=1/0;for(u=0;u<e.length;u++){for(var[r,o,n]=e[u],a=!0,c=0;c<r.length;c++)(!1&n||i>=n)&&Object.keys(s.O).every((e=>s.O[e](r[c])))?r.splice(c--,1):(a=!1,n<i&&(i=n));if(a){e.splice(u--,1);var l=o();void 0!==l&&(t=l)}}return t}n=n||0;for(var u=e.length;u>0&&e[u-1][2]>n;u--)e[u]=e[u-1];e[u]=[r,o,n]},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var i={};t=t||[null,r({}),r([]),r(r)];for(var a=2&o&&e;"object"==typeof a&&!~t.indexOf(a);a=r(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(n,i),n},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},n="urbandocs_webapp:",s.l=(e,t,r,i)=>{if(o[e])o[e].push(t);else{var a,c;if(void 0!==r)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var d=l[u];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==n+r){a=d;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",n+r),a.src=e),o[e]=[t];var f=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var n=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.j=353,(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={353:0};s.f.j=(t,r)=>{var o=s.o(e,t)?e[t]:void 0;if(0!==o)if(o)r.push(o[2]);else{var n=new Promise(((r,n)=>o=e[t]=[r,n]));r.push(o[2]=n);var i=s.p+s.u(t),a=new Error;s.l(i,(r=>{if(s.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var n=r&&("load"===r.type?"missing":r.type),i=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+n+": "+i+")",a.name="ChunkLoadError",a.type=n,a.request=i,o[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,r)=>{var o,n,[i,a,c]=r,l=0;if(i.some((t=>0!==e[t]))){for(o in a)s.o(a,o)&&(s.m[o]=a[o]);if(c)var u=c(s)}for(t&&t(r);l<i.length;l++)n=i[l],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(u)},r=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var c=s.O(void 0,[76],(()=>s(6528)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,