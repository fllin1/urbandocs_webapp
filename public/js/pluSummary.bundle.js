(()=>{"use strict";var e,t,n,r,o,a={849:(e,t,n)=>{const r=(0,n(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");function o(e,t="errorMessage"){const n=document.getElementById(t);n?(n.innerHTML=e,n.classList.remove("hidden")):console.error("Error element not found:",t)}function a(e,t="info",n="statusMessage"){const r=document.getElementById(n);r?(r.textContent=e,r.classList.forEach((e=>{e.startsWith("alert-")&&r.classList.remove(e)})),r.classList.add(`alert-${t}`),r.classList.remove("hidden")):console.error("Status element not found:",n)}var c=n(23);const i=new URLSearchParams(window.location.search).get("id"),s=document.getElementById("documentTitle"),d=document.getElementById("pluContent"),l=document.getElementById("tocContent"),m=document.getElementById("downloadBtn"),u=document.getElementById("commentForm"),p=document.getElementById("commentsList"),f=document.getElementById("averageRating"),g=document.getElementById("ratingStars");function h(e){return e.replace(/_/g," ").split(" ").map((e=>e.charAt(0).toUpperCase()+e.slice(1).toLowerCase())).join(" ")}async function v(){try{const{data:e,error:t}=await r.from("documents").select("\n        id,\n        zonage:zonages(nom, ville:villes(nom)),\n        zone:zones(nom),\n        plu_summary_markdown_content,\n        pdf_storage_path\n      ").eq("id",i).single();if(t)throw t;s.textContent=`PLU de ${h(e.zonage.ville.nom)} | ${h(e.zonage.nom)} | ${h(e.zone.nom)}`;const n=(0,c.xI)(e.plu-summary_markdown_content);d.innerHTML=n,y(),e.pdf_storage_path&&(m.disabled=!1,m.onclick=()=>b(e.pdf_storage_path,e.zonage.ville.nom,e.zonage.nom,e.zone.nom)),await async function(e){try{const{error:t}=await r.from("view_history").insert([{document_id:e}]);if(t)throw t}catch(e){console.error("Error logging view:",e)}}(i),await w(),await _()}catch(e){console.error("Error loading document:",e),o("Erreur lors du chargement du document")}}function y(){const e=d.querySelectorAll("h2, h3"),t=document.createElement("ul");t.className="toc-list",e.forEach((e=>{const n=document.createElement("li");n.className="toc-item";const r=document.createElement("a");r.href=`#${e.id}`,r.className=`toc-link toc-${e.tagName.toLowerCase()}`,r.textContent=e.textContent,n.appendChild(r),t.appendChild(n)})),l.appendChild(t)}async function b(e,t,n,a){try{const o=`MEWE_plu_${t}_${n}_${a}.pdf`,{data:c,error:i}=await r.storage.from("urbandocs").createSignedUrl(e,20,{download:o});if(i)throw i;const s=document.createElement("a");s.href=c.signedUrl,s.download=o,document.body.appendChild(s),s.click(),document.body.removeChild(s)}catch(e){console.error("Error downloading PDF:",e),o("Erreur lors du téléchargement du PDF")}}async function w(){try{const{data:e,error:t}=await r.from("ratings").select("rating").eq("document_id",i);if(t)throw t;if(e.length>0){const t=e.reduce(((e,t)=>e+t.rating),0)/e.length;f.textContent=`Note moyenne: ${t.toFixed(1)}/5`}for(let e=1;e<=5;e++){const t=document.createElement("span");t.className="star",t.textContent="★",t.onclick=()=>E(e),g.appendChild(t)}}catch(e){console.error("Error loading ratings:",e)}}async function E(e){try{const{error:t}=await r.from("ratings").upsert([{document_id:i,rating:e}]);if(t)throw t;a("Note enregistrée","success"),await w()}catch(e){console.error("Error submitting rating:",e),o("Erreur lors de l'enregistrement de la note")}}async function _(){try{const{data:e,error:t}=await r.from("comments").select("\n        content,\n        created_at,\n        user:users(email)\n      ").eq("document_id",i).order("created_at",{ascending:!1});if(t)throw t;p.innerHTML=e.map((e=>`\n      <div class="comment">\n        <div class="comment-header">\n          <span>${e.user.email}</span>\n          <span>${new Date(e.created_at).toLocaleDateString()}</span>\n        </div>\n        <div class="comment-content">${e.content}</div>\n      </div>\n    `)).join("")}catch(e){console.error("Error loading comments:",e),o("Erreur lors du chargement des commentaires")}}c.xI.setOptions({headerIds:!0,gfm:!0}),document.addEventListener("DOMContentLoaded",(()=>{i?(v(),u.addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("commentInput").value.trim();if(t)try{const{error:e}=await r.from("comments").insert([{document_id:i,content:t}]);if(e)throw e;document.getElementById("commentInput").value="",a("Commentaire ajouté","success"),await _()}catch(e){console.error("Error submitting comment:",e),o("Erreur lors de l'ajout du commentaire")}}))):o("ID du document manquant")}))}},c={};function i(e){var t=c[e];if(void 0!==t)return t.exports;var n=c[e]={exports:{}};return a[e].call(n.exports,n,n.exports,i),n.exports}i.m=a,e=[],i.O=(t,n,r,o)=>{if(!n){var a=1/0;for(l=0;l<e.length;l++){for(var[n,r,o]=e[l],c=!0,s=0;s<n.length;s++)(!1&o||a>=o)&&Object.keys(i.O).every((e=>i.O[e](n[s])))?n.splice(s--,1):(c=!1,o<a&&(a=o));if(c){e.splice(l--,1);var d=r();void 0!==d&&(t=d)}}return t}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[n,r,o]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var o=Object.create(null);i.r(o);var a={};t=t||[null,n({}),n([]),n(n)];for(var c=2&r&&e;"object"==typeof c&&!~t.indexOf(c);c=n(c))Object.getOwnPropertyNames(c).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>"js/"+e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},o="urbandocs_webapp:",i.l=(e,t,n,a)=>{if(r[e])r[e].push(t);else{var c,s;if(void 0!==n)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var m=d[l];if(m.getAttribute("src")==e||m.getAttribute("data-webpack")==o+n){c=m;break}}c||(s=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.setAttribute("data-webpack",o+n),c.src=e),r[e]=[t];var u=(t,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=r[e];if(delete r[e],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=u.bind(null,c.onerror),c.onload=u.bind(null,c.onload),s&&document.head.appendChild(c)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e+"../"})(),(()=>{var e={628:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var a=i.p+i.u(t),c=new Error;i.l(a,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;c.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",c.name="ChunkLoadError",c.type=o,c.request=a,r[1](c)}}),"chunk-"+t,t)}},i.O.j=t=>0===e[t];var t=(t,n)=>{var r,o,[a,c,s]=n,d=0;if(a.some((t=>0!==e[t]))){for(r in c)i.o(c,r)&&(i.m[r]=c[r]);if(s)var l=s(i)}for(t&&t(n);d<a.length;d++)o=a[d],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return i.O(l)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=i.O(void 0,[303,23],(()=>i(849)));s=i.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQWdCOUMsSUFDckU4QyxFQUFnQjlDLEdBQVMsS0FFMUI4QyxFQUFnQjlDLEdBQVcsRUFFNUIsT0FBTzNDLEVBQW9CUyxFQUFFQyxFQUFPLEVBR2pDNkYsRUFBcUJDLEtBQW1DLDZCQUFJQSxLQUFtQyw4QkFBSyxHQUN4R0QsRUFBbUJoTixRQUFRMk0sRUFBcUJwQixLQUFLLEtBQU0sSUFDM0R5QixFQUFtQjlDLEtBQU95QyxFQUFxQnBCLEtBQUssS0FBTXlCLEVBQW1COUMsS0FBS3FCLEtBQUt5QixHLEtDbEZ2RixJQUFJRSxFQUFzQnpHLEVBQW9CUyxPQUFFTixFQUFXLENBQUMsSUFBSSxLQUFLLElBQU9ILEVBQW9CLE9BQ2hHeUcsRUFBc0J6RyxFQUFvQlMsRUFBRWdHLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwLy4vc3JjL2pzL3N1cGFiYXNlLWNsaWVudC5qcyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwLy4vc3JjL2pzL2F1dGgvYXV0aC5qcyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwLy4vc3JjL2pzL3BsdS1zdW1tYXJ5LmpzIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJ1cmJhbmRvY3Nfd2ViYXBwOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gc3JjL2pzL3N1cGFiYXNlLWNsaWVudC5qc1xuLyoqXG4gKiBTdXBhYmFzZSBDbGllbnRcbiAqIEBtb2R1bGUgc3VwYWJhc2UtY2xpZW50XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgaGFuZGxlcyB0aGUgU3VwYWJhc2UgY2xpZW50IGluaXRpYWxpemF0aW9uIGFuZCBjb25maWd1cmF0aW9uLlxuICogQHZlcnNpb24gMC4wLjFcbiAqIEBhdXRob3IgR3JleVBhbmRhXG4gKlxuICogQGNoYW5nZWxvZ1xuICogLSAwLjAuMSAoMjAyNS0wNS0wOSk6IEluaXRpYWwgdmVyc2lvbiB3aXRoIGJhc2ljIFN1cGFiYXNlIGNsaWVudCBpbml0aWFsaXphdGlvbi5cbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwiQHN1cGFiYXNlL3N1cGFiYXNlLWpzXCI7XG5cbmNvbnN0IHN1cGFiYXNlVXJsID0gXCJodHRwczovL29mZXlzc2lwaWJrdG1iZmViaWJvLnN1cGFiYXNlLmNvXCI7XG5jb25zdCBzdXBhYmFzZUFub25LZXkgPVxuICBcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnpkWEJoWW1GelpTSXNJbkpsWmlJNkltOW1aWGx6YzJsd2FXSnJkRzFpWm1WaWFXSnZJaXdpY205c1pTSTZJbUZ1YjI0aUxDSnBZWFFpT2pFM05ETTVNalV3T1RRc0ltVjRjQ0k2TWpBMU9UVXdNVEE1TkgwLnc3MUNBS2ZvbGt0elJsLVRtTFZoSFlhRWJoQ2ZWazRBN1lyYUVVQ2dsclVcIjtcblxuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpO1xuXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjbGllbnQ7XG4iLCIvLyBzcmMvYXV0aC9hdXRoLmpzXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uIE1vZHVsZSAtIEJhc2VcbiAqIEBtb2R1bGUgYXV0aFxuICogQGRlc2NyaXB0aW9uIEJhc2UgbW9kdWxlIGZvciBhdXRoZW50aWNhdGlvbiB3aXRoIGNvbW1vbiBmdW5jdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb25cbiAqIEB2ZXJzaW9uIDAuMC41XG4gKlxuICogQGNoYW5nZWxvZ1xuICogLSAwLjAuNSAoMjAyNS0wNS0xNSk6IEFkZGVkIHNlc3Npb24gdmFsaWRhdGlvbiBhbmQgcHJvdGVjdGlvbiBhZ2FpbnN0IHN0YWxlIHNlc3Npb25zLlxuICogLSAwLjAuNCAoMjAyNS0wNS0xNSk6IFJlbW92YWwgb2YgRmlyZWJhc2UgQ2xvdWQgRnVuY3Rpb25zIGNvbnN0YW50cy5cbiAqIC0gMC4wLjMgKDIwMjUtMDUtMTMpOiBNb2RpZmllZCB0aGUgYXV0aGVudGljYXRpb24gc3RhdGUgbWFuYWdlbWVudCB0byB1c2UgU3VwYWJhc2UgQXV0aCBzeXN0ZW0uXG4gKiAtIDAuMC4yICgyMDI1LTA1LTEzKTogUmVvcmdhbml6YXRpb24gaW50byBzZXBhcmF0ZSBtb2R1bGVzXG4gKiAtIDAuMC4xICgyMDI1LTA1LTAzKTogSW5pdGlhbCBjcmVhdGlvblxuICovXG5cbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4uL3N1cGFiYXNlLWNsaWVudC5qc1wiO1xuXG4vLyBHbG9iYWwgYXV0aGVudGljYXRpb24gc3RhdGVcbmxldCBjdXJyZW50VXNlciA9IG51bGw7XG5sZXQgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdXNlclxuICogQHBhcmFtIHtPYmplY3R9IHVzZXIgLSBVc2VyIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRVc2VyKHVzZXIpIHtcbiAgY3VycmVudFVzZXIgPSB1c2VyO1xuICAvLyBQb3NzaWJsZSBzdG9yYWdlIGluIGxvY2FsU3RvcmFnZS9zZXNzaW9uU3RvcmFnZVxuICBpZiAodXNlcikge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudFVzZXJcIiwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICB9IGVsc2Uge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgaWYgdGhlIGN1cnJlbnQgc2Vzc2lvbiBpcyBhY3RpdmUgd2l0aCBTdXBhYmFzZVxuICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFRydWUgaWYgc2Vzc2lvbiBpcyB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVNlc3Npb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGN1cnJlbnQgc2Vzc2lvbiBmcm9tIFN1cGFiYXNlXG4gICAgY29uc3Qge1xuICAgICAgZGF0YTogeyBzZXNzaW9uIH0sXG4gICAgICBlcnJvcjogc2Vzc2lvbkVycm9yLFxuICAgIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcblxuICAgIC8vIE5vIHNlc3Npb24gb3IgZXJyb3IgcmV0cmlldmluZyBzZXNzaW9uXG4gICAgaWYgKHNlc3Npb25FcnJvciB8fCAhc2Vzc2lvbikge1xuICAgICAgY29uc29sZS5sb2coXCJObyB2YWxpZCBzZXNzaW9uIGZvdW5kXCIpO1xuICAgICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlZnJlc2ggdGhlIHRva2VuIHRvIHZhbGlkYXRlIGl0IHdpdGggdGhlIHNlcnZlclxuICAgIGNvbnN0IHsgZXJyb3I6IHJlZnJlc2hFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5yZWZyZXNoU2Vzc2lvbigpO1xuXG4gICAgaWYgKHJlZnJlc2hFcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKFwiU2Vzc2lvbiB2YWxpZGF0aW9uIGZhaWxlZDpcIiwgcmVmcmVzaEVycm9yKTtcbiAgICAgIC8vIEZvcmNlIGNsZWFyIHRoZSBpbnZhbGlkIHNlc3Npb25cbiAgICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gU2Vzc2lvbiBpcyB2YWxpZCwgdXBkYXRlIHRoZSBjdXJyZW50IHVzZXJcbiAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgIHNlc3Npb25WYWxpZGF0ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlNlc3Npb24gdmFsaWRhdGlvbiBlcnJvcjpcIiwgZSk7XG4gICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudCB1c2VyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkYXRlIC0gV2hldGhlciB0byB2YWxpZGF0ZSB0aGUgc2Vzc2lvbiB3aXRoIFN1cGFiYXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3R8bnVsbD59IFRoZSBjdXJyZW50IHVzZXIgb3IgbnVsbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXIodmFsaWRhdGUgPSB0cnVlKSB7XG4gIC8vIElmIHdlIG5lZWQgdG8gdmFsaWRhdGUgYW5kIGhhdmVuJ3QgZG9uZSBzbyB5ZXRcbiAgaWYgKHZhbGlkYXRlICYmICFzZXNzaW9uVmFsaWRhdGVkKSB7XG4gICAgYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG4gIH1cblxuICAvLyBJZiBubyB2YWxpZGF0aW9uIG5lZWRlZCBvciBhbHJlYWR5IHZhbGlkYXRlZFxuICBpZiAoIXZhbGlkYXRlICYmICFjdXJyZW50VXNlcikge1xuICAgIC8vIFRyeSB0byByZXRyaWV2ZSBmcm9tIHN0b3JhZ2UgaWYgbm90IGluIG1lbW9yeVxuICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIHVzZXI6XCIsIGUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50VXNlcjtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91cyB2ZXJzaW9uIG9mIGdldEN1cnJlbnRVc2VyIGZvciBub24tYXN5bmMgY29udGV4dHNcbiAqIFdBUk5JTkc6IFRoaXMgbWF5IHJldHVybiBzdGFsZSBkYXRhIGlmIHNlc3Npb24gaXMgaW52YWxpZFxuICogQHJldHVybnMge09iamVjdHxudWxsfSBUaGUgY3VycmVudCB1c2VyIG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRVc2VyU3luYygpIHtcbiAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIHVzZXI6XCIsIGUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50VXNlcjtcbn1cblxuLyoqXG4gKiBMb2dzIG91dCB0aGUgdXNlclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gIHRyeSB7XG4gICAgLy8gU2lnbiBvdXQgZnJvbSBTdXBhYmFzZVxuICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuXG4gICAgLy8gQ2xlYXIgbG9jYWwgc3RhdGVcbiAgICBjdXJyZW50VXNlciA9IG51bGw7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG5cbiAgICAvLyBSZWRpcmVjdCB0byB0aGUgaG9tZSBwYWdlIGFmdGVyIGxvZ291dFxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvXCI7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGR1cmluZyBsb2dvdXQ6XCIsIGVycm9yKTtcbiAgICAvLyBTdGlsbCBjbGVhciBsb2NhbCBzdGF0ZSBldmVuIGlmIFN1cGFiYXNlIHNpZ25PdXQgZmFpbHNcbiAgICBjdXJyZW50VXNlciA9IG51bGw7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9cIjtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4gd2l0aCB2YWxpZCBzZXNzaW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkYXRlIC0gV2hldGhlciB0byB2YWxpZGF0ZSB3aXRoIFN1cGFiYXNlIGZpcnN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4gd2l0aCB2YWxpZCBzZXNzaW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0xvZ2dlZEluKHZhbGlkYXRlID0gdHJ1ZSkge1xuICBjb25zdCB1c2VyID0gYXdhaXQgZ2V0Q3VycmVudFVzZXIodmFsaWRhdGUpO1xuICByZXR1cm4gdXNlciAhPT0gbnVsbDtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91cyB2ZXJzaW9uIG9mIGlzTG9nZ2VkSW5cbiAqIFdBUk5JTkc6IFRoaXMgbWF5IHJldHVybiBpbmNvcnJlY3QgcmVzdWx0cyBpZiBzZXNzaW9uIGlzIGludmFsaWRcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHVzZXIgYXBwZWFycyB0byBiZSBsb2dnZWQgaW4gbG9jYWxseVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMb2dnZWRJblN5bmMoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50VXNlclN5bmMoKSAhPT0gbnVsbDtcbn1cblxuLyoqXG4gKiBQcm90ZWN0cyBhIHBhZ2UgdGhhdCByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0VXJsIC0gVVJMIHRvIHJlZGlyZWN0IGlmIG5vdCBhdXRoZW50aWNhdGVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiBhdXRoZW50aWNhdGVkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3RlY3RQYWdlKHJlZGlyZWN0VXJsID0gXCIvbG9naW5cIikge1xuICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG5cbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgLy8gUmVkaXJlY3QgdG8gbG9naW4gcGFnZVxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcmVkaXJlY3RVcmw7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYXV0aCBvbiBwYWdlIGxvYWRcbiAqIENhbGwgdGhpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYXBwIGluaXRpYWxpemF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0QXV0aCgpIHtcbiAgLy8gVmFsaWRhdGUgc2Vzc2lvbiBvbiBwYWdlIGxvYWRcbiAgYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG5cbiAgLy8gU2V0IHVwIGF1dGggc3RhdGUgY2hhbmdlIGxpc3RlbmVyXG4gIHN1cGFiYXNlLmF1dGgub25BdXRoU3RhdGVDaGFuZ2UoYXN5bmMgKGV2ZW50LCBzZXNzaW9uKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJBdXRoIHN0YXRlIGNoYW5nZWQ6XCIsIGV2ZW50KTtcblxuICAgIGlmIChldmVudCA9PT0gXCJTSUdORURfSU5cIiAmJiBzZXNzaW9uKSB7XG4gICAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChldmVudCA9PT0gXCJTSUdORURfT1VUXCIpIHtcbiAgICAgIHNldEN1cnJlbnRVc2VyKG51bGwpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IFwiVE9LRU5fUkVGUkVTSEVEXCIpIHtcbiAgICAgIHNldEN1cnJlbnRVc2VyKHNlc3Npb24udXNlcik7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBcIlVTRVJfVVBEQVRFRFwiKSB7XG4gICAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhbiBlcnJvciBtZXNzYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRJZCAtIElEIG9mIHRoZSBlbGVtZW50IHdoZXJlIHRvIGRpc3BsYXkgdGhlIGVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgZWxlbWVudElkID0gXCJlcnJvck1lc3NhZ2VcIikge1xuICBjb25zdCBlcnJvckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoZXJyb3JFbGVtZW50KSB7XG4gICAgZXJyb3JFbGVtZW50LmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVsZW1lbnQgbm90IGZvdW5kOlwiLCBlbGVtZW50SWQpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSBzdGF0dXMgbWVzc2FnZVxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gTWVzc2FnZSB0eXBlIChzdWNjZXNzLCBpbmZvLCB3YXJuaW5nLCBkYW5nZXIpXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudElkIC0gSUQgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdG8gZGlzcGxheSB0aGUgbWVzc2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd1N0YXR1cyhcbiAgbWVzc2FnZSxcbiAgdHlwZSA9IFwiaW5mb1wiLFxuICBlbGVtZW50SWQgPSBcInN0YXR1c01lc3NhZ2VcIlxuKSB7XG4gIGNvbnN0IHN0YXR1c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoc3RhdHVzRWxlbWVudCkge1xuICAgIHN0YXR1c0VsZW1lbnQudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBhbGVydC0qIGNsYXNzZXNcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgIGlmIChjbGFzc05hbWUuc3RhcnRzV2l0aChcImFsZXJ0LVwiKSkge1xuICAgICAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgY2xhc3MgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZVxuICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NMaXN0LmFkZChgYWxlcnQtJHt0eXBlfWApO1xuICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKFwiU3RhdHVzIGVsZW1lbnQgbm90IGZvdW5kOlwiLCBlbGVtZW50SWQpO1xuICB9XG59XG5cbi8qKlxuICogSGlkZXMgYW4gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRJZCAtIElEIG9mIHRoZSBlbGVtZW50IHRvIGhpZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpZGVFbGVtZW50KGVsZW1lbnRJZCkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKTtcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG93cyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudElkIC0gSUQgb2YgdGhlIGVsZW1lbnQgdG8gc2hvd1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd0VsZW1lbnQoZWxlbWVudElkKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfVxufVxuXG4vKipcbiAqIFNob3dzIHRoZSBsb2FkaW5nIGluZGljYXRvclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvbklkIC0gSUQgb2YgdGhlIGJ1dHRvblxuICogQHBhcmFtIHtzdHJpbmd9IHNwaW5uZXJJZCAtIElEIG9mIHRoZSBzcGlubmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93TG9hZGluZyhidXR0b25JZCwgc3Bpbm5lcklkKSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbklkKTtcbiAgY29uc3Qgc3Bpbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwaW5uZXJJZCk7XG5cbiAgaWYgKGJ1dHRvbikgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgaWYgKHNwaW5uZXIpIHNwaW5uZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbn1cblxuLyoqXG4gKiBIaWRlcyB0aGUgbG9hZGluZyBpbmRpY2F0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25JZCAtIElEIG9mIHRoZSBidXR0b25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcGlubmVySWQgLSBJRCBvZiB0aGUgc3Bpbm5lclxuICovXG5leHBvcnQgZnVuY3Rpb24gaGlkZUxvYWRpbmcoYnV0dG9uSWQsIHNwaW5uZXJJZCkge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidXR0b25JZCk7XG4gIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzcGlubmVySWQpO1xuXG4gIGlmIChidXR0b24pIGJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xufVxuXG4vLyBFeHBvcnQgdGhlIG5lY2Vzc2FyeSBmdW5jdGlvbnMgYW5kIHZhcmlhYmxlc1xuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRDdXJyZW50VXNlcixcbiAgZ2V0Q3VycmVudFVzZXJTeW5jLFxuICBzZXRDdXJyZW50VXNlcixcbiAgbG9nb3V0LFxuICBpc0xvZ2dlZEluLFxuICBpc0xvZ2dlZEluU3luYyxcbiAgdmFsaWRhdGVTZXNzaW9uLFxuICBwcm90ZWN0UGFnZSxcbiAgaW5pdEF1dGgsXG4gIHNob3dFcnJvcixcbiAgc2hvd1N0YXR1cyxcbiAgaGlkZUVsZW1lbnQsXG4gIHNob3dFbGVtZW50LFxuICBzaG93TG9hZGluZyxcbiAgaGlkZUxvYWRpbmcsXG59O1xuIiwiLy8gc3JjL2pzL3BsdS1zdW1tYXJ5LmpzXG4vKipcbiAqIFBMVSBTdW1tYXJ5XG4gKiBAbW9kdWxlIHBsdS1zdW1tYXJ5XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBtb2R1bGUgaGFuZGxlcyB0aGUgUExVIHN1bW1hcnkgcGFnZS5cbiAqIEB2ZXJzaW9uIDAuMC4xXG4gKiBAYXV0aG9yIEdyZXlQYW5kYVxuICpcbiAqIEBjaGFuZ2Vsb2dcbiAqIC0gMC4wLjEgKDIwMjUtMDUtMTYpOiBJbml0aWFsIHZlcnNpb24gd2l0aCBiYXNpYyBQTFUgc3VtbWFyeSBwYWdlLlxuICovXG5cbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4vc3VwYWJhc2UtY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBzaG93U3RhdHVzLCBzaG93RXJyb3IgfSBmcm9tIFwiLi9hdXRoL2F1dGguanNcIjtcbmltcG9ydCB7IG1hcmtlZCB9IGZyb20gXCJtYXJrZWRcIjtcblxuLy8gR2V0IGRvY3VtZW50IElEIGZyb20gVVJMXG5jb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3QgZG9jdW1lbnRJZCA9IHVybFBhcmFtcy5nZXQoXCJpZFwiKTtcblxuLy8gRE9NIEVsZW1lbnRzXG5jb25zdCBkb2N1bWVudFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb2N1bWVudFRpdGxlXCIpO1xuY29uc3QgcGx1Q29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGx1Q29udGVudFwiKTtcbmNvbnN0IHRvY0NvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvY0NvbnRlbnRcIik7XG5jb25zdCBkb3dubG9hZEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZG93bmxvYWRCdG5cIik7XG5jb25zdCBjb21tZW50Rm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tbWVudEZvcm1cIik7XG5jb25zdCBjb21tZW50c0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnRzTGlzdFwiKTtcbmNvbnN0IGF2ZXJhZ2VSYXRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImF2ZXJhZ2VSYXRpbmdcIik7XG5jb25zdCByYXRpbmdTdGFycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmF0aW5nU3RhcnNcIik7XG5cbi8vIEluaXRpYWxpemUgbWFya2VkIG9wdGlvbnNcbm1hcmtlZC5zZXRPcHRpb25zKHtcbiAgaGVhZGVySWRzOiB0cnVlLFxuICBnZm06IHRydWUsXG59KTtcblxuZnVuY3Rpb24gZm9ybWF0VGV4dCh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL18vZywgXCIgXCIpIC8vIFJlbXBsYWNlIGxlcyB1bmRlcnNjb3JlcyBwYXIgZGVzIGVzcGFjZXNcbiAgICAuc3BsaXQoXCIgXCIpXG4gICAgLm1hcCgod29yZCkgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSlcbiAgICAuam9pbihcIiBcIik7XG59XG5cbi8vIExvYWQgZG9jdW1lbnQgY29udGVudFxuYXN5bmMgZnVuY3Rpb24gbG9hZERvY3VtZW50KCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YTogZG9jdW1lbnQsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJkb2N1bWVudHNcIilcbiAgICAgIC5zZWxlY3QoXG4gICAgICAgIGBcbiAgICAgICAgaWQsXG4gICAgICAgIHpvbmFnZTp6b25hZ2VzKG5vbSwgdmlsbGU6dmlsbGVzKG5vbSkpLFxuICAgICAgICB6b25lOnpvbmVzKG5vbSksXG4gICAgICAgIHBsdV9zdW1tYXJ5X21hcmtkb3duX2NvbnRlbnQsXG4gICAgICAgIHBkZl9zdG9yYWdlX3BhdGhcbiAgICAgIGBcbiAgICAgIClcbiAgICAgIC5lcShcImlkXCIsIGRvY3VtZW50SWQpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuXG4gICAgLy8gVXBkYXRlIHRpdGxlXG4gICAgZG9jdW1lbnRUaXRsZS50ZXh0Q29udGVudCA9IGBQTFUgZGUgJHtmb3JtYXRUZXh0KFxuICAgICAgZG9jdW1lbnQuem9uYWdlLnZpbGxlLm5vbVxuICAgICl9IHwgJHtmb3JtYXRUZXh0KGRvY3VtZW50LnpvbmFnZS5ub20pfSB8ICR7Zm9ybWF0VGV4dChkb2N1bWVudC56b25lLm5vbSl9YDtcblxuICAgIC8vIFJlbmRlciBtYXJrZG93biBjb250ZW50XG4gICAgY29uc3QgaHRtbENvbnRlbnQgPSBtYXJrZWQoZG9jdW1lbnQucGx1IC0gc3VtbWFyeV9tYXJrZG93bl9jb250ZW50KTtcbiAgICBwbHVDb250ZW50LmlubmVySFRNTCA9IGh0bWxDb250ZW50O1xuXG4gICAgLy8gR2VuZXJhdGUgdGFibGUgb2YgY29udGVudHNcbiAgICBnZW5lcmF0ZVRhYmxlT2ZDb250ZW50cygpO1xuXG4gICAgLy8gRW5hYmxlIGRvd25sb2FkIGJ1dHRvbiBpZiBQREYgcGF0aCBleGlzdHNcbiAgICBpZiAoZG9jdW1lbnQucGRmX3N0b3JhZ2VfcGF0aCkge1xuICAgICAgZG93bmxvYWRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIGRvd25sb2FkQnRuLm9uY2xpY2sgPSAoKSA9PlxuICAgICAgICBkb3dubG9hZFBERihcbiAgICAgICAgICBkb2N1bWVudC5wZGZfc3RvcmFnZV9wYXRoLFxuICAgICAgICAgIGRvY3VtZW50LnpvbmFnZS52aWxsZS5ub20sXG4gICAgICAgICAgZG9jdW1lbnQuem9uYWdlLm5vbSxcbiAgICAgICAgICBkb2N1bWVudC56b25lLm5vbVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIExvZyB2aWV3XG4gICAgYXdhaXQgbG9nVmlldyhkb2N1bWVudElkKTtcblxuICAgIC8vIExvYWQgcmF0aW5ncyBhbmQgY29tbWVudHNcbiAgICBhd2FpdCBsb2FkUmF0aW5ncygpO1xuICAgIGF3YWl0IGxvYWRDb21tZW50cygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGRvY3VtZW50OlwiLCBlcnJvcik7XG4gICAgc2hvd0Vycm9yKFwiRXJyZXVyIGxvcnMgZHUgY2hhcmdlbWVudCBkdSBkb2N1bWVudFwiKTtcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSB0YWJsZSBvZiBjb250ZW50c1xuZnVuY3Rpb24gZ2VuZXJhdGVUYWJsZU9mQ29udGVudHMoKSB7XG4gIGNvbnN0IGhlYWRpbmdzID0gcGx1Q29udGVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaDIsIGgzXCIpO1xuICBjb25zdCB0b2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gIHRvYy5jbGFzc05hbWUgPSBcInRvYy1saXN0XCI7XG5cbiAgaGVhZGluZ3MuZm9yRWFjaCgoaGVhZGluZykgPT4ge1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgIGxpLmNsYXNzTmFtZSA9IFwidG9jLWl0ZW1cIjtcblxuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBhLmhyZWYgPSBgIyR7aGVhZGluZy5pZH1gO1xuICAgIGEuY2xhc3NOYW1lID0gYHRvYy1saW5rIHRvYy0ke2hlYWRpbmcudGFnTmFtZS50b0xvd2VyQ2FzZSgpfWA7XG4gICAgYS50ZXh0Q29udGVudCA9IGhlYWRpbmcudGV4dENvbnRlbnQ7XG5cbiAgICBsaS5hcHBlbmRDaGlsZChhKTtcbiAgICB0b2MuYXBwZW5kQ2hpbGQobGkpO1xuICB9KTtcblxuICB0b2NDb250ZW50LmFwcGVuZENoaWxkKHRvYyk7XG59XG5cbi8vIERvd25sb2FkIFBERlxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRQREYocGRmUGF0aCwgdmlsbGUsIHpvbmFnZSwgem9uZSkge1xuICB0cnkge1xuICAgIGNvbnN0IGN1c3RvbUZpbGVuYW1lID0gYE1FV0VfcGx1XyR7dmlsbGV9XyR7em9uYWdlfV8ke3pvbmV9LnBkZmA7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZVxuICAgICAgLmZyb20oXCJ1cmJhbmRvY3NcIilcbiAgICAgIC5jcmVhdGVTaWduZWRVcmwocGRmUGF0aCwgMjAsIHtcbiAgICAgICAgZG93bmxvYWQ6IGN1c3RvbUZpbGVuYW1lLFxuICAgICAgfSk7IC8vIFVSTCB2YWxpZCBmb3IgMjAgc2Vjb25kc1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgIC8vIENyZWF0ZSBhIHRlbXBvcmFyeSBhbmNob3IgZWxlbWVudFxuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsaW5rLmhyZWYgPSBkYXRhLnNpZ25lZFVybDtcbiAgICBsaW5rLmRvd25sb2FkID0gY3VzdG9tRmlsZW5hbWU7IC8vIFN1Z2dlc3QgYSBmaWxlbmFtZSBmb3IgdGhlIGRvd25sb2FkXG5cbiAgICAvLyBBcHBlbmQgdG8gdGhlIGRvY3VtZW50LCBjbGljaywgYW5kIHJlbW92ZVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgbGluay5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGRvd25sb2FkaW5nIFBERjpcIiwgZXJyb3IpO1xuICAgIHNob3dFcnJvcihcIkVycmV1ciBsb3JzIGR1IHTDqWzDqWNoYXJnZW1lbnQgZHUgUERGXCIpO1xuICB9XG59XG5cbi8vIExvZyB2aWV3XG5hc3luYyBmdW5jdGlvbiBsb2dWaWV3KGRvY3VtZW50SWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJ2aWV3X2hpc3RvcnlcIilcbiAgICAgIC5pbnNlcnQoW3sgZG9jdW1lbnRfaWQ6IGRvY3VtZW50SWQgfV0pO1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9nZ2luZyB2aWV3OlwiLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gTG9hZCByYXRpbmdzXG5hc3luYyBmdW5jdGlvbiBsb2FkUmF0aW5ncygpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGRhdGE6IHJhdGluZ3MsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJyYXRpbmdzXCIpXG4gICAgICAuc2VsZWN0KFwicmF0aW5nXCIpXG4gICAgICAuZXEoXCJkb2N1bWVudF9pZFwiLCBkb2N1bWVudElkKTtcblxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG5cbiAgICBpZiAocmF0aW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBhdmVyYWdlID1cbiAgICAgICAgcmF0aW5ncy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5yYXRpbmcsIDApIC8gcmF0aW5ncy5sZW5ndGg7XG4gICAgICBhdmVyYWdlUmF0aW5nLnRleHRDb250ZW50ID0gYE5vdGUgbW95ZW5uZTogJHthdmVyYWdlLnRvRml4ZWQoMSl9LzVgO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcmF0aW5nIHN0YXJzXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNTsgaSsrKSB7XG4gICAgICBjb25zdCBzdGFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBzdGFyLmNsYXNzTmFtZSA9IFwic3RhclwiO1xuICAgICAgc3Rhci50ZXh0Q29udGVudCA9IFwi4piFXCI7XG4gICAgICBzdGFyLm9uY2xpY2sgPSAoKSA9PiBzdWJtaXRSYXRpbmcoaSk7XG4gICAgICByYXRpbmdTdGFycy5hcHBlbmRDaGlsZChzdGFyKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgcmF0aW5nczpcIiwgZXJyb3IpO1xuICB9XG59XG5cbi8vIFN1Ym1pdCByYXRpbmdcbmFzeW5jIGZ1bmN0aW9uIHN1Ym1pdFJhdGluZyhyYXRpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJyYXRpbmdzXCIpXG4gICAgICAudXBzZXJ0KFt7IGRvY3VtZW50X2lkOiBkb2N1bWVudElkLCByYXRpbmcgfV0pO1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgIHNob3dTdGF0dXMoXCJOb3RlIGVucmVnaXN0csOpZVwiLCBcInN1Y2Nlc3NcIik7XG4gICAgYXdhaXQgbG9hZFJhdGluZ3MoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc3VibWl0dGluZyByYXRpbmc6XCIsIGVycm9yKTtcbiAgICBzaG93RXJyb3IoXCJFcnJldXIgbG9ycyBkZSBsJ2VucmVnaXN0cmVtZW50IGRlIGxhIG5vdGVcIik7XG4gIH1cbn1cblxuLy8gTG9hZCBjb21tZW50c1xuYXN5bmMgZnVuY3Rpb24gbG9hZENvbW1lbnRzKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YTogY29tbWVudHMsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJjb21tZW50c1wiKVxuICAgICAgLnNlbGVjdChcbiAgICAgICAgYFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBjcmVhdGVkX2F0LFxuICAgICAgICB1c2VyOnVzZXJzKGVtYWlsKVxuICAgICAgYFxuICAgICAgKVxuICAgICAgLmVxKFwiZG9jdW1lbnRfaWRcIiwgZG9jdW1lbnRJZClcbiAgICAgIC5vcmRlcihcImNyZWF0ZWRfYXRcIiwgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgIGNvbW1lbnRzTGlzdC5pbm5lckhUTUwgPSBjb21tZW50c1xuICAgICAgLm1hcChcbiAgICAgICAgKGNvbW1lbnQpID0+IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50LWhlYWRlclwiPlxuICAgICAgICAgIDxzcGFuPiR7Y29tbWVudC51c2VyLmVtYWlsfTwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj4ke25ldyBEYXRlKGNvbW1lbnQuY3JlYXRlZF9hdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbW1lbnQtY29udGVudFwiPiR7Y29tbWVudC5jb250ZW50fTwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYFxuICAgICAgKVxuICAgICAgLmpvaW4oXCJcIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgY29tbWVudHM6XCIsIGVycm9yKTtcbiAgICBzaG93RXJyb3IoXCJFcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGRlcyBjb21tZW50YWlyZXNcIik7XG4gIH1cbn1cblxuLy8gSW5pdGlhbGl6ZSBwYWdlXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gIGlmICghZG9jdW1lbnRJZCkge1xuICAgIHNob3dFcnJvcihcIklEIGR1IGRvY3VtZW50IG1hbnF1YW50XCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvYWREb2N1bWVudCgpO1xuXG4gIC8vIEhhbmRsZSBjb21tZW50IGZvcm0gc3VibWlzc2lvblxuICBjb21tZW50Rm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGFzeW5jIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tbWVudElucHV0XCIpLnZhbHVlLnRyaW0oKTtcbiAgICBpZiAoIWNvbnRlbnQpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbShcImNvbW1lbnRzXCIpXG4gICAgICAgIC5pbnNlcnQoW3sgZG9jdW1lbnRfaWQ6IGRvY3VtZW50SWQsIGNvbnRlbnQgfV0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnRJbnB1dFwiKS52YWx1ZSA9IFwiXCI7XG4gICAgICBzaG93U3RhdHVzKFwiQ29tbWVudGFpcmUgYWpvdXTDqVwiLCBcInN1Y2Nlc3NcIik7XG4gICAgICBhd2FpdCBsb2FkQ29tbWVudHMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHN1Ym1pdHRpbmcgY29tbWVudDpcIiwgZXJyb3IpO1xuICAgICAgc2hvd0Vycm9yKFwiRXJyZXVyIGxvcnMgZGUgbCdham91dCBkdSBjb21tZW50YWlyZVwiKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJqcy9cIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC9eYmxvYjovLCBcIlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ2Mjg6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt1cmJhbmRvY3Nfd2ViYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3VyYmFuZG9jc193ZWJhcHBcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszMDMsMjNdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg4NDkpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4Iiwic3VwYWJhc2UiLCJzaG93RXJyb3IiLCJtZXNzYWdlIiwiZWxlbWVudElkIiwiZXJyb3JFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImNvbnNvbGUiLCJlcnJvciIsInNob3dTdGF0dXMiLCJ0eXBlIiwic3RhdHVzRWxlbWVudCIsInRleHRDb250ZW50IiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsInN0YXJ0c1dpdGgiLCJhZGQiLCJkb2N1bWVudElkIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJkb2N1bWVudFRpdGxlIiwicGx1Q29udGVudCIsInRvY0NvbnRlbnQiLCJkb3dubG9hZEJ0biIsImNvbW1lbnRGb3JtIiwiY29tbWVudHNMaXN0IiwiYXZlcmFnZVJhdGluZyIsInJhdGluZ1N0YXJzIiwiZm9ybWF0VGV4dCIsInRleHQiLCJyZXBsYWNlIiwic3BsaXQiLCJtYXAiLCJ3b3JkIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiam9pbiIsImFzeW5jIiwibG9hZERvY3VtZW50IiwiZGF0YSIsImZyb20iLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsInpvbmFnZSIsInZpbGxlIiwibm9tIiwiem9uZSIsImh0bWxDb250ZW50IiwicGx1Iiwic3VtbWFyeV9tYXJrZG93bl9jb250ZW50IiwiZ2VuZXJhdGVUYWJsZU9mQ29udGVudHMiLCJwZGZfc3RvcmFnZV9wYXRoIiwiZGlzYWJsZWQiLCJvbmNsaWNrIiwiZG93bmxvYWRQREYiLCJpbnNlcnQiLCJkb2N1bWVudF9pZCIsImxvZ1ZpZXciLCJsb2FkUmF0aW5ncyIsImxvYWRDb21tZW50cyIsImhlYWRpbmdzIiwicXVlcnlTZWxlY3RvckFsbCIsInRvYyIsImNyZWF0ZUVsZW1lbnQiLCJoZWFkaW5nIiwibGkiLCJhIiwiaHJlZiIsImlkIiwidGFnTmFtZSIsImFwcGVuZENoaWxkIiwicGRmUGF0aCIsImN1c3RvbUZpbGVuYW1lIiwic3RvcmFnZSIsImNyZWF0ZVNpZ25lZFVybCIsImRvd25sb2FkIiwibGluayIsInNpZ25lZFVybCIsImJvZHkiLCJjbGljayIsInJlbW92ZUNoaWxkIiwicmF0aW5ncyIsImxlbmd0aCIsImF2ZXJhZ2UiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwicmF0aW5nIiwidG9GaXhlZCIsImkiLCJzdGFyIiwic3VibWl0UmF0aW5nIiwidXBzZXJ0IiwiY29tbWVudHMiLCJvcmRlciIsImFzY2VuZGluZyIsImNvbW1lbnQiLCJ1c2VyIiwiZW1haWwiLCJEYXRlIiwiY3JlYXRlZF9hdCIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImNvbnRlbnQiLCJzZXRPcHRpb25zIiwiaGVhZGVySWRzIiwiZ2ZtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInZhbHVlIiwidHJpbSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5Iiwic3BsaWNlIiwiciIsImdldFByb3RvdHlwZU9mIiwib2JqIiwidCIsIm1vZGUiLCJ0aGlzIiwiX19lc01vZHVsZSIsInRoZW4iLCJucyIsImNyZWF0ZSIsImRlZiIsImN1cnJlbnQiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImYiLCJjaHVua0lkIiwiUHJvbWlzZSIsImFsbCIsInByb21pc2VzIiwidSIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJsIiwidXJsIiwiZG9uZSIsInB1c2giLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwic2V0VGltZW91dCIsImJpbmQiLCJ0YXJnZXQiLCJoZWFkIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInRlc3QiLCJFcnJvciIsInAiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJuYW1lIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9