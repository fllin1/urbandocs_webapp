(()=>{"use strict";var e,t,n,o,r,a={5852:(e,t,n)=>{var o=n(9660),r=n(9251),a=n(2387);let i=null,c=null,d=null,l=[],s=null;async function u(){try{const{data:e,error:t}=await o.N.from("ratings").select("rating, user_id").eq("document_id",c.id);if(t)throw t;if(l=e||[],l.length>0){const e=l.reduce(((e,t)=>e+t.rating),0)/l.length;document.getElementById("average-rating").textContent=e.toFixed(1),document.getElementById("rating-count").textContent=l.length;const t=function(e){const t={1:0,2:0,3:0,4:0,5:0};return e.forEach((e=>{t[e.rating]++})),t}(l);m(t);const n=l.find((e=>e.user_id===i.id));s=n?n.rating:null}else document.getElementById("average-rating").textContent="0",document.getElementById("rating-count").textContent="0",m({1:0,2:0,3:0,4:0,5:0}),s=null;y()}catch(e){console.error("Error loading ratings:",e)}}function m(e){const t=l.length||1;for(let n=1;n<=5;n++){const o=e[n]/t*100;document.getElementById(`rating-${n}`).style.width=`${o}%`,document.getElementById(`rating-${n}-percent`).textContent=`${Math.round(o)}%`}}async function g(){try{const{data:e,error:t}=await o.N.from("comments").select("*").eq("document_id",c.id).order("created_at",{ascending:!1});if(t)throw t;if(0===e.length)return void p([]);const n=[...new Set(e.map((e=>e.user_id)))],{data:r,error:a}=await o.N.from("profiles").select("id, full_name, avatar_url").in("id",n);if(a)return console.warn("Could not fetch profiles:",a),void p(e.map((e=>({...e,profiles:null}))));const i=r.reduce(((e,t)=>(e[t.id]=t,e)),{});p(e.map((e=>({...e,profiles:i[e.user_id]||null}))))}catch(e){console.error("Error loading comments:",e),p([])}}function p(e){const t=document.getElementById("comments-list");t.innerHTML="",0!==e.length?e.forEach((e=>{const n=function(e){const t=document.createElement("div");t.className="comment",t.dataset.commentId=e.id;const n=e.user_id===i.id,o=e.profiles?.full_name||"Utilisateur anonyme",r=e.profiles?.avatar_url||"assets/icons/default-avatar.svg",a=new Date(e.created_at).toLocaleDateString("fr-FR",{day:"numeric",month:"long",year:"numeric"}),c=document.createElement("div");c.className="comment-header";const d=document.createElement("div");d.style.display="flex",d.style.alignItems="center",d.style.gap="1rem",d.innerHTML=`\n    <img src="${r}" alt="${o}" class="comment-avatar">\n    <div class="comment-meta">\n      <div class="comment-author">${o}</div>\n      <div class="comment-date">${a}${e.updated_at!==e.created_at?" (modifié)":""}</div>\n    </div>\n  `,c.appendChild(d),t.appendChild(c);const l=document.createElement("div");if(l.className="comment-content",l.textContent=e.content,t.appendChild(l),n){const n=document.createElement("div");n.className="comment-actions",n.innerHTML=`\n      <button class="comment-action edit-comment" data-id="${e.id}">\n        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>\n          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>\n        </svg>\n        Modifier\n      </button>\n      <button class="comment-action delete-comment" data-id="${e.id}">\n        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <polyline points="3 6 5 6 21 6"></polyline>\n          <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>\n        </svg>\n        Supprimer\n      </button>\n    `,t.appendChild(n)}return t}(e);t.appendChild(n)})):t.innerHTML='<p style="text-align: center; color: var(--text-gray); padding: 2rem;">Aucun commentaire pour le moment. Soyez le premier à commenter!</p>'}function f(e){const t=e.target.dataset.tab;document.querySelectorAll(".tab-btn").forEach((e=>{e.classList.toggle("active",e.dataset.tab===t)})),document.getElementById("synthese-tab").style.display="synthese"===t?"block":"none",document.getElementById("commentaires-tab").style.display="commentaires"===t?"block":"none",document.getElementById("sources-tab").style.display="sources"===t?"block":"none"}function y(){const e=document.querySelectorAll("#user-rating .star-btn");if(s)e.forEach(((e,t)=>{e.classList.toggle("selected",t<s),e.classList.remove("hovered"),e.setAttribute("data-star-type","full")}));else{const t=parseFloat(document.getElementById("average-rating").textContent);!isNaN(t)&&t>0?displayAverageRating(t):e.forEach((e=>{e.classList.remove("selected","hovered"),e.setAttribute("data-star-type","empty")}))}}async function h(e){const t=parseInt(e.target.dataset.rating);if(s!==t)try{const{data:e}=await o.N.from("ratings").select("id").eq("document_id",c.id).eq("user_id",i.id).single();e?await o.N.from("ratings").update({rating:t,updated_at:(new Date).toISOString()}).eq("id",e.id):await o.N.from("ratings").insert({document_id:c.id,user_id:i.id,rating:t}),s=t,await u()}catch(e){console.error("Error rating document:",e),alert("Erreur lors de l'enregistrement de votre note")}else try{const{error:e}=await o.N.from("ratings").delete().eq("document_id",c.id).eq("user_id",i.id);if(e)throw e;s=null,await u()}catch(e){console.error("Error removing rating:",e),alert("Erreur lors de la suppression de votre note")}}async function v(){try{console.log("PDF storage path:",c.pdf_storage_path);const e=c.pdf_storage_path.replace(/^\//,""),{data:t,error:n}=await o.N.storage.from("pdfs").createSignedUrl(e,60,{download:!0});if(n)throw console.error("URL Error details:",n),n;await o.N.from("downloads").insert({document_id:c.id,user_id:i.id});const r=document.createElement("a");r.href=t.signedUrl,r.download=`PLU_${c.zoning.city.name}_${c.zone.name}.pdf`,document.body.appendChild(r),r.click(),document.body.removeChild(r)}catch(e){console.error("Error downloading document:",e),e.message&&e.message.includes("Object not found")?alert("Le fichier PDF n'a pas été trouvé. Veuillez contacter l'administrateur."):alert("Erreur lors du téléchargement")}}async function E(){const e=document.getElementById("comment-input").value.trim();if(e)try{const{error:t}=await o.N.from("comments").insert({document_id:c.id,user_id:i.id,content:e});if(t)throw t;document.getElementById("comment-input").value="",await g()}catch(e){console.error("Error submitting comment:",e),alert("Erreur lors de la publication du commentaire")}else alert("Veuillez entrer un commentaire")}function b(e){const t=e.target.closest(".edit-comment"),n=e.target.closest(".delete-comment");t?async function(e){d=e;const{data:t}=await o.N.from("comments").select("content").eq("id",e).single();document.getElementById("edit-comment-input").value=t.content,document.getElementById("edit-modal").style.display="flex"}(t.dataset.id):n&&async function(e){if(confirm("Êtes-vous sûr de vouloir supprimer ce commentaire?"))try{const{data:t,error:n}=await o.N.rpc("soft_delete_comment",{comment_id:e,user_id:i.id});if(n)throw n;alert("Commentaire supprimé. Il sera définitivement supprimé dans 30 jours. Contactez le support si vous souhaitez le récupérer."),await g()}catch(e){console.error("Error deleting comment:",e),alert("Erreur lors de la suppression")}}(n.dataset.id)}function w(){document.getElementById("edit-modal").style.display="none",d=null}async function _(){const e=document.getElementById("edit-comment-input").value.trim();if(e)try{await o.N.from("comments").update({content:e,updated_at:(new Date).toISOString()}).eq("id",d),w(),await g()}catch(e){console.error("Error updating comment:",e),alert("Erreur lors de la modification")}else alert("Le commentaire ne peut pas être vide")}async function I(){await o.N.auth.signOut(),window.location.href="/auth/login"}function L(e){document.getElementById("loading-state").style.display="none",document.getElementById("error-message").textContent=e,document.getElementById("error-state").style.display="flex"}document.addEventListener("DOMContentLoaded",(async()=>{try{if(!await(0,a.Kv)(!1))return;(0,r.Mt)();const{data:{user:e}}=await o.N.auth.getUser();if(!e)return void(window.location.href="/auth/login");i=e;const t=new URLSearchParams(window.location.search).get("id");if(!t)return void L("Aucun document spécifié");await async function(e){try{const{data:t,error:n}=await o.N.from("documents").select("\n          id,\n          zoning:zonings(name, city:cities(name)),\n          zone:zones(name),\n          html_content,\n          pdf_storage_path,\n          source_plu_date,\n          source_plu_url\n        ").eq("id",e).single();if(n)throw n;c=t,function(e){const t=(a=e.zoning.city.name)?a.replace(/\b\w/g,(e=>e.toUpperCase())):a,n=e.zone.name,o=e.source_plu_date?new Date(e.source_plu_date).toLocaleDateString("fr-FR",{year:"numeric",month:"long"}):"Date inconnue",r=document.getElementById("city-breadcrumb");var a;r.textContent=t,r.href=`/city?name=${encodeURIComponent(e.zoning.city.name)}`,document.getElementById("zone-breadcrumb").textContent=`Zone ${n}`,document.getElementById("document-title").textContent=`Synthèse du PLU de ${t} pour la zone ${n}`,document.getElementById("document-subtitle").textContent=`Basé sur le PLU de ${o}`}(t),document.getElementById("plu-content").innerHTML=t.html_content,await u(),await g(),t.source_plu_url&&(document.getElementById("source-plu-link").href=t.source_plu_url),document.getElementById("loading-state").style.display="none",document.getElementById("document-content").style.display="block"}catch(e){console.error("Error loading document:",e),L("Impossible de charger le document")}}(t),function(){document.querySelectorAll(".tab-btn").forEach((e=>{e.addEventListener("click",f)})),document.querySelectorAll("#user-rating .star-btn").forEach((e=>{e.addEventListener("click",h)})),document.querySelectorAll("#user-rating .star-btn").forEach(((e,t)=>{e.addEventListener("mouseenter",(()=>{return e=t+1,void document.querySelectorAll("#user-rating .star-btn").forEach(((t,n)=>{n<e?t.classList.add("hovered"):t.classList.remove("hovered")}));var e}))})),document.getElementById("user-rating").addEventListener("mouseleave",(()=>{y()})),document.getElementById("download-btn").addEventListener("click",v),document.getElementById("submit-comment").addEventListener("click",E),document.getElementById("comments-list").addEventListener("click",b),document.querySelector(".modal-close").addEventListener("click",w),document.getElementById("cancel-edit").addEventListener("click",w),document.getElementById("save-edit").addEventListener("click",_);const e=document.getElementById("logout-btn");e&&e.addEventListener("click",I)}(),function(){const e=document.getElementById("back-to-top");window.addEventListener("scroll",(()=>{window.scrollY>300?e.classList.add("visible"):e.classList.remove("visible")})),e.addEventListener("click",(()=>{window.scrollTo({top:0,behavior:"smooth"})}))}()}catch(e){console.error("Error initializing PLU summary page:",e),L("Erreur lors de l'initialisation de la page")}}))}},i={};function c(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return a[e].call(n.exports,n,n.exports,c),n.exports}c.m=a,e=[],c.O=(t,n,o,r)=>{if(!n){var a=1/0;for(s=0;s<e.length;s++){for(var[n,o,r]=e[s],i=!0,d=0;d<n.length;d++)(!1&r||a>=r)&&Object.keys(c.O).every((e=>c.O[e](n[d])))?n.splice(d--,1):(i=!1,r<a&&(a=r));if(i){e.splice(s--,1);var l=o();void 0!==l&&(t=l)}}return t}r=r||0;for(var s=e.length;s>0&&e[s-1][2]>r;s--)e[s]=e[s-1];e[s]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);c.r(r);var a={};t=t||[null,n({}),n([]),n(n)];for(var i=2&o&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,c.d(r,a),r},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>"js/"+e+".chunk.js",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",c.l=(e,t,n,a)=>{if(o[e])o[e].push(t);else{var i,d;if(void 0!==n)for(var l=document.getElementsByTagName("script"),s=0;s<l.length;s++){var u=l[s];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){i=u;break}}i||(d=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,c.nc&&i.setAttribute("nonce",c.nc),i.setAttribute("data-webpack",r+n),i.src=e),o[e]=[t];var m=(t,n)=>{i.onerror=i.onload=null,clearTimeout(g);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},g=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),d&&document.head.appendChild(i)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.j=628,c.p="/",(()=>{var e={628:0};c.f.j=(t,n)=>{var o=c.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var a=c.p+c.u(t),i=new Error;c.l(a,(n=>{if(c.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,o[1](i)}}),"chunk-"+t,t)}},c.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[a,i,d]=n,l=0;if(a.some((t=>0!==e[t]))){for(o in i)c.o(i,o)&&(c.m[o]=i[o]);if(d)var s=d(c)}for(t&&t(n);l<a.length;l++)r=a[l],c.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return c.O(s)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var d=c.O(void 0,[76],(()=>c(5852)));d=c.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,