(()=>{"use strict";var e,t,n,o,r,a={668:(e,t,n)=>{const o=(0,n(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let r=null,a=!1;function i(e){r=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function c(e=!0){if(e&&!a&&await async function(){try{const{data:{session:e},error:t}=await o.auth.getSession();if(t||!e)return console.log("No valid session found"),i(null),a=!1,!1;const{error:n}=await o.auth.refreshSession();return n?(console.warn("Session validation failed:",n),await o.auth.signOut(),i(null),a=!1,!1):(i(e.user),a=!0,!0)}catch(e){return console.error("Session validation error:",e),i(null),a=!1,!1}}(),!e&&!r){const e=localStorage.getItem("currentUser");if(e)try{r=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return r}let d=null;function s(e){d=e;const t=document.getElementById("userStatus"),n=document.getElementById("loginLink"),o=document.getElementById("signupLink"),r=document.getElementById("logoutBtn");e?(t&&(t.classList.remove("hidden"),t.textContent="Votre compte"),n&&n.classList.add("hidden"),o&&o.classList.add("hidden"),r&&r.classList.remove("hidden"),console.log("Header updated: User is authenticated")):(t&&t.classList.add("hidden"),n&&n.classList.remove("hidden"),o&&o.classList.remove("hidden"),r&&r.classList.add("hidden"),console.log("Header updated: User is not authenticated"))}let l=null,u=null,m=null;async function g(){try{const{data:t,error:n}=await o.from("ratings").select("rating, user_id").eq("document_id",u.id);if(n)throw n;if(t&&t.length>0){const n=t.reduce(((e,t)=>e+t.rating),0)/t.length;document.getElementById("average-rating").textContent=n.toFixed(1),document.getElementById("rating-count").textContent=t.length;const o=t.find((e=>e.user_id===l.id));o&&(e=o.rating,document.querySelectorAll("#user-rating .star").forEach(((t,n)=>{n<e&&t.classList.add("selected")})))}else document.getElementById("average-rating").textContent="-",document.getElementById("rating-count").textContent="0"}catch(e){console.error("Error loading ratings:",e)}var e}async function f(){try{const{data:e,error:t}=await o.from("comments").select("\n                id,\n                content,\n                created_at,\n                updated_at,\n                user_id,\n                profiles:user_id(full_name, avatar_url)\n            ").eq("document_id",u.id).order("created_at",{ascending:!1});if(t)throw t;document.getElementById("comment-count").textContent=e.length,function(e){const t=document.getElementById("comments-list");t.innerHTML="",0!==e.length?e.forEach((e=>{const n=function(e){const t=document.createElement("div");t.className="comment",t.dataset.commentId=e.id;const n=e.user_id===l.id,o=e.profiles?.full_name||"Utilisateur anonyme",r=e.profiles?.avatar_url||"/assets/default-avatar.png",a=new Date(e.created_at).toLocaleDateString("fr-FR",{day:"numeric",month:"long",year:"numeric"});return t.innerHTML=`\n        <div class="comment-header">\n            <div class="comment-author">\n                <img src="${r}" alt="${o}" class="comment-avatar">\n                <div>\n                    <div class="comment-name">${o}</div>\n                    <div class="comment-date">${a}${e.updated_at!==e.created_at?" (modifié)":""}</div>\n                </div>\n            </div>\n            ${n?`\n                <div class="comment-actions">\n                    <button class="comment-action edit-comment" data-id="${e.id}">Modifier</button>\n                    <button class="comment-action delete-comment" data-id="${e.id}">Supprimer</button>\n                </div>\n            `:""}\n        </div>\n        <div class="comment-content">${function(e){const t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"};return e.replace(/[&<>"']/g,(e=>t[e]))}(e.content)}</div>\n    `,t}(e);t.appendChild(n)})):t.innerHTML='<p class="no-comments">Aucun commentaire pour le moment. Soyez le premier à commenter!</p>'}(e)}catch(e){console.error("Error loading comments:",e)}}function y(e){const t=e.target.dataset.tab;document.querySelectorAll(".tab-btn").forEach((e=>{e.classList.toggle("active",e.dataset.tab===t)})),document.getElementById("summary-tab").style.display="summary"===t?"block":"none",document.getElementById("comments-tab").style.display="comments"===t?"block":"none"}async function p(e){const t=parseInt(e.target.dataset.rating);try{const{data:e}=await o.from("ratings").select("id").eq("document_id",u.id).eq("user_id",l.id).single();e?await o.from("ratings").update({rating:t,updated_at:(new Date).toISOString()}).eq("id",e.id):await o.from("ratings").insert({document_id:u.id,user_id:l.id,rating:t}),document.querySelectorAll("#user-rating .star").forEach(((e,n)=>{e.classList.toggle("selected",n<t)})),await g()}catch(e){console.error("Error rating document:",e),alert("Erreur lors de l'enregistrement de votre note")}}async function h(){try{const{data:e,error:t}=await o.storage.from("documents").createSignedUrl(u.pdf_storage_path,60);if(t)throw t;await o.from("downloads").insert({document_id:u.id,user_id:l.id});const n=document.getElementById("download-count");n.textContent=parseInt(n.textContent)+1;const r=document.createElement("a");r.href=e.signedUrl,r.download=`PLU_${u.zoning.city.name}_${u.zone.name}.pdf`,r.click()}catch(e){console.error("Error downloading document:",e),alert("Erreur lors du téléchargement")}}async function v(){const e=document.getElementById("comment-input").value.trim();if(e)try{const{error:t}=await o.from("comments").insert({document_id:u.id,user_id:l.id,content:e});if(t)throw t;document.getElementById("comment-input").value="",await f()}catch(e){console.error("Error submitting comment:",e),alert("Erreur lors de la publication du commentaire")}else alert("Veuillez entrer un commentaire")}function E(e){e.target.classList.contains("edit-comment")?async function(e){m=e;const{data:t}=await o.from("comments").select("content").eq("id",e).single();document.getElementById("edit-comment-input").value=t.content,document.getElementById("edit-modal").style.display="flex"}(e.target.dataset.id):e.target.classList.contains("delete-comment")&&async function(e){if(confirm("Êtes-vous sûr de vouloir supprimer ce commentaire?"))try{await o.from("comments").delete().eq("id",e),await f()}catch(e){console.error("Error deleting comment:",e),alert("Erreur lors de la suppression")}}(e.target.dataset.id)}function w(){document.getElementById("edit-modal").style.display="none",m=null}async function b(){const e=document.getElementById("edit-comment-input").value.trim();if(e)try{await o.from("comments").update({content:e,updated_at:(new Date).toISOString()}).eq("id",m),w(),await f()}catch(e){console.error("Error updating comment:",e),alert("Erreur lors de la modification")}else alert("Le commentaire ne peut pas être vide")}async function I(){await o.auth.signOut(),window.location.href="/login"}function _(e){document.getElementById("loading-state").style.display="none",document.getElementById("error-message").textContent=e,document.getElementById("error-state").style.display="block"}document.addEventListener("DOMContentLoaded",(async()=>{console.log("Initializing header authentication..."),function(){const e=document.getElementById("logoutBtn");e&&(e.replaceWith(e.cloneNode(!0)),document.getElementById("logoutBtn").addEventListener("click",(async e=>{e.preventDefault(),console.log("Logout initiated from header");try{const{error:e}=await o.auth.signOut();e?(console.error("Error logging out:",e.message),alert("Erreur lors de la déconnexion. Veuillez réessayer.")):console.log("Logout successful, redirecting to home")}catch(e){console.error("Exception during logout:",e),alert("Une erreur inattendue s'est produite lors de la déconnexion.")}})))}(),o.auth.onAuthStateChange(((e,t)=>{const n=t?.user||null;i(n),s(n),"SIGNED_OUT"===e?(console.log("Header auth: User signed out, redirecting to home"),setTimeout((()=>{window.location.href="/"}),100)):"SIGNED_IN"===e?console.log("Header auth: User signed in"):"INITIAL_SESSION"===e?console.log("Header auth: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("Header auth: Token refreshed")})),s(c()),console.log("Header authentication initialized");const{data:{user:e}}=await o.auth.getUser();if(!e)return void(window.location.href="/login");l=e;const t=new URLSearchParams(window.location.search).get("id");t?(await async function(e){try{const{data:t,error:n}=await o.from("documents").select("\n          id,\n          zoning:zonings(name, city:cities(name)),\n          zone:zones(name),\n          html_content,\n          pdf_storage_path,\n          source_plu_date\n        ").eq("id",e).single();if(n)throw n;u=t,function(e){document.getElementById("city-name").textContent=e.zoning.city.name,document.getElementById("zoning-name").textContent=e.zoning.name,document.getElementById("zone-name").textContent=e.zone.name,document.getElementById("doc-city").textContent=e.zoning.city.name,document.getElementById("doc-zone").textContent=e.zone.name,document.getElementById("doc-zoning").textContent=e.zoning.name}(t),document.getElementById("plu-content").innerHTML=t.html_content,await g(),await f(),await async function(){try{const{data:e,error:t}=await o.from("downloads").select("id").eq("document_id",u.id);if(t)throw t;document.getElementById("download-count").textContent=e.length}catch(e){console.error("Error loading download count:",e)}}(),document.getElementById("loading-state").style.display="none",document.getElementById("document-content").style.display="block"}catch(e){console.error("Error loading document:",e),_("Impossible de charger le document")}}(t),document.querySelectorAll(".tab-btn").forEach((e=>{e.addEventListener("click",y)})),document.querySelectorAll("#user-rating .star").forEach((e=>{e.addEventListener("click",p)})),document.getElementById("download-btn").addEventListener("click",h),document.getElementById("submit-comment").addEventListener("click",v),document.getElementById("comments-list").addEventListener("click",E),document.querySelector(".modal-close").addEventListener("click",w),document.getElementById("cancel-edit").addEventListener("click",w),document.getElementById("save-edit").addEventListener("click",b),document.getElementById("logout-btn").addEventListener("click",I)):_("Aucun document spécifié")}))}},i={};function c(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return a[e].call(n.exports,n,n.exports,c),n.exports}c.m=a,e=[],c.O=(t,n,o,r)=>{if(!n){var a=1/0;for(l=0;l<e.length;l++){for(var[n,o,r]=e[l],i=!0,d=0;d<n.length;d++)(!1&r||a>=r)&&Object.keys(c.O).every((e=>c.O[e](n[d])))?n.splice(d--,1):(i=!1,r<a&&(a=r));if(i){e.splice(l--,1);var s=o();void 0!==s&&(t=s)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);c.r(r);var a={};t=t||[null,n({}),n([]),n(n)];for(var i=2&o&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,c.d(r,a),r},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>"js/"+e+".bundle.js",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",c.l=(e,t,n,a)=>{if(o[e])o[e].push(t);else{var i,d;if(void 0!==n)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var u=s[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){i=u;break}}i||(d=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,c.nc&&i.setAttribute("nonce",c.nc),i.setAttribute("data-webpack",r+n),i.src=e),o[e]=[t];var m=(t,n)=>{i.onerror=i.onload=null,clearTimeout(g);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},g=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),d&&document.head.appendChild(i)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e+"../"})(),(()=>{var e={628:0};c.f.j=(t,n)=>{var o=c.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var a=c.p+c.u(t),i=new Error;c.l(a,(n=>{if(c.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,o[1](i)}}),"chunk-"+t,t)}},c.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[a,i,d]=n,s=0;if(a.some((t=>0!==e[t]))){for(o in i)c.o(i,o)&&(c.m[o]=i[o]);if(d)var l=d(c)}for(t&&t(n);s<a.length;s++)r=a[s],c.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return c.O(l)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var d=c.O(void 0,[303],(()=>c(668)));d=c.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dUQsRUFBdUIsQ0FBQ0MsRUFBNEI1UCxLQUN2RCxJQUdJMkosRUFBVXlDLEdBSFRoQyxFQUFVeUYsRUFBYUMsR0FBVzlQLEVBR2hCeUssRUFBSSxFQUMzQixHQUFHTCxFQUFTMkYsTUFBTTVOLEdBQWdDLElBQXhCZ04sRUFBZ0JoTixLQUFhLENBQ3RELElBQUl3SCxLQUFZa0csRUFDWm5HLEVBQW9Cc0MsRUFBRTZELEVBQWFsRyxLQUNyQ0QsRUFBb0IxRSxFQUFFMkUsR0FBWWtHLEVBQVlsRyxJQUdoRCxHQUFHbUcsRUFBUyxJQUFJM0YsRUFBUzJGLEVBQVFwRyxFQUNsQyxDQUVBLElBREdrRyxHQUE0QkEsRUFBMkI1UCxHQUNyRHlLLEVBQUlMLEVBQVNoSSxPQUFRcUksSUFDekIyQixFQUFVaEMsRUFBU0ssR0FDaEJmLEVBQW9Cc0MsRUFBRW1ELEVBQWlCL0MsSUFBWStDLEVBQWdCL0MsSUFDckUrQyxFQUFnQi9DLEdBQVMsS0FFMUIrQyxFQUFnQi9DLEdBQVcsRUFFNUIsT0FBTzFDLEVBQW9CUSxFQUFFQyxFQUFPLEVBR2pDNkYsRUFBcUJDLEtBQW1DLDZCQUFJQSxLQUFtQyw4QkFBSyxHQUN4R0QsRUFBbUJqTixRQUFRNE0sRUFBcUJyQixLQUFLLEtBQU0sSUFDM0QwQixFQUFtQjlDLEtBQU95QyxFQUFxQnJCLEtBQUssS0FBTTBCLEVBQW1COUMsS0FBS29CLEtBQUswQixHLEtDbEZ2RixJQUFJRSxFQUFzQnhHLEVBQW9CUSxPQUFFTCxFQUFXLENBQUMsTUFBTSxJQUFPSCxFQUFvQixPQUM3RndHLEVBQXNCeEcsRUFBb0JRLEVBQUVnRyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy9zdXBhYmFzZS1jbGllbnQuanMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy9hdXRoL2F1dGguanMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC8uL3NyYy9qcy9hdXRoL2hlYWRlci1hdXRoLmpzIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvLi9zcmMvanMvcGx1LXN1bW1hcnkuanMiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdXJiYW5kb2NzX3dlYmFwcC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly91cmJhbmRvY3Nfd2ViYXBwL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3VyYmFuZG9jc193ZWJhcHAvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcInVyYmFuZG9jc193ZWJhcHA6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIvLyBzcmMvanMvc3VwYWJhc2UtY2xpZW50LmpzXG4vKipcbiAqIFN1cGFiYXNlIENsaWVudFxuICogQG1vZHVsZSBzdXBhYmFzZS1jbGllbnRcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIG1vZHVsZSBoYW5kbGVzIHRoZSBTdXBhYmFzZSBjbGllbnQgaW5pdGlhbGl6YXRpb24gYW5kIGNvbmZpZ3VyYXRpb24uXG4gKiBAdmVyc2lvbiAwLjAuMlxuICogQGF1dGhvciBHcmV5UGFuZGFcbiAqXG4gKiBAY2hhbmdlbG9nXG4gKiAtIDAuMC4yICgyMDI1LTA1LTI3KTogQWRkZWQgZW52aXJvbmVtZW50IHZhcmlhYmxlcyBlcnJvciBoYW5kbGluZyBmb3IgbWlzc2luZy5cbiAqIC0gMC4wLjEgKDIwMjUtMDUtMDkpOiBJbml0aWFsIHZlcnNpb24gd2l0aCBiYXNpYyBTdXBhYmFzZSBjbGllbnQgaW5pdGlhbGl6YXRpb24uXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIkBzdXBhYmFzZS9zdXBhYmFzZS1qc1wiO1xuXG5jb25zdCBzdXBhYmFzZVVybCA9IFwiaHR0cHM6Ly9vZmV5c3NpcGlia3RtYmZlYmliby5zdXBhYmFzZS5jb1wiO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID1cbiAgXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKcGMzTWlPaUp6ZFhCaFltRnpaU0lzSW5KbFppSTZJbTltWlhsemMybHdhV0pyZEcxaVptVmlhV0p2SWl3aWNtOXNaU0k2SW1GdWIyNGlMQ0pwWVhRaU9qRTNORE01TWpVd09UUXNJbVY0Y0NJNk1qQTFPVFV3TVRBNU5IMC53NzFDQUtmb2xrdHpSbC1UbUxWaEhZYUViaENmVms0QTdZcmFFVUNnbHJVXCI7XG5cbmlmICghc3VwYWJhc2VVcmwgfHwgIXN1cGFiYXNlQW5vbktleSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIFN1cGFiYXNlIGVudmlyb25tZW50IHZhcmlhYmxlc1wiKTtcbn1cblxuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpO1xuXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjbGllbnQ7XG4iLCIvLyBzcmMvYXV0aC9hdXRoLmpzXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uIE1vZHVsZSAtIEJhc2VcbiAqIEBtb2R1bGUgYXV0aFxuICogQGRlc2NyaXB0aW9uIEJhc2UgbW9kdWxlIGZvciBhdXRoZW50aWNhdGlvbiB3aXRoIGNvbW1vbiBmdW5jdGlvbnMgYW5kIGNvbmZpZ3VyYXRpb25cbiAqIEB2ZXJzaW9uIDAuMC41XG4gKlxuICogQGNoYW5nZWxvZ1xuICogLSAwLjAuNSAoMjAyNS0wNS0xNSk6IEFkZGVkIHNlc3Npb24gdmFsaWRhdGlvbiBhbmQgcHJvdGVjdGlvbiBhZ2FpbnN0IHN0YWxlIHNlc3Npb25zLlxuICogLSAwLjAuNCAoMjAyNS0wNS0xNSk6IFJlbW92YWwgb2YgRmlyZWJhc2UgQ2xvdWQgRnVuY3Rpb25zIGNvbnN0YW50cy5cbiAqIC0gMC4wLjMgKDIwMjUtMDUtMTMpOiBNb2RpZmllZCB0aGUgYXV0aGVudGljYXRpb24gc3RhdGUgbWFuYWdlbWVudCB0byB1c2UgU3VwYWJhc2UgQXV0aCBzeXN0ZW0uXG4gKiAtIDAuMC4yICgyMDI1LTA1LTEzKTogUmVvcmdhbml6YXRpb24gaW50byBzZXBhcmF0ZSBtb2R1bGVzXG4gKiAtIDAuMC4xICgyMDI1LTA1LTAzKTogSW5pdGlhbCBjcmVhdGlvblxuICovXG5cbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4uL3N1cGFiYXNlLWNsaWVudC5qc1wiO1xuXG4vLyBHbG9iYWwgYXV0aGVudGljYXRpb24gc3RhdGVcbmxldCBjdXJyZW50VXNlciA9IG51bGw7XG5sZXQgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdXNlclxuICogQHBhcmFtIHtPYmplY3R9IHVzZXIgLSBVc2VyIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRVc2VyKHVzZXIpIHtcbiAgY3VycmVudFVzZXIgPSB1c2VyO1xuICAvLyBQb3NzaWJsZSBzdG9yYWdlIGluIGxvY2FsU3RvcmFnZS9zZXNzaW9uU3RvcmFnZVxuICBpZiAodXNlcikge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudFVzZXJcIiwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICB9IGVsc2Uge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgaWYgdGhlIGN1cnJlbnQgc2Vzc2lvbiBpcyBhY3RpdmUgd2l0aCBTdXBhYmFzZVxuICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFRydWUgaWYgc2Vzc2lvbiBpcyB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVNlc3Npb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGN1cnJlbnQgc2Vzc2lvbiBmcm9tIFN1cGFiYXNlXG4gICAgY29uc3Qge1xuICAgICAgZGF0YTogeyBzZXNzaW9uIH0sXG4gICAgICBlcnJvcjogc2Vzc2lvbkVycm9yLFxuICAgIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcblxuICAgIC8vIE5vIHNlc3Npb24gb3IgZXJyb3IgcmV0cmlldmluZyBzZXNzaW9uXG4gICAgaWYgKHNlc3Npb25FcnJvciB8fCAhc2Vzc2lvbikge1xuICAgICAgY29uc29sZS5sb2coXCJObyB2YWxpZCBzZXNzaW9uIGZvdW5kXCIpO1xuICAgICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVHJ5IHRvIHJlZnJlc2ggdGhlIHRva2VuIHRvIHZhbGlkYXRlIGl0IHdpdGggdGhlIHNlcnZlclxuICAgIGNvbnN0IHsgZXJyb3I6IHJlZnJlc2hFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5yZWZyZXNoU2Vzc2lvbigpO1xuXG4gICAgaWYgKHJlZnJlc2hFcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKFwiU2Vzc2lvbiB2YWxpZGF0aW9uIGZhaWxlZDpcIiwgcmVmcmVzaEVycm9yKTtcbiAgICAgIC8vIEZvcmNlIGNsZWFyIHRoZSBpbnZhbGlkIHNlc3Npb25cbiAgICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICAgICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gU2Vzc2lvbiBpcyB2YWxpZCwgdXBkYXRlIHRoZSBjdXJyZW50IHVzZXJcbiAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgIHNlc3Npb25WYWxpZGF0ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlNlc3Npb24gdmFsaWRhdGlvbiBlcnJvcjpcIiwgZSk7XG4gICAgc2V0Q3VycmVudFVzZXIobnVsbCk7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudCB1c2VyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkYXRlIC0gV2hldGhlciB0byB2YWxpZGF0ZSB0aGUgc2Vzc2lvbiB3aXRoIFN1cGFiYXNlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3R8bnVsbD59IFRoZSBjdXJyZW50IHVzZXIgb3IgbnVsbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudFVzZXIodmFsaWRhdGUgPSB0cnVlKSB7XG4gIC8vIElmIHdlIG5lZWQgdG8gdmFsaWRhdGUgYW5kIGhhdmVuJ3QgZG9uZSBzbyB5ZXRcbiAgaWYgKHZhbGlkYXRlICYmICFzZXNzaW9uVmFsaWRhdGVkKSB7XG4gICAgYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG4gIH1cblxuICAvLyBJZiBubyB2YWxpZGF0aW9uIG5lZWRlZCBvciBhbHJlYWR5IHZhbGlkYXRlZFxuICBpZiAoIXZhbGlkYXRlICYmICFjdXJyZW50VXNlcikge1xuICAgIC8vIFRyeSB0byByZXRyaWV2ZSBmcm9tIHN0b3JhZ2UgaWYgbm90IGluIG1lbW9yeVxuICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIHVzZXI6XCIsIGUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50VXNlcjtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91cyB2ZXJzaW9uIG9mIGdldEN1cnJlbnRVc2VyIGZvciBub24tYXN5bmMgY29udGV4dHNcbiAqIFdBUk5JTkc6IFRoaXMgbWF5IHJldHVybiBzdGFsZSBkYXRhIGlmIHNlc3Npb24gaXMgaW52YWxpZFxuICogQHJldHVybnMge09iamVjdHxudWxsfSBUaGUgY3VycmVudCB1c2VyIG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRVc2VyU3luYygpIHtcbiAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIHVzZXI6XCIsIGUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImN1cnJlbnRVc2VyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50VXNlcjtcbn1cblxuLyoqXG4gKiBMb2dzIG91dCB0aGUgdXNlclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gIHRyeSB7XG4gICAgLy8gU2lnbiBvdXQgZnJvbSBTdXBhYmFzZVxuICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuXG4gICAgLy8gQ2xlYXIgbG9jYWwgc3RhdGVcbiAgICBjdXJyZW50VXNlciA9IG51bGw7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG5cbiAgICAvLyBSZWRpcmVjdCB0byB0aGUgaG9tZSBwYWdlIGFmdGVyIGxvZ291dFxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvXCI7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGR1cmluZyBsb2dvdXQ6XCIsIGVycm9yKTtcbiAgICAvLyBTdGlsbCBjbGVhciBsb2NhbCBzdGF0ZSBldmVuIGlmIFN1cGFiYXNlIHNpZ25PdXQgZmFpbHNcbiAgICBjdXJyZW50VXNlciA9IG51bGw7XG4gICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiY3VycmVudFVzZXJcIik7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9cIjtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4gd2l0aCB2YWxpZCBzZXNzaW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbGlkYXRlIC0gV2hldGhlciB0byB2YWxpZGF0ZSB3aXRoIFN1cGFiYXNlIGZpcnN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4gd2l0aCB2YWxpZCBzZXNzaW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0xvZ2dlZEluKHZhbGlkYXRlID0gdHJ1ZSkge1xuICBjb25zdCB1c2VyID0gYXdhaXQgZ2V0Q3VycmVudFVzZXIodmFsaWRhdGUpO1xuICByZXR1cm4gdXNlciAhPT0gbnVsbDtcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91cyB2ZXJzaW9uIG9mIGlzTG9nZ2VkSW5cbiAqIFdBUk5JTkc6IFRoaXMgbWF5IHJldHVybiBpbmNvcnJlY3QgcmVzdWx0cyBpZiBzZXNzaW9uIGlzIGludmFsaWRcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHVzZXIgYXBwZWFycyB0byBiZSBsb2dnZWQgaW4gbG9jYWxseVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMb2dnZWRJblN5bmMoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50VXNlclN5bmMoKSAhPT0gbnVsbDtcbn1cblxuLyoqXG4gKiBQcm90ZWN0cyBhIHBhZ2UgdGhhdCByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0VXJsIC0gVVJMIHRvIHJlZGlyZWN0IGlmIG5vdCBhdXRoZW50aWNhdGVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiBhdXRoZW50aWNhdGVkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3RlY3RQYWdlKHJlZGlyZWN0VXJsID0gXCIvbG9naW5cIikge1xuICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG5cbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgLy8gUmVkaXJlY3QgdG8gbG9naW4gcGFnZVxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcmVkaXJlY3RVcmw7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYXV0aCBvbiBwYWdlIGxvYWRcbiAqIENhbGwgdGhpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYXBwIGluaXRpYWxpemF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0QXV0aCgpIHtcbiAgLy8gVmFsaWRhdGUgc2Vzc2lvbiBvbiBwYWdlIGxvYWRcbiAgYXdhaXQgdmFsaWRhdGVTZXNzaW9uKCk7XG5cbiAgLy8gU2V0IHVwIGF1dGggc3RhdGUgY2hhbmdlIGxpc3RlbmVyXG4gIHN1cGFiYXNlLmF1dGgub25BdXRoU3RhdGVDaGFuZ2UoYXN5bmMgKGV2ZW50LCBzZXNzaW9uKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJBdXRoIHN0YXRlIGNoYW5nZWQ6XCIsIGV2ZW50KTtcblxuICAgIGlmIChldmVudCA9PT0gXCJTSUdORURfSU5cIiAmJiBzZXNzaW9uKSB7XG4gICAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChldmVudCA9PT0gXCJTSUdORURfT1VUXCIpIHtcbiAgICAgIHNldEN1cnJlbnRVc2VyKG51bGwpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IFwiVE9LRU5fUkVGUkVTSEVEXCIpIHtcbiAgICAgIHNldEN1cnJlbnRVc2VyKHNlc3Npb24udXNlcik7XG4gICAgICBzZXNzaW9uVmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBcIlVTRVJfVVBEQVRFRFwiKSB7XG4gICAgICBzZXRDdXJyZW50VXNlcihzZXNzaW9uLnVzZXIpO1xuICAgICAgc2Vzc2lvblZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhbiBlcnJvciBtZXNzYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UgdG8gZGlzcGxheVxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRJZCAtIElEIG9mIHRoZSBlbGVtZW50IHdoZXJlIHRvIGRpc3BsYXkgdGhlIGVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgZWxlbWVudElkID0gXCJlcnJvck1lc3NhZ2VcIikge1xuICBjb25zdCBlcnJvckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoZXJyb3JFbGVtZW50KSB7XG4gICAgZXJyb3JFbGVtZW50LmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGVsZW1lbnQgbm90IGZvdW5kOlwiLCBlbGVtZW50SWQpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGxheXMgYSBzdGF0dXMgbWVzc2FnZVxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGRpc3BsYXlcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gTWVzc2FnZSB0eXBlIChzdWNjZXNzLCBpbmZvLCB3YXJuaW5nLCBkYW5nZXIpXG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudElkIC0gSUQgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdG8gZGlzcGxheSB0aGUgbWVzc2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd1N0YXR1cyhcbiAgbWVzc2FnZSxcbiAgdHlwZSA9IFwiaW5mb1wiLFxuICBlbGVtZW50SWQgPSBcInN0YXR1c01lc3NhZ2VcIlxuKSB7XG4gIGNvbnN0IHN0YXR1c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoc3RhdHVzRWxlbWVudCkge1xuICAgIHN0YXR1c0VsZW1lbnQudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBhbGVydC0qIGNsYXNzZXNcbiAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgIGlmIChjbGFzc05hbWUuc3RhcnRzV2l0aChcImFsZXJ0LVwiKSkge1xuICAgICAgICBzdGF0dXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgY2xhc3MgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZVxuICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NMaXN0LmFkZChgYWxlcnQtJHt0eXBlfWApO1xuICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKFwiU3RhdHVzIGVsZW1lbnQgbm90IGZvdW5kOlwiLCBlbGVtZW50SWQpO1xuICB9XG59XG5cbi8qKlxuICogSGlkZXMgYW4gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRJZCAtIElEIG9mIHRoZSBlbGVtZW50IHRvIGhpZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpZGVFbGVtZW50KGVsZW1lbnRJZCkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKTtcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG93cyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudElkIC0gSUQgb2YgdGhlIGVsZW1lbnQgdG8gc2hvd1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd0VsZW1lbnQoZWxlbWVudElkKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICBpZiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfVxufVxuXG4vKipcbiAqIFNob3dzIHRoZSBsb2FkaW5nIGluZGljYXRvclxuICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvbklkIC0gSUQgb2YgdGhlIGJ1dHRvblxuICogQHBhcmFtIHtzdHJpbmd9IHNwaW5uZXJJZCAtIElEIG9mIHRoZSBzcGlubmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaG93TG9hZGluZyhidXR0b25JZCwgc3Bpbm5lcklkKSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbklkKTtcbiAgY29uc3Qgc3Bpbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwaW5uZXJJZCk7XG5cbiAgaWYgKGJ1dHRvbikgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgaWYgKHNwaW5uZXIpIHNwaW5uZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbn1cblxuLyoqXG4gKiBIaWRlcyB0aGUgbG9hZGluZyBpbmRpY2F0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25JZCAtIElEIG9mIHRoZSBidXR0b25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcGlubmVySWQgLSBJRCBvZiB0aGUgc3Bpbm5lclxuICovXG5leHBvcnQgZnVuY3Rpb24gaGlkZUxvYWRpbmcoYnV0dG9uSWQsIHNwaW5uZXJJZCkge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidXR0b25JZCk7XG4gIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzcGlubmVySWQpO1xuXG4gIGlmIChidXR0b24pIGJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICBpZiAoc3Bpbm5lcikgc3Bpbm5lci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xufVxuXG4vLyBFeHBvcnQgdGhlIG5lY2Vzc2FyeSBmdW5jdGlvbnMgYW5kIHZhcmlhYmxlc1xuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRDdXJyZW50VXNlcixcbiAgZ2V0Q3VycmVudFVzZXJTeW5jLFxuICBzZXRDdXJyZW50VXNlcixcbiAgbG9nb3V0LFxuICBpc0xvZ2dlZEluLFxuICBpc0xvZ2dlZEluU3luYyxcbiAgdmFsaWRhdGVTZXNzaW9uLFxuICBwcm90ZWN0UGFnZSxcbiAgaW5pdEF1dGgsXG4gIHNob3dFcnJvcixcbiAgc2hvd1N0YXR1cyxcbiAgaGlkZUVsZW1lbnQsXG4gIHNob3dFbGVtZW50LFxuICBzaG93TG9hZGluZyxcbiAgaGlkZUxvYWRpbmcsXG59O1xuIiwiLyoqXG4gKiBIZWFkZXIgQXV0aGVudGljYXRpb24gTW9kdWxlXG4gKiBAbW9kdWxlIGhlYWRlci1hdXRoXG4gKiBAZGVzY3JpcHRpb24gSGFuZGxlcyBkeW5hbWljIGhlYWRlciB1cGRhdGVzIGJhc2VkIG9uIGF1dGhlbnRpY2F0aW9uIHN0YXRlIGFjcm9zcyBhbGwgcGFnZXNcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKiBAYXV0aG9yIEdyZXlQYW5kYVxuICpcbiAqIEBjaGFuZ2Vsb2dcbiAqIC0gMS4wLjAgKDIwMjUtMDEtWFgpOiBJbml0aWFsIHZlcnNpb24gLSB1bmlmaWVkIGhlYWRlciBhdXRoIG1hbmFnZW1lbnQgZm9yIGFsbCBwYWdlc1xuICovXG5cbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4uL3N1cGFiYXNlLWNsaWVudC5qc1wiO1xuaW1wb3J0ICogYXMgYXV0aE1vZHVsZSBmcm9tIFwiLi9hdXRoLmpzXCI7XG5cbmxldCBjdXJyZW50VXNlciA9IG51bGw7XG5cbi8qKlxuICogVXBkYXRlIGhlYWRlciBVSSBiYXNlZCBvbiBhdXRoZW50aWNhdGlvbiBzdGF0ZVxuICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdXNlciAtIFRoZSBhdXRoZW50aWNhdGVkIHVzZXIgb2JqZWN0IG9yIG51bGxcbiAqL1xuZnVuY3Rpb24gdXBkYXRlSGVhZGVyRm9yQXV0aFN0YXRlKHVzZXIpIHtcbiAgY3VycmVudFVzZXIgPSB1c2VyO1xuXG4gIC8vIEdldCBoZWFkZXIgZWxlbWVudHMgKHRoZXkgbWlnaHQgbm90IGV4aXN0IG9uIGFsbCBwYWdlcylcbiAgY29uc3QgdXNlclN0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlclN0YXR1c1wiKTtcbiAgY29uc3QgbG9naW5MaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dpbkxpbmtcIik7XG4gIGNvbnN0IHNpZ251cExpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNpZ251cExpbmtcIik7XG4gIGNvbnN0IGxvZ291dEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nb3V0QnRuXCIpO1xuXG4gIGlmICh1c2VyKSB7XG4gICAgLy8gVXNlciBpcyBzaWduZWQgaW4gLSBzaG93IGF1dGhlbnRpY2F0ZWQgc3RhdGVcbiAgICBpZiAodXNlclN0YXR1cykge1xuICAgICAgdXNlclN0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgICAgdXNlclN0YXR1cy50ZXh0Q29udGVudCA9IFwiVm90cmUgY29tcHRlXCI7XG4gICAgfVxuICAgIGlmIChsb2dpbkxpbmspIGxvZ2luTGluay5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIGlmIChzaWdudXBMaW5rKSBzaWdudXBMaW5rLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgaWYgKGxvZ291dEJ0bikgbG9nb3V0QnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG5cbiAgICBjb25zb2xlLmxvZyhcIkhlYWRlciB1cGRhdGVkOiBVc2VyIGlzIGF1dGhlbnRpY2F0ZWRcIik7XG4gIH0gZWxzZSB7XG4gICAgLy8gVXNlciBpcyBzaWduZWQgb3V0IC0gc2hvdyBndWVzdCBzdGF0ZVxuICAgIGlmICh1c2VyU3RhdHVzKSB1c2VyU3RhdHVzLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgaWYgKGxvZ2luTGluaykgbG9naW5MaW5rLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgaWYgKHNpZ251cExpbmspIHNpZ251cExpbmsuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICBpZiAobG9nb3V0QnRuKSBsb2dvdXRCdG4uY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcblxuICAgIGNvbnNvbGUubG9nKFwiSGVhZGVyIHVwZGF0ZWQ6IFVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXR1cCBsb2dvdXQgZnVuY3Rpb25hbGl0eSBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICovXG5mdW5jdGlvbiBzZXR1cExvZ291dEhhbmRsZXIoKSB7XG4gIGNvbnN0IGxvZ291dEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nb3V0QnRuXCIpO1xuICBpZiAobG9nb3V0QnRuKSB7XG4gICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBsaXN0ZW5lcnMgdG8gYXZvaWQgZHVwbGljYXRlc1xuICAgIGxvZ291dEJ0bi5yZXBsYWNlV2l0aChsb2dvdXRCdG4uY2xvbmVOb2RlKHRydWUpKTtcblxuICAgIC8vIEdldCB0aGUgbmV3IGVsZW1lbnQgYW5kIGFkZCBldmVudCBsaXN0ZW5lclxuICAgIGNvbnN0IG5ld0xvZ291dEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9nb3V0QnRuXCIpO1xuICAgIG5ld0xvZ291dEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc29sZS5sb2coXCJMb2dvdXQgaW5pdGlhdGVkIGZyb20gaGVhZGVyXCIpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnNpZ25PdXQoKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvZ2dpbmcgb3V0OlwiLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICBhbGVydChcIkVycmV1ciBsb3JzIGRlIGxhIGTDqWNvbm5leGlvbi4gVmV1aWxsZXogcsOpZXNzYXllci5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJMb2dvdXQgc3VjY2Vzc2Z1bCwgcmVkaXJlY3RpbmcgdG8gaG9tZVwiKTtcbiAgICAgICAgICAvLyBUaGUgb25BdXRoU3RhdGVDaGFuZ2Ugd2lsbCBoYW5kbGUgdGhlIHJlZGlyZWN0IGFuZCBVSSB1cGRhdGVzXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFeGNlcHRpb24gZHVyaW5nIGxvZ291dDpcIiwgZXJyb3IpO1xuICAgICAgICBhbGVydChcIlVuZSBlcnJldXIgaW5hdHRlbmR1ZSBzJ2VzdCBwcm9kdWl0ZSBsb3JzIGRlIGxhIGTDqWNvbm5leGlvbi5cIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGhlYWRlciBhdXRoZW50aWNhdGlvbiBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICogQ2FsbCB0aGlzIGZ1bmN0aW9uIG9uIGV2ZXJ5IHBhZ2UgdGhhdCBoYXMgYSBoZWFkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRIZWFkZXJBdXRoKCkge1xuICBjb25zb2xlLmxvZyhcIkluaXRpYWxpemluZyBoZWFkZXIgYXV0aGVudGljYXRpb24uLi5cIik7XG5cbiAgLy8gU2V0dXAgbG9nb3V0IGhhbmRsZXJcbiAgc2V0dXBMb2dvdXRIYW5kbGVyKCk7XG5cbiAgLy8gTGlzdGVuIGZvciBhdXRoIHN0YXRlIGNoYW5nZXNcbiAgc3VwYWJhc2UuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZSgoZXZlbnQsIHNlc3Npb24pID0+IHtcbiAgICBjb25zdCB1c2VyID0gc2Vzc2lvbj8udXNlciB8fCBudWxsO1xuXG4gICAgLy8gVXBkYXRlIGF1dGggbW9kdWxlXG4gICAgYXV0aE1vZHVsZS5zZXRDdXJyZW50VXNlcih1c2VyKTtcblxuICAgIC8vIFVwZGF0ZSBoZWFkZXIgVUlcbiAgICB1cGRhdGVIZWFkZXJGb3JBdXRoU3RhdGUodXNlcik7XG5cbiAgICAvLyBIYW5kbGUgc3BlY2lmaWMgZXZlbnRzXG4gICAgaWYgKGV2ZW50ID09PSBcIlNJR05FRF9PVVRcIikge1xuICAgICAgY29uc29sZS5sb2coXCJIZWFkZXIgYXV0aDogVXNlciBzaWduZWQgb3V0LCByZWRpcmVjdGluZyB0byBob21lXCIpO1xuICAgICAgLy8gU21hbGwgZGVsYXkgdG8gZW5zdXJlIGxvZ291dCBjb21wbGV0ZXMgcHJvcGVybHlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL1wiO1xuICAgICAgfSwgMTAwKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBcIlNJR05FRF9JTlwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkhlYWRlciBhdXRoOiBVc2VyIHNpZ25lZCBpblwiKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSBcIklOSVRJQUxfU0VTU0lPTlwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkhlYWRlciBhdXRoOiBJbml0aWFsIHNlc3Npb24gbG9hZGVkXCIpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09IFwiVE9LRU5fUkVGUkVTSEVEXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSGVhZGVyIGF1dGg6IFRva2VuIHJlZnJlc2hlZFwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFNldCBpbml0aWFsIHN0YXRlIGJhc2VkIG9uIHN0b3JlZCB1c2VyIGRhdGFcbiAgY29uc3QgaW5pdGlhbFVzZXIgPSBhdXRoTW9kdWxlLmdldEN1cnJlbnRVc2VyKCk7XG4gIHVwZGF0ZUhlYWRlckZvckF1dGhTdGF0ZShpbml0aWFsVXNlcik7XG5cbiAgY29uc29sZS5sb2coXCJIZWFkZXIgYXV0aGVudGljYXRpb24gaW5pdGlhbGl6ZWRcIik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGF1dGhlbnRpY2F0ZWQgdXNlclxuICogQHJldHVybnMge09iamVjdHxudWxsfSBDdXJyZW50IHVzZXIgb2JqZWN0IG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRVc2VyKCkge1xuICByZXR1cm4gY3VycmVudFVzZXI7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdXNlciBpcyBhdXRoZW50aWNhdGVkXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgcmV0dXJuIGN1cnJlbnRVc2VyICE9PSBudWxsO1xufVxuXG4vKipcbiAqIE1hbnVhbGx5IHVwZGF0ZSBoZWFkZXIgc3RhdGUgKHVzZWZ1bCBmb3IgdGVzdGluZyBvciBzcGVjaWFsIGNhc2VzKVxuICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdXNlciAtIFVzZXIgb2JqZWN0IG9yIG51bGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUhlYWRlcih1c2VyKSB7XG4gIHVwZGF0ZUhlYWRlckZvckF1dGhTdGF0ZSh1c2VyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0SGVhZGVyQXV0aCxcbiAgZ2V0Q3VycmVudFVzZXIsXG4gIGlzQXV0aGVudGljYXRlZCxcbiAgdXBkYXRlSGVhZGVyLFxufTtcbiIsIi8vIHNyYy9qcy9wbHUtc3VtbWFyeS5qc1xuLyoqXG4gKiBQTFUgU3VtbWFyeVxuICogQG1vZHVsZSBwbHUtc3VtbWFyeVxuICogQGRlc2NyaXB0aW9uIFRoaXMgbW9kdWxlIGhhbmRsZXMgdGhlIFBMVSBzdW1tYXJ5IHBhZ2UuXG4gKiBAdmVyc2lvbiAwLjAuM1xuICogQGF1dGhvciBHcmV5UGFuZGFcbiAqXG4gKiBAY2hhbmdlbG9nXG4gKiAtIDAuMC4zICgyMDI1LTAxLVhYKTogQWRkZWQgaGVhZGVyIGF1dGhlbnRpY2F0aW9uIGZvciBkeW5hbWljIGhlYWRlciB1cGRhdGVzXG4gKiAtIDAuMC4yICgyMDI1LTA1LTI3KTogUmV3b3JrIFVJLlxuICogLSAwLjAuMSAoMjAyNS0wNS0xNik6IEluaXRpYWwgdmVyc2lvbiB3aXRoIGJhc2ljIFBMVSBzdW1tYXJ5IHBhZ2UuXG4gKi9cblxuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiLi9zdXBhYmFzZS1jbGllbnQuanNcIjtcbmltcG9ydCB7IGluaXRIZWFkZXJBdXRoIH0gZnJvbSBcIi4vYXV0aC9oZWFkZXItYXV0aC5qc1wiO1xuXG4vLyBHbG9iYWwgdmFyaWFibGVzXG5sZXQgY3VycmVudFVzZXIgPSBudWxsO1xubGV0IGN1cnJlbnREb2N1bWVudCA9IG51bGw7XG5sZXQgY3VycmVudENvbW1lbnRJZCA9IG51bGw7XG5cbi8vIEluaXRpYWxpemUgcGFnZVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAvLyBJbml0aWFsaXplIGhlYWRlciBhdXRoZW50aWNhdGlvbiBmaXJzdFxuICBpbml0SGVhZGVyQXV0aCgpO1xuXG4gIC8vIENoZWNrIGF1dGhlbnRpY2F0aW9uXG4gIGNvbnN0IHtcbiAgICBkYXRhOiB7IHVzZXIgfSxcbiAgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0VXNlcigpO1xuICBpZiAoIXVzZXIpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL2xvZ2luXCI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN1cnJlbnRVc2VyID0gdXNlcjtcblxuICAvLyBHZXQgZG9jdW1lbnQgSUQgZnJvbSBVUkxcbiAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgY29uc3QgZG9jdW1lbnRJZCA9IHVybFBhcmFtcy5nZXQoXCJpZFwiKTtcblxuICBpZiAoIWRvY3VtZW50SWQpIHtcbiAgICBzaG93RXJyb3IoXCJBdWN1biBkb2N1bWVudCBzcMOpY2lmacOpXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIExvYWQgZG9jdW1lbnRcbiAgYXdhaXQgbG9hZERvY3VtZW50KGRvY3VtZW50SWQpO1xuXG4gIC8vIFNldHVwIGV2ZW50IGxpc3RlbmVyc1xuICBzZXR1cEV2ZW50TGlzdGVuZXJzKCk7XG59KTtcblxuLy8gTG9hZCBkb2N1bWVudCBmcm9tIFN1cGFiYXNlXG5hc3luYyBmdW5jdGlvbiBsb2FkRG9jdW1lbnQoZG9jdW1lbnRJZCkge1xuICB0cnkge1xuICAgIC8vIEZldGNoIGRvY3VtZW50IHdpdGggcmVsYXRlZCBkYXRhXG4gICAgY29uc3QgeyBkYXRhOiBkb2N1bWVudERhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJkb2N1bWVudHNcIilcbiAgICAgIC5zZWxlY3QoXG4gICAgICAgIGBcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB6b25pbmc6em9uaW5ncyhuYW1lLCBjaXR5OmNpdGllcyhuYW1lKSksXG4gICAgICAgICAgem9uZTp6b25lcyhuYW1lKSxcbiAgICAgICAgICBodG1sX2NvbnRlbnQsXG4gICAgICAgICAgcGRmX3N0b3JhZ2VfcGF0aCxcbiAgICAgICAgICBzb3VyY2VfcGx1X2RhdGVcbiAgICAgICAgYFxuICAgICAgKVxuICAgICAgLmVxKFwiaWRcIiwgZG9jdW1lbnRJZClcbiAgICAgIC5zaW5nbGUoKTtcblxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG5cbiAgICBjdXJyZW50RG9jdW1lbnQgPSBkb2N1bWVudERhdGE7XG5cbiAgICAvLyBVcGRhdGUgVUkgd2l0aCBkb2N1bWVudCBpbmZvXG4gICAgdXBkYXRlRG9jdW1lbnRJbmZvKGRvY3VtZW50RGF0YSk7XG5cbiAgICAvLyBJbnNlcnQgSFRNTCBjb250ZW50XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbHUtY29udGVudFwiKS5pbm5lckhUTUwgPVxuICAgICAgZG9jdW1lbnREYXRhLmh0bWxfY29udGVudDtcblxuICAgIC8vIExvYWQgcmF0aW5nc1xuICAgIGF3YWl0IGxvYWRSYXRpbmdzKCk7XG5cbiAgICAvLyBMb2FkIGNvbW1lbnRzXG4gICAgYXdhaXQgbG9hZENvbW1lbnRzKCk7XG5cbiAgICAvLyBMb2FkIGRvd25sb2FkIGNvdW50XG4gICAgYXdhaXQgbG9hZERvd25sb2FkQ291bnQoKTtcblxuICAgIC8vIEhpZGUgbG9hZGluZywgc2hvdyBjb250ZW50XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkaW5nLXN0YXRlXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRvY3VtZW50LWNvbnRlbnRcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBkb2N1bWVudDpcIiwgZXJyb3IpO1xuICAgIHNob3dFcnJvcihcIkltcG9zc2libGUgZGUgY2hhcmdlciBsZSBkb2N1bWVudFwiKTtcbiAgfVxufVxuXG4vLyBVcGRhdGUgZG9jdW1lbnQgaW5mb3JtYXRpb24gaW4gVUlcbmZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50SW5mbyhkb2N1bWVudERhdGEpIHtcbiAgLy8gQnJlYWRjcnVtYlxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNpdHktbmFtZVwiKS50ZXh0Q29udGVudCA9XG4gICAgZG9jdW1lbnREYXRhLnpvbmluZy5jaXR5Lm5hbWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiem9uaW5nLW5hbWVcIikudGV4dENvbnRlbnQgPSBkb2N1bWVudERhdGEuem9uaW5nLm5hbWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiem9uZS1uYW1lXCIpLnRleHRDb250ZW50ID0gZG9jdW1lbnREYXRhLnpvbmUubmFtZTtcblxuICAvLyBUaXRsZVxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRvYy1jaXR5XCIpLnRleHRDb250ZW50ID1cbiAgICBkb2N1bWVudERhdGEuem9uaW5nLmNpdHkubmFtZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb2Mtem9uZVwiKS50ZXh0Q29udGVudCA9IGRvY3VtZW50RGF0YS56b25lLm5hbWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZG9jLXpvbmluZ1wiKS50ZXh0Q29udGVudCA9IGRvY3VtZW50RGF0YS56b25pbmcubmFtZTtcbn1cblxuLy8gTG9hZCBhbmQgZGlzcGxheSByYXRpbmdzXG5hc3luYyBmdW5jdGlvbiBsb2FkUmF0aW5ncygpIHtcbiAgdHJ5IHtcbiAgICAvLyBHZXQgYWxsIHJhdGluZ3MgZm9yIHRoaXMgZG9jdW1lbnRcbiAgICBjb25zdCB7IGRhdGE6IHJhdGluZ3MsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJyYXRpbmdzXCIpXG4gICAgICAuc2VsZWN0KFwicmF0aW5nLCB1c2VyX2lkXCIpXG4gICAgICAuZXEoXCJkb2N1bWVudF9pZFwiLCBjdXJyZW50RG9jdW1lbnQuaWQpO1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlXG4gICAgaWYgKHJhdGluZ3MgJiYgcmF0aW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBhdmVyYWdlID1cbiAgICAgICAgcmF0aW5ncy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgci5yYXRpbmcsIDApIC8gcmF0aW5ncy5sZW5ndGg7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImF2ZXJhZ2UtcmF0aW5nXCIpLnRleHRDb250ZW50ID1cbiAgICAgICAgYXZlcmFnZS50b0ZpeGVkKDEpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYXRpbmctY291bnRcIikudGV4dENvbnRlbnQgPSByYXRpbmdzLmxlbmd0aDtcblxuICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCB1c2VyIGhhcyByYXRlZFxuICAgICAgY29uc3QgdXNlclJhdGluZyA9IHJhdGluZ3MuZmluZCgocikgPT4gci51c2VyX2lkID09PSBjdXJyZW50VXNlci5pZCk7XG4gICAgICBpZiAodXNlclJhdGluZykge1xuICAgICAgICBoaWdobGlnaHRVc2VyUmF0aW5nKHVzZXJSYXRpbmcucmF0aW5nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdmVyYWdlLXJhdGluZ1wiKS50ZXh0Q29udGVudCA9IFwiLVwiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYXRpbmctY291bnRcIikudGV4dENvbnRlbnQgPSBcIjBcIjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgcmF0aW5nczpcIiwgZXJyb3IpO1xuICB9XG59XG5cbi8vIEhpZ2hsaWdodCB1c2VyJ3MgcmF0aW5nXG5mdW5jdGlvbiBoaWdobGlnaHRVc2VyUmF0aW5nKHJhdGluZykge1xuICBjb25zdCBzdGFycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjdXNlci1yYXRpbmcgLnN0YXJcIik7XG4gIHN0YXJzLmZvckVhY2goKHN0YXIsIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4IDwgcmF0aW5nKSB7XG4gICAgICBzdGFyLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBMb2FkIGNvbW1lbnRzXG5hc3luYyBmdW5jdGlvbiBsb2FkQ29tbWVudHMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhOiBjb21tZW50cywgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbShcImNvbW1lbnRzXCIpXG4gICAgICAuc2VsZWN0KFxuICAgICAgICBgXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0LFxuICAgICAgICAgICAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgdXNlcl9pZCxcbiAgICAgICAgICAgICAgICBwcm9maWxlczp1c2VyX2lkKGZ1bGxfbmFtZSwgYXZhdGFyX3VybClcbiAgICAgICAgICAgIGBcbiAgICAgIClcbiAgICAgIC5lcShcImRvY3VtZW50X2lkXCIsIGN1cnJlbnREb2N1bWVudC5pZClcbiAgICAgIC5vcmRlcihcImNyZWF0ZWRfYXRcIiwgeyBhc2NlbmRpbmc6IGZhbHNlIH0pO1xuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcblxuICAgIC8vIFVwZGF0ZSBjb21tZW50IGNvdW50XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tZW50LWNvdW50XCIpLnRleHRDb250ZW50ID0gY29tbWVudHMubGVuZ3RoO1xuXG4gICAgLy8gUmVuZGVyIGNvbW1lbnRzXG4gICAgcmVuZGVyQ29tbWVudHMoY29tbWVudHMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGNvbW1lbnRzOlwiLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gUmVuZGVyIGNvbW1lbnRzIGluIFVJXG5mdW5jdGlvbiByZW5kZXJDb21tZW50cyhjb21tZW50cykge1xuICBjb25zdCBjb21tZW50c0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnRzLWxpc3RcIik7XG4gIGNvbW1lbnRzTGlzdC5pbm5lckhUTUwgPSBcIlwiO1xuXG4gIGlmIChjb21tZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBjb21tZW50c0xpc3QuaW5uZXJIVE1MID1cbiAgICAgICc8cCBjbGFzcz1cIm5vLWNvbW1lbnRzXCI+QXVjdW4gY29tbWVudGFpcmUgcG91ciBsZSBtb21lbnQuIFNveWV6IGxlIHByZW1pZXIgw6AgY29tbWVudGVyITwvcD4nO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbW1lbnRzLmZvckVhY2goKGNvbW1lbnQpID0+IHtcbiAgICBjb25zdCBjb21tZW50RWwgPSBjcmVhdGVDb21tZW50RWxlbWVudChjb21tZW50KTtcbiAgICBjb21tZW50c0xpc3QuYXBwZW5kQ2hpbGQoY29tbWVudEVsKTtcbiAgfSk7XG59XG5cbi8vIENyZWF0ZSBjb21tZW50IGVsZW1lbnRcbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnRFbGVtZW50KGNvbW1lbnQpIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmNsYXNzTmFtZSA9IFwiY29tbWVudFwiO1xuICBkaXYuZGF0YXNldC5jb21tZW50SWQgPSBjb21tZW50LmlkO1xuXG4gIGNvbnN0IGlzT3duZXIgPSBjb21tZW50LnVzZXJfaWQgPT09IGN1cnJlbnRVc2VyLmlkO1xuICBjb25zdCB1c2VyTmFtZSA9IGNvbW1lbnQucHJvZmlsZXM/LmZ1bGxfbmFtZSB8fCBcIlV0aWxpc2F0ZXVyIGFub255bWVcIjtcbiAgY29uc3QgYXZhdGFyVXJsID1cbiAgICBjb21tZW50LnByb2ZpbGVzPy5hdmF0YXJfdXJsIHx8IFwiL2Fzc2V0cy9kZWZhdWx0LWF2YXRhci5wbmdcIjtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGNvbW1lbnQuY3JlYXRlZF9hdCkudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZnItRlJcIiwge1xuICAgIGRheTogXCJudW1lcmljXCIsXG4gICAgbW9udGg6IFwibG9uZ1wiLFxuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICB9KTtcblxuICBkaXYuaW5uZXJIVE1MID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29tbWVudC1oZWFkZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50LWF1dGhvclwiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHthdmF0YXJVcmx9XCIgYWx0PVwiJHt1c2VyTmFtZX1cIiBjbGFzcz1cImNvbW1lbnQtYXZhdGFyXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbW1lbnQtbmFtZVwiPiR7dXNlck5hbWV9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21tZW50LWRhdGVcIj4ke2RhdGV9JHtcbiAgICBjb21tZW50LnVwZGF0ZWRfYXQgIT09IGNvbW1lbnQuY3JlYXRlZF9hdCA/IFwiIChtb2RpZmnDqSlcIiA6IFwiXCJcbiAgfTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICBpc093bmVyXG4gICAgICAgICAgICAgICAgPyBgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbW1lbnQtYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY29tbWVudC1hY3Rpb24gZWRpdC1jb21tZW50XCIgZGF0YS1pZD1cIiR7Y29tbWVudC5pZH1cIj5Nb2RpZmllcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY29tbWVudC1hY3Rpb24gZGVsZXRlLWNvbW1lbnRcIiBkYXRhLWlkPVwiJHtjb21tZW50LmlkfVwiPlN1cHByaW1lcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbW1lbnQtY29udGVudFwiPiR7ZXNjYXBlSHRtbChjb21tZW50LmNvbnRlbnQpfTwvZGl2PlxuICAgIGA7XG5cbiAgcmV0dXJuIGRpdjtcbn1cblxuLy8gTG9hZCBkb3dubG9hZCBjb3VudFxuYXN5bmMgZnVuY3Rpb24gbG9hZERvd25sb2FkQ291bnQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFwiZG93bmxvYWRzXCIpXG4gICAgICAuc2VsZWN0KFwiaWRcIilcbiAgICAgIC5lcShcImRvY3VtZW50X2lkXCIsIGN1cnJlbnREb2N1bWVudC5pZCk7XG5cbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1jb3VudFwiKS50ZXh0Q29udGVudCA9IGRhdGEubGVuZ3RoO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIGRvd25sb2FkIGNvdW50OlwiLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gU2V0dXAgZXZlbnQgbGlzdGVuZXJzXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAvLyBUYWIgc3dpdGNoaW5nXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiLWJ0blwiKS5mb3JFYWNoKChidG4pID0+IHtcbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHN3aXRjaFRhYik7XG4gIH0pO1xuXG4gIC8vIFJhdGluZyBzdGFyc1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3VzZXItcmF0aW5nIC5zdGFyXCIpLmZvckVhY2goKHN0YXIpID0+IHtcbiAgICBzdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVSYXRpbmcpO1xuICB9KTtcblxuICAvLyBEb3dubG9hZCBidXR0b25cbiAgZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIilcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZURvd25sb2FkKTtcblxuICAvLyBDb21tZW50IHN1Ym1pc3Npb25cbiAgZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoXCJzdWJtaXQtY29tbWVudFwiKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3VibWl0Q29tbWVudCk7XG5cbiAgLy8gQ29tbWVudCBhY3Rpb25zIChkZWxlZ2F0aW9uKVxuICBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50QnlJZChcImNvbW1lbnRzLWxpc3RcIilcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNvbW1lbnRBY3Rpb24pO1xuXG4gIC8vIE1vZGFsIGV2ZW50c1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNsb3NlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZU1vZGFsKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW5jZWwtZWRpdFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xvc2VNb2RhbCk7XG4gIGRvY3VtZW50XG4gICAgLmdldEVsZW1lbnRCeUlkKFwic2F2ZS1lZGl0XCIpXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzYXZlQ29tbWVudEVkaXQpO1xuXG4gIC8vIExvZ291dFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ291dC1idG5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUxvZ291dCk7XG59XG5cbi8vIFN3aXRjaCB0YWJzXG5mdW5jdGlvbiBzd2l0Y2hUYWIoZSkge1xuICBjb25zdCB0YXJnZXRUYWIgPSBlLnRhcmdldC5kYXRhc2V0LnRhYjtcblxuICAvLyBVcGRhdGUgYWN0aXZlIHN0YXRlc1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYi1idG5cIikuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgYnRuLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIiwgYnRuLmRhdGFzZXQudGFiID09PSB0YXJnZXRUYWIpO1xuICB9KTtcblxuICAvLyBTaG93L2hpZGUgY29udGVudFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1bW1hcnktdGFiXCIpLnN0eWxlLmRpc3BsYXkgPVxuICAgIHRhcmdldFRhYiA9PT0gXCJzdW1tYXJ5XCIgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tZW50cy10YWJcIikuc3R5bGUuZGlzcGxheSA9XG4gICAgdGFyZ2V0VGFiID09PSBcImNvbW1lbnRzXCIgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcbn1cblxuLy8gSGFuZGxlIHJhdGluZ1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmF0aW5nKGUpIHtcbiAgY29uc3QgcmF0aW5nID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5yYXRpbmcpO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IHJhdGVkXG4gICAgY29uc3QgeyBkYXRhOiBleGlzdGluZyB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFwicmF0aW5nc1wiKVxuICAgICAgLnNlbGVjdChcImlkXCIpXG4gICAgICAuZXEoXCJkb2N1bWVudF9pZFwiLCBjdXJyZW50RG9jdW1lbnQuaWQpXG4gICAgICAuZXEoXCJ1c2VyX2lkXCIsIGN1cnJlbnRVc2VyLmlkKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgcmF0aW5nXG4gICAgICBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbShcInJhdGluZ3NcIilcbiAgICAgICAgLnVwZGF0ZSh7IHJhdGluZywgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0pXG4gICAgICAgIC5lcShcImlkXCIsIGV4aXN0aW5nLmlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5zZXJ0IG5ldyByYXRpbmdcbiAgICAgIGF3YWl0IHN1cGFiYXNlLmZyb20oXCJyYXRpbmdzXCIpLmluc2VydCh7XG4gICAgICAgIGRvY3VtZW50X2lkOiBjdXJyZW50RG9jdW1lbnQuaWQsXG4gICAgICAgIHVzZXJfaWQ6IGN1cnJlbnRVc2VyLmlkLFxuICAgICAgICByYXRpbmcsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgVUlcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3VzZXItcmF0aW5nIC5zdGFyXCIpLmZvckVhY2goKHN0YXIsIGluZGV4KSA9PiB7XG4gICAgICBzdGFyLmNsYXNzTGlzdC50b2dnbGUoXCJzZWxlY3RlZFwiLCBpbmRleCA8IHJhdGluZyk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWxvYWQgcmF0aW5ncyB0byB1cGRhdGUgYXZlcmFnZVxuICAgIGF3YWl0IGxvYWRSYXRpbmdzKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJhdGluZyBkb2N1bWVudDpcIiwgZXJyb3IpO1xuICAgIGFsZXJ0KFwiRXJyZXVyIGxvcnMgZGUgbCdlbnJlZ2lzdHJlbWVudCBkZSB2b3RyZSBub3RlXCIpO1xuICB9XG59XG5cbi8vIEhhbmRsZSBkb3dubG9hZFxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlRG93bmxvYWQoKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGRvd25sb2FkIFVSTCBmcm9tIFN1cGFiYXNlIFN0b3JhZ2VcbiAgICBjb25zdCB7IGRhdGE6IHVybERhdGEsIGVycm9yOiB1cmxFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZVxuICAgICAgLmZyb20oXCJkb2N1bWVudHNcIilcbiAgICAgIC5jcmVhdGVTaWduZWRVcmwoY3VycmVudERvY3VtZW50LnBkZl9zdG9yYWdlX3BhdGgsIDYwKTsgLy8gNjAgc2Vjb25kcyBleHBpcnlcblxuICAgIGlmICh1cmxFcnJvcikgdGhyb3cgdXJsRXJyb3I7XG5cbiAgICAvLyBUcmFjayBkb3dubG9hZFxuICAgIGF3YWl0IHN1cGFiYXNlLmZyb20oXCJkb3dubG9hZHNcIikuaW5zZXJ0KHtcbiAgICAgIGRvY3VtZW50X2lkOiBjdXJyZW50RG9jdW1lbnQuaWQsXG4gICAgICB1c2VyX2lkOiBjdXJyZW50VXNlci5pZCxcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBjb3VudFxuICAgIGNvbnN0IGNvdW50RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRvd25sb2FkLWNvdW50XCIpO1xuICAgIGNvdW50RWwudGV4dENvbnRlbnQgPSBwYXJzZUludChjb3VudEVsLnRleHRDb250ZW50KSArIDE7XG5cbiAgICAvLyBUcmlnZ2VyIGRvd25sb2FkXG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGEuaHJlZiA9IHVybERhdGEuc2lnbmVkVXJsO1xuICAgIGEuZG93bmxvYWQgPSBgUExVXyR7Y3VycmVudERvY3VtZW50LnpvbmluZy5jaXR5Lm5hbWV9XyR7Y3VycmVudERvY3VtZW50LnpvbmUubmFtZX0ucGRmYDtcbiAgICBhLmNsaWNrKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGRvd25sb2FkaW5nIGRvY3VtZW50OlwiLCBlcnJvcik7XG4gICAgYWxlcnQoXCJFcnJldXIgbG9ycyBkdSB0w6lsw6ljaGFyZ2VtZW50XCIpO1xuICB9XG59XG5cbi8vIFN1Ym1pdCBjb21tZW50XG5hc3luYyBmdW5jdGlvbiBzdWJtaXRDb21tZW50KCkge1xuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tZW50LWlucHV0XCIpLnZhbHVlLnRyaW0oKTtcblxuICBpZiAoIWNvbnRlbnQpIHtcbiAgICBhbGVydChcIlZldWlsbGV6IGVudHJlciB1biBjb21tZW50YWlyZVwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oXCJjb21tZW50c1wiKS5pbnNlcnQoe1xuICAgICAgZG9jdW1lbnRfaWQ6IGN1cnJlbnREb2N1bWVudC5pZCxcbiAgICAgIHVzZXJfaWQ6IGN1cnJlbnRVc2VyLmlkLFxuICAgICAgY29udGVudCxcbiAgICB9KTtcblxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG5cbiAgICAvLyBDbGVhciBpbnB1dFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tbWVudC1pbnB1dFwiKS52YWx1ZSA9IFwiXCI7XG5cbiAgICAvLyBSZWxvYWQgY29tbWVudHNcbiAgICBhd2FpdCBsb2FkQ29tbWVudHMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc3VibWl0dGluZyBjb21tZW50OlwiLCBlcnJvcik7XG4gICAgYWxlcnQoXCJFcnJldXIgbG9ycyBkZSBsYSBwdWJsaWNhdGlvbiBkdSBjb21tZW50YWlyZVwiKTtcbiAgfVxufVxuXG4vLyBIYW5kbGUgY29tbWVudCBhY3Rpb25zXG5mdW5jdGlvbiBoYW5kbGVDb21tZW50QWN0aW9uKGUpIHtcbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImVkaXQtY29tbWVudFwiKSkge1xuICAgIG9wZW5FZGl0TW9kYWwoZS50YXJnZXQuZGF0YXNldC5pZCk7XG4gIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVsZXRlLWNvbW1lbnRcIikpIHtcbiAgICBkZWxldGVDb21tZW50KGUudGFyZ2V0LmRhdGFzZXQuaWQpO1xuICB9XG59XG5cbi8vIE9wZW4gZWRpdCBtb2RhbFxuYXN5bmMgZnVuY3Rpb24gb3BlbkVkaXRNb2RhbChjb21tZW50SWQpIHtcbiAgY3VycmVudENvbW1lbnRJZCA9IGNvbW1lbnRJZDtcblxuICAvLyBHZXQgY29tbWVudCBjb250ZW50XG4gIGNvbnN0IHsgZGF0YTogY29tbWVudCB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImNvbW1lbnRzXCIpXG4gICAgLnNlbGVjdChcImNvbnRlbnRcIilcbiAgICAuZXEoXCJpZFwiLCBjb21tZW50SWQpXG4gICAgLnNpbmdsZSgpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWRpdC1jb21tZW50LWlucHV0XCIpLnZhbHVlID0gY29tbWVudC5jb250ZW50O1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXQtbW9kYWxcIikuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xufVxuXG4vLyBDbG9zZSBtb2RhbFxuZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0LW1vZGFsXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgY3VycmVudENvbW1lbnRJZCA9IG51bGw7XG59XG5cbi8vIFNhdmUgY29tbWVudCBlZGl0XG5hc3luYyBmdW5jdGlvbiBzYXZlQ29tbWVudEVkaXQoKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXQtY29tbWVudC1pbnB1dFwiKS52YWx1ZS50cmltKCk7XG5cbiAgaWYgKCFjb250ZW50KSB7XG4gICAgYWxlcnQoXCJMZSBjb21tZW50YWlyZSBuZSBwZXV0IHBhcyDDqnRyZSB2aWRlXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFwiY29tbWVudHNcIilcbiAgICAgIC51cGRhdGUoe1xuICAgICAgICBjb250ZW50LFxuICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KVxuICAgICAgLmVxKFwiaWRcIiwgY3VycmVudENvbW1lbnRJZCk7XG5cbiAgICBjbG9zZU1vZGFsKCk7XG4gICAgYXdhaXQgbG9hZENvbW1lbnRzKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHVwZGF0aW5nIGNvbW1lbnQ6XCIsIGVycm9yKTtcbiAgICBhbGVydChcIkVycmV1ciBsb3JzIGRlIGxhIG1vZGlmaWNhdGlvblwiKTtcbiAgfVxufVxuXG4vLyBEZWxldGUgY29tbWVudFxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ29tbWVudChjb21tZW50SWQpIHtcbiAgaWYgKCFjb25maXJtKFwiw4p0ZXMtdm91cyBzw7tyIGRlIHZvdWxvaXIgc3VwcHJpbWVyIGNlIGNvbW1lbnRhaXJlP1wiKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXdhaXQgc3VwYWJhc2UuZnJvbShcImNvbW1lbnRzXCIpLmRlbGV0ZSgpLmVxKFwiaWRcIiwgY29tbWVudElkKTtcblxuICAgIGF3YWl0IGxvYWRDb21tZW50cygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBkZWxldGluZyBjb21tZW50OlwiLCBlcnJvcik7XG4gICAgYWxlcnQoXCJFcnJldXIgbG9ycyBkZSBsYSBzdXBwcmVzc2lvblwiKTtcbiAgfVxufVxuXG4vLyBIYW5kbGUgbG9nb3V0XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVMb2dvdXQoKSB7XG4gIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpO1xuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL2xvZ2luXCI7XG59XG5cbi8vIFNob3cgZXJyb3Igc3RhdGVcbmZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlKSB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZy1zdGF0ZVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3ItbWVzc2FnZVwiKS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3Itc3RhdGVcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbn1cblxuLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBlc2NhcGUgSFRNTFxuZnVuY3Rpb24gZXNjYXBlSHRtbCh0ZXh0KSB7XG4gIGNvbnN0IG1hcCA9IHtcbiAgICBcIiZcIjogXCImYW1wO1wiLFxuICAgIFwiPFwiOiBcIiZsdDtcIixcbiAgICBcIj5cIjogXCImZ3Q7XCIsXG4gICAgJ1wiJzogXCImcXVvdDtcIixcbiAgICBcIidcIjogXCImIzAzOTtcIixcbiAgfTtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvWyY8PlwiJ10vZywgKG0pID0+IG1hcFttXSk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJqcy9cIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC9eYmxvYjovLCBcIlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ2Mjg6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt1cmJhbmRvY3Nfd2ViYXBwXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3VyYmFuZG9jc193ZWJhcHBcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFszMDNdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg2NjgpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4Iiwic3VwYWJhc2UiLCJjdXJyZW50VXNlciIsInNlc3Npb25WYWxpZGF0ZWQiLCJzZXRDdXJyZW50VXNlciIsInVzZXIiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbW92ZUl0ZW0iLCJhc3luYyIsImdldEN1cnJlbnRVc2VyIiwidmFsaWRhdGUiLCJkYXRhIiwic2Vzc2lvbiIsImVycm9yIiwic2Vzc2lvbkVycm9yIiwiYXV0aCIsImdldFNlc3Npb24iLCJjb25zb2xlIiwibG9nIiwicmVmcmVzaEVycm9yIiwicmVmcmVzaFNlc3Npb24iLCJ3YXJuIiwic2lnbk91dCIsImUiLCJ2YWxpZGF0ZVNlc3Npb24iLCJzdG9yZWRVc2VyIiwiZ2V0SXRlbSIsInBhcnNlIiwidXBkYXRlSGVhZGVyRm9yQXV0aFN0YXRlIiwidXNlclN0YXR1cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2dpbkxpbmsiLCJzaWdudXBMaW5rIiwibG9nb3V0QnRuIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwidGV4dENvbnRlbnQiLCJhZGQiLCJjdXJyZW50RG9jdW1lbnQiLCJjdXJyZW50Q29tbWVudElkIiwibG9hZFJhdGluZ3MiLCJyYXRpbmdzIiwiZnJvbSIsInNlbGVjdCIsImVxIiwiaWQiLCJsZW5ndGgiLCJhdmVyYWdlIiwicmVkdWNlIiwic3VtIiwiciIsInJhdGluZyIsInRvRml4ZWQiLCJ1c2VyUmF0aW5nIiwiZmluZCIsInVzZXJfaWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInN0YXIiLCJpbmRleCIsImxvYWRDb21tZW50cyIsImNvbW1lbnRzIiwib3JkZXIiLCJhc2NlbmRpbmciLCJjb21tZW50c0xpc3QiLCJpbm5lckhUTUwiLCJjb21tZW50IiwiY29tbWVudEVsIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImRhdGFzZXQiLCJjb21tZW50SWQiLCJpc093bmVyIiwidXNlck5hbWUiLCJwcm9maWxlcyIsImZ1bGxfbmFtZSIsImF2YXRhclVybCIsImF2YXRhcl91cmwiLCJkYXRlIiwiRGF0ZSIsImNyZWF0ZWRfYXQiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJkYXkiLCJtb250aCIsInllYXIiLCJ1cGRhdGVkX2F0IiwidGV4dCIsIm1hcCIsInJlcGxhY2UiLCJtIiwiZXNjYXBlSHRtbCIsImNvbnRlbnQiLCJjcmVhdGVDb21tZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVuZGVyQ29tbWVudHMiLCJzd2l0Y2hUYWIiLCJ0YXJnZXRUYWIiLCJ0YXJnZXQiLCJ0YWIiLCJidG4iLCJ0b2dnbGUiLCJzdHlsZSIsImRpc3BsYXkiLCJoYW5kbGVSYXRpbmciLCJwYXJzZUludCIsImV4aXN0aW5nIiwic2luZ2xlIiwidXBkYXRlIiwidG9JU09TdHJpbmciLCJpbnNlcnQiLCJkb2N1bWVudF9pZCIsImFsZXJ0IiwiaGFuZGxlRG93bmxvYWQiLCJ1cmxEYXRhIiwidXJsRXJyb3IiLCJzdG9yYWdlIiwiY3JlYXRlU2lnbmVkVXJsIiwicGRmX3N0b3JhZ2VfcGF0aCIsImNvdW50RWwiLCJhIiwiaHJlZiIsInNpZ25lZFVybCIsImRvd25sb2FkIiwiem9uaW5nIiwiY2l0eSIsIm5hbWUiLCJ6b25lIiwiY2xpY2siLCJzdWJtaXRDb21tZW50IiwidmFsdWUiLCJ0cmltIiwiaGFuZGxlQ29tbWVudEFjdGlvbiIsImNvbnRhaW5zIiwib3BlbkVkaXRNb2RhbCIsImNvbmZpcm0iLCJkZWxldGUiLCJkZWxldGVDb21tZW50IiwiY2xvc2VNb2RhbCIsInNhdmVDb21tZW50RWRpdCIsImhhbmRsZUxvZ291dCIsIndpbmRvdyIsImxvY2F0aW9uIiwibWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXBsYWNlV2l0aCIsImNsb25lTm9kZSIsInByZXZlbnREZWZhdWx0Iiwic2V0dXBMb2dvdXRIYW5kbGVyIiwib25BdXRoU3RhdGVDaGFuZ2UiLCJldmVudCIsInNldFRpbWVvdXQiLCJnZXRVc2VyIiwiZG9jdW1lbnRJZCIsIlVSTFNlYXJjaFBhcmFtcyIsInNlYXJjaCIsImdldCIsImRvY3VtZW50RGF0YSIsInVwZGF0ZURvY3VtZW50SW5mbyIsImh0bWxfY29udGVudCIsImxvYWREb3dubG9hZENvdW50IiwibG9hZERvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIk8iLCJyZXN1bHQiLCJjaHVua0lkcyIsImZuIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImkiLCJmdWxmaWxsZWQiLCJqIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5Iiwic3BsaWNlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmoiLCJ0IiwibW9kZSIsInRoaXMiLCJfX2VzTW9kdWxlIiwidGhlbiIsIm5zIiwiY3JlYXRlIiwiZGVmIiwiY3VycmVudCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZiIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJ1cmwiLCJkb25lIiwicHVzaCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsInNyYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJiaW5kIiwidHlwZSIsImhlYWQiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwidGFnTmFtZSIsInRvVXBwZXJDYXNlIiwidGVzdCIsIkVycm9yIiwicCIsImluc3RhbGxlZENodW5rcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==