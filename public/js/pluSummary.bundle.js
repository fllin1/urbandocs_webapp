(()=>{"use strict";var e,t,n,o,r,a={668:(e,t,n)=>{const o=(0,n(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let r=null,a=!1;function i(e){r=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function c(e=!0){if(e&&!a&&await async function(){try{const{data:{session:e},error:t}=await o.auth.getSession();if(t||!e)return console.log("No valid session found"),i(null),a=!1,!1;const{error:n}=await o.auth.refreshSession();return n?(console.warn("Session validation failed:",n),await o.auth.signOut(),i(null),a=!1,!1):(i(e.user),a=!0,!0)}catch(e){return console.error("Session validation error:",e),i(null),a=!1,!1}}(),!e&&!r){const e=localStorage.getItem("currentUser");if(e)try{r=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return r}let d=null;function s(e){d=e;const t=document.getElementById("userStatus"),n=document.getElementById("loginLink"),o=document.getElementById("signupLink"),r=document.getElementById("logoutBtn");e?(t&&(t.classList.remove("hidden"),t.textContent="Votre compte"),n&&n.classList.add("hidden"),o&&o.classList.add("hidden"),r&&r.classList.remove("hidden"),console.log("Header updated: User is authenticated")):(t&&t.classList.add("hidden"),n&&n.classList.remove("hidden"),o&&o.classList.remove("hidden"),r&&r.classList.add("hidden"),console.log("Header updated: User is not authenticated"))}let l=null,u=null,m=null;async function g(){try{const{data:t,error:n}=await o.from("ratings").select("rating, user_id").eq("document_id",u.id);if(n)throw n;if(t&&t.length>0){const n=t.reduce(((e,t)=>e+t.rating),0)/t.length;document.getElementById("average-rating").textContent=n.toFixed(1),document.getElementById("rating-count").textContent=t.length;const o=t.find((e=>e.user_id===l.id));o&&(e=o.rating,document.querySelectorAll("#user-rating .star").forEach(((t,n)=>{n<e&&t.classList.add("selected")})))}else document.getElementById("average-rating").textContent="-",document.getElementById("rating-count").textContent="0"}catch(e){console.error("Error loading ratings:",e)}var e}async function f(){try{const{data:e,error:t}=await o.from("comments").select("*").eq("document_id",u.id).order("created_at",{ascending:!1});if(t)throw t;if(0===e.length)return document.getElementById("comment-count").textContent="0",void p([]);const n=[...new Set(e.map((e=>e.user_id)))],{data:r,error:a}=await o.from("profiles").select("id, full_name, avatar_url").in("id",n);if(a){console.warn("Could not fetch profiles:",a);const t=e.map((e=>({...e,profiles:null})));return document.getElementById("comment-count").textContent=e.length,void p(t)}const i=r.reduce(((e,t)=>(e[t.id]=t,e)),{}),c=e.map((e=>({...e,profiles:i[e.user_id]||null})));document.getElementById("comment-count").textContent=e.length,p(c)}catch(e){console.error("Error loading comments:",e),document.getElementById("comment-count").textContent="0",p([])}}function p(e){const t=document.getElementById("comments-list");t.innerHTML="",0!==e.length?e.forEach((e=>{const n=function(e){const t=document.createElement("div");t.className="comment",t.dataset.commentId=e.id;const n=e.user_id===l.id,o=e.profiles?.full_name||"Utilisateur anonyme",r=e.profiles?.avatar_url||"/assets/default-avatar.png",a=new Date(e.created_at).toLocaleDateString("fr-FR",{day:"numeric",month:"long",year:"numeric"});return t.innerHTML=`\n        <div class="comment-header">\n            <div class="comment-author">\n                <img src="${r}" alt="${o}" class="comment-avatar">\n                <div>\n                    <div class="comment-name">${o}</div>\n                    <div class="comment-date">${a}${e.updated_at!==e.created_at?" (modifié)":""}</div>\n                </div>\n            </div>\n            ${n?`\n                <div class="comment-actions">\n                    <button class="comment-action edit-comment" data-id="${e.id}">Modifier</button>\n                    <button class="comment-action delete-comment" data-id="${e.id}">Supprimer</button>\n                </div>\n            `:""}\n        </div>\n        <div class="comment-content">${function(e){const t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"};return e.replace(/[&<>"']/g,(e=>t[e]))}(e.content)}</div>\n    `,t}(e);t.appendChild(n)})):t.innerHTML='<p class="no-comments">Aucun commentaire pour le moment. Soyez le premier à commenter!</p>'}function y(e){const t=e.target.dataset.tab;document.querySelectorAll(".tab-btn").forEach((e=>{e.classList.toggle("active",e.dataset.tab===t)})),document.getElementById("summary-tab").style.display="summary"===t?"block":"none",document.getElementById("comments-tab").style.display="comments"===t?"block":"none"}async function h(e){const t=parseInt(e.target.dataset.rating);try{const{data:e}=await o.from("ratings").select("id").eq("document_id",u.id).eq("user_id",l.id).single();e?await o.from("ratings").update({rating:t,updated_at:(new Date).toISOString()}).eq("id",e.id):await o.from("ratings").insert({document_id:u.id,user_id:l.id,rating:t}),document.querySelectorAll("#user-rating .star").forEach(((e,n)=>{e.classList.toggle("selected",n<t)})),await g()}catch(e){console.error("Error rating document:",e),alert("Erreur lors de l'enregistrement de votre note")}}async function v(){try{console.log("PDF storage path:",u.pdf_storage_path);const e=u.pdf_storage_path.replace(/^\//,""),{data:t,error:n}=await o.storage.from("pdfs").createSignedUrl(e,60,{download:!0});if(n)throw console.error("URL Error details:",n),n;await o.from("downloads").insert({document_id:u.id,user_id:l.id});const r=document.getElementById("download-count");r.textContent=parseInt(r.textContent)+1;const a=document.createElement("a");a.href=t.signedUrl,a.download=`PLU_${u.zoning.city.name}_${u.zone.name}.pdf`,document.body.appendChild(a),a.click(),document.body.removeChild(a)}catch(e){console.error("Error downloading document:",e),e.message&&e.message.includes("Object not found")?alert("Le fichier PDF n'a pas été trouvé. Veuillez contacter l'administrateur."):alert("Erreur lors du téléchargement")}}async function E(){const e=document.getElementById("comment-input").value.trim();if(e)try{const{error:t}=await o.from("comments").insert({document_id:u.id,user_id:l.id,content:e});if(t)throw t;document.getElementById("comment-input").value="",await f()}catch(e){console.error("Error submitting comment:",e),alert("Erreur lors de la publication du commentaire")}else alert("Veuillez entrer un commentaire")}function w(e){e.target.classList.contains("edit-comment")?async function(e){m=e;const{data:t}=await o.from("comments").select("content").eq("id",e).single();document.getElementById("edit-comment-input").value=t.content,document.getElementById("edit-modal").style.display="flex"}(e.target.dataset.id):e.target.classList.contains("delete-comment")&&async function(e){if(confirm("Êtes-vous sûr de vouloir supprimer ce commentaire?"))try{await o.from("comments").delete().eq("id",e),await f()}catch(e){console.error("Error deleting comment:",e),alert("Erreur lors de la suppression")}}(e.target.dataset.id)}function b(){document.getElementById("edit-modal").style.display="none",m=null}async function I(){const e=document.getElementById("edit-comment-input").value.trim();if(e)try{await o.from("comments").update({content:e,updated_at:(new Date).toISOString()}).eq("id",m),b(),await f()}catch(e){console.error("Error updating comment:",e),alert("Erreur lors de la modification")}else alert("Le commentaire ne peut pas être vide")}async function _(){await o.auth.signOut(),window.location.href="/login"}function B(e){document.getElementById("loading-state").style.display="none",document.getElementById("error-message").textContent=e,document.getElementById("error-state").style.display="block"}document.addEventListener("DOMContentLoaded",(async()=>{console.log("Initializing header authentication..."),function(){const e=document.getElementById("logoutBtn");e&&(e.replaceWith(e.cloneNode(!0)),document.getElementById("logoutBtn").addEventListener("click",(async e=>{e.preventDefault(),console.log("Logout initiated from header");try{const{error:e}=await o.auth.signOut();e?(console.error("Error logging out:",e.message),alert("Erreur lors de la déconnexion. Veuillez réessayer.")):console.log("Logout successful, redirecting to home")}catch(e){console.error("Exception during logout:",e),alert("Une erreur inattendue s'est produite lors de la déconnexion.")}})))}(),o.auth.onAuthStateChange(((e,t)=>{const n=t?.user||null;i(n),s(n),"SIGNED_OUT"===e?(console.log("Header auth: User signed out, redirecting to home"),setTimeout((()=>{window.location.href="/"}),100)):"SIGNED_IN"===e?console.log("Header auth: User signed in"):"INITIAL_SESSION"===e?console.log("Header auth: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("Header auth: Token refreshed")})),s(c()),console.log("Header authentication initialized");const{data:{user:e}}=await o.auth.getUser();if(!e)return void(window.location.href="/login");l=e;const t=new URLSearchParams(window.location.search).get("id");t?(await async function(e){try{const{data:t,error:n}=await o.from("documents").select("\n          id,\n          zoning:zonings(name, city:cities(name)),\n          zone:zones(name),\n          html_content,\n          pdf_storage_path,\n          source_plu_date\n        ").eq("id",e).single();if(n)throw n;u=t,function(e){document.getElementById("city-name").textContent=e.zoning.city.name,document.getElementById("zoning-name").textContent=e.zoning.name,document.getElementById("zone-name").textContent=e.zone.name,document.getElementById("doc-city").textContent=e.zoning.city.name,document.getElementById("doc-zone").textContent=e.zone.name,document.getElementById("doc-zoning").textContent=e.zoning.name}(t),document.getElementById("plu-content").innerHTML=t.html_content,await g(),await f(),await async function(){try{const{data:e,error:t}=await o.from("downloads").select("id").eq("document_id",u.id);if(t)throw t;document.getElementById("download-count").textContent=e.length}catch(e){console.error("Error loading download count:",e)}}(),document.getElementById("loading-state").style.display="none",document.getElementById("document-content").style.display="block"}catch(e){console.error("Error loading document:",e),B("Impossible de charger le document")}}(t),document.querySelectorAll(".tab-btn").forEach((e=>{e.addEventListener("click",y)})),document.querySelectorAll("#user-rating .star").forEach((e=>{e.addEventListener("click",h)})),document.getElementById("download-btn").addEventListener("click",v),document.getElementById("submit-comment").addEventListener("click",E),document.getElementById("comments-list").addEventListener("click",w),document.querySelector(".modal-close").addEventListener("click",b),document.getElementById("cancel-edit").addEventListener("click",b),document.getElementById("save-edit").addEventListener("click",I),document.getElementById("logout-btn").addEventListener("click",_)):B("Aucun document spécifié")}))}},i={};function c(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return a[e].call(n.exports,n,n.exports,c),n.exports}c.m=a,e=[],c.O=(t,n,o,r)=>{if(!n){var a=1/0;for(l=0;l<e.length;l++){for(var[n,o,r]=e[l],i=!0,d=0;d<n.length;d++)(!1&r||a>=r)&&Object.keys(c.O).every((e=>c.O[e](n[d])))?n.splice(d--,1):(i=!1,r<a&&(a=r));if(i){e.splice(l--,1);var s=o();void 0!==s&&(t=s)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);c.r(r);var a={};t=t||[null,n({}),n([]),n(n)];for(var i=2&o&&e;"object"==typeof i&&!~t.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,c.d(r,a),r},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>"js/"+e+".bundle.js",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",c.l=(e,t,n,a)=>{if(o[e])o[e].push(t);else{var i,d;if(void 0!==n)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var u=s[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){i=u;break}}i||(d=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,c.nc&&i.setAttribute("nonce",c.nc),i.setAttribute("data-webpack",r+n),i.src=e),o[e]=[t];var m=(t,n)=>{i.onerror=i.onload=null,clearTimeout(g);var r=o[e];if(delete o[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},g=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),d&&document.head.appendChild(i)}},c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e+"../"})(),(()=>{var e={628:0};c.f.j=(t,n)=>{var o=c.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var a=c.p+c.u(t),i=new Error;c.l(a,(n=>{if(c.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,o[1](i)}}),"chunk-"+t,t)}},c.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[a,i,d]=n,s=0;if(a.some((t=>0!==e[t]))){for(o in i)c.o(i,o)&&(c.m[o]=i[o]);if(d)var l=d(c)}for(t&&t(n);s<a.length;s++)r=a[s],c.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return c.O(l)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var d=c.O(void 0,[303],(()=>c(668)));d=c.O(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,