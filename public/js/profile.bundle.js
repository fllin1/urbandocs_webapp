(()=>{"use strict";var e,t,o,r,n,a={923:(e,t,o)=>{const r=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let n=null,a=!1;function i(e){n=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function s(e="/login"){return!!await async function(){try{const{data:{session:e},error:t}=await r.auth.getSession();if(t||!e)return console.log("No valid session found"),i(null),a=!1,!1;const{error:o}=await r.auth.refreshSession();return o?(console.warn("Session validation failed:",o),await r.auth.signOut(),i(null),a=!1,!1):(i(e.user),a=!0,!0)}catch(e){return console.error("Session validation error:",e),i(null),a=!1,!1}}()||(window.location.href=e,!1)}function c(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!0),r&&r.classList.remove("hidden")}function l(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!1),r&&r.classList.add("hidden")}function d(e,t,o){const r=document.getElementById(o);r&&(r.textContent=e,r.className="status-message margin-top-sm",r.classList.add(t),r.classList.remove("hidden"))}async function u(){if(!await s())return;const e=document.getElementById("userEmail"),t=document.getElementById("logoutBtn"),o=document.getElementById("profileForm"),n=document.getElementById("deleteAccountBtn"),a=document.getElementById("memberSince");try{const{data:{session:i}}=await r.auth.getSession();if(!i||!i.user)return console.log("No active session or user. Redirecting to login."),void(window.location.href="/login.html");const s=i.user;e&&(e.textContent=s.email),a&&s.created_at&&(a.textContent=new Date(s.created_at).toLocaleDateString()),c("saveProfileBtn");const u=await async function(e){const{data:t,error:o}=await r.from("users").select("nom, prenom, adresse, ville, code_postal, occupation, updated_at").eq("id",e).single();if(o&&"PGRST116"!==o.code)throw console.error("Error fetching profile:",o),o;return t}(s.id);u?function(e){if(!e)return;document.getElementById("nom").value=e.nom||"",document.getElementById("prenom").value=e.prenom||"",document.getElementById("adresse").value=e.adresse||"",document.getElementById("ville").value=e.ville||"",document.getElementById("codePostal").value=e.code_postal||"",document.getElementById("occupation").value=e.occupation||"";const t=document.getElementById("memberSince");t&&e.updated_at&&(t.textContent=new Date(e.updated_at).toLocaleDateString())}(u):console.log("No profile data found for user, form will be empty."),l("saveProfileBtn"),t&&t.addEventListener("click",(async()=>{c("logoutBtn");try{const{error:e}=await r.auth.signOut();if(e)throw e;d("Déconnexion réussie. Redirection...","success","profileFormStatus"),setTimeout((()=>{window.location.href="/"}),200)}catch(e){console.error("Error signing out:",e),d(`Erreur de déconnexion: ${e.message}`,"error","profileFormStatus")}finally{l("logoutBtn")}})),o&&o.addEventListener("submit",(async e=>{e.preventDefault(),c("saveProfileBtn");const t="profileFormStatus";document.getElementById(t).classList.add("hidden");const o={id:s.id,nom:document.getElementById("nom").value,prenom:document.getElementById("prenom").value,adresse:document.getElementById("adresse").value,ville:document.getElementById("ville").value,code_postal:document.getElementById("codePostal").value,occupation:document.getElementById("occupation").value,updated_at:new Date};try{const{error:e}=await r.from("profiles").upsert(o);if(e)throw e;d("Profil mis à jour avec succès !","success",t)}catch(e){console.error("Error updating profile:",e),d(`Erreur lors de la mise à jour: ${e.message}`,"error",t)}finally{l("saveProfileBtn")}})),n&&n.addEventListener("click",(async()=>{const e="deleteStatusMessage";if(document.getElementById(e).classList.add("hidden"),confirm("Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible et toutes vos données seront perdues.")){c("deleteAccountBtn");try{const{error:t}=await r.rpc("delete_user_account");if(t)throw t;d("Compte supprimé avec succès. Vous allez être déconnecté et redirigé.","success",e),await r.auth.signOut(),setTimeout((()=>{window.location.href="/"}),3e3)}catch(t){console.error("Error deleting account:",t),d(`Erreur lors de la suppression du compte: ${t.message}`,"error",e)}finally{l("deleteAccountBtn")}}else console.log("User cancelled account deletion.")}))}catch(e){console.error("Profile page initialization error:",e);const t=document.getElementById("profileDetails");t&&(t.innerHTML='<p class="error-message">Impossible de charger les informations du profil. Veuillez réessayer plus tard.</p>')}}document.addEventListener("DOMContentLoaded",u),document.addEventListener("DOMContentLoaded",(()=>{u(),console.log("Profile page initialized")}))}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var o=i[e]={exports:{}};return a[e].call(o.exports,o,o.exports,s),o.exports}s.m=a,e=[],s.O=(t,o,r,n)=>{if(!o){var a=1/0;for(d=0;d<e.length;d++){for(var[o,r,n]=e[d],i=!0,c=0;c<o.length;c++)(!1&n||a>=n)&&Object.keys(s.O).every((e=>s.O[e](o[c])))?o.splice(c--,1):(i=!1,n<a&&(a=n));if(i){e.splice(d--,1);var l=r();void 0!==l&&(t=l)}}return t}n=n||0;for(var d=e.length;d>0&&e[d-1][2]>n;d--)e[d]=e[d-1];e[d]=[o,r,n]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var a={};t=t||[null,o({}),o([]),o(o)];for(var i=2&r&&e;"object"==typeof i&&!~t.indexOf(i);i=o(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,s.d(n,a),n},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,o)=>(s.f[o](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},n="urbandocs_webapp:",s.l=(e,t,o,a)=>{if(r[e])r[e].push(t);else{var i,c;if(void 0!==o)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+o){i=u;break}}i||(c=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",n+o),i.src=e),r[e]=[t];var m=(t,o)=>{i.onerror=i.onload=null,clearTimeout(p);var n=r[e];if(delete r[e],i.parentNode&&i.parentNode.removeChild(i),n&&n.forEach((e=>e(o))),t)return t(o)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),c&&document.head.appendChild(i)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={138:0};s.f.j=(t,o)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)o.push(r[2]);else{var n=new Promise(((o,n)=>r=e[t]=[o,n]));o.push(r[2]=n);var a=s.p+s.u(t),i=new Error;s.l(a,(o=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=o&&("load"===o.type?"missing":o.type),a=o&&o.target&&o.target.src;i.message="Loading chunk "+t+" failed.\n("+n+": "+a+")",i.name="ChunkLoadError",i.type=n,i.request=a,r[1](i)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,o)=>{var r,n,[a,i,c]=o,l=0;if(a.some((t=>0!==e[t]))){for(r in i)s.o(i,r)&&(s.m[r]=i[r]);if(c)var d=c(s)}for(t&&t(o);l<a.length;l++)n=a[l],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(d)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var c=s.O(void 0,[303],(()=>s(923)));c=s.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,