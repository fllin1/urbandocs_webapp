(()=>{"use strict";var e,t,o,r,n,i={331:(e,t,o)=>{const r=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let n=null,i=!1;function a(e){n=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function s(){try{const{data:{session:e},error:t}=await r.auth.getSession();if(t||!e)return console.log("No valid session found"),a(null),i=!1,!1;const{error:o}=await r.auth.refreshSession();return o?(console.warn("Session validation failed:",o),await r.auth.signOut(),a(null),i=!1,!1):(a(e.user),i=!0,!0)}catch(e){return console.error("Session validation error:",e),a(null),i=!1,!1}}function l(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!0),r&&r.classList.remove("hidden")}function c(e,t){const o=document.getElementById(e),r=document.getElementById(t);o&&(o.disabled=!1),r&&r.classList.add("hidden")}function d(e,t,o){const r=document.getElementById(o);r&&(r.textContent=e,r.className="status-message margin-top-sm",r.classList.add(t),r.classList.remove("hidden"))}async function u(){if(!await async function(e="/login"){return!!await s()||(window.location.href=e,!1)}())return;const e=document.getElementById("userEmail"),t=document.getElementById("logoutBtn"),o=document.getElementById("profileForm"),n=document.getElementById("deleteAccountBtn"),i=document.getElementById("memberSince");try{const{data:{session:a}}=await r.auth.getSession();if(!a||!a.user)return console.log("No active session or user. Redirecting to login."),void(window.location.href="/");const s=a.user;e&&(e.textContent=s.email),i&&s.created_at&&(i.textContent=new Date(s.created_at).toLocaleDateString("fr-FR")),l("saveProfileBtn");const u=await async function(e){const{data:t,error:o}=await r.from("profiles").select("first_name, last_name, phone, updated_at").eq("id",e).single();if(o&&"PGRST116"!==o.code)throw console.error("Error fetching profile:",o),o;return t}(s.id);u?function(e){if(!e)return;document.getElementById("nom").value=e.last_name||"",document.getElementById("prenom").value=e.first_name||"",document.getElementById("telephone").value=e.phone||"",e.date_of_birth&&(document.getElementById("dateNaissance").value=e.date_of_birth);const t=document.getElementById("memberSince");t&&e.updated_at&&(t.textContent=new Date(e.updated_at).toLocaleDateString("fr-FR"))}(u):console.log("No profile data found for user, form will be empty."),c("saveProfileBtn"),t&&t.addEventListener("click",(async()=>{l("logoutBtn");try{const{error:e}=await r.auth.signOut();if(e)throw e;d("Déconnexion réussie. Redirection...","success","profileFormStatus"),setTimeout((()=>{window.location.href="/"}),200)}catch(e){console.error("Error signing out:",e),d(`Erreur de déconnexion: ${e.message}`,"error","profileFormStatus")}finally{c("logoutBtn")}})),o&&o.addEventListener("submit",(async e=>{e.preventDefault(),l("saveProfileBtn");const t="profileFormStatus";document.getElementById(t).classList.add("hidden");const o={id:s.id,last_name:document.getElementById("nom").value.trim(),first_name:document.getElementById("prenom").value.trim(),phone:document.getElementById("telephone").value.trim(),updated_at:(new Date).toISOString()};Object.keys(o).forEach((e=>{""===o[e]&&"id"!==e&&"updated_at"!==e&&(o[e]=null)}));try{const{error:e}=await r.from("profiles").upsert(o);if(e)throw e;d("Profil mis à jour avec succès !","success",t)}catch(e){console.error("Error updating profile:",e),d(`Erreur lors de la mise à jour: ${e.message}`,"error",t)}finally{c("saveProfileBtn")}})),n&&n.addEventListener("click",(async()=>{const e="deleteStatusMessage";if(document.getElementById(e).classList.add("hidden"),confirm("Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible et toutes vos données seront perdues.")){l("deleteAccountBtn");try{const{error:t}=await r.from("profiles").delete().eq("id",s.id);t&&console.error("Error deleting profile:",t);const{error:o}=await r.rpc("delete_user_account");o?(console.warn("delete_user_account RPC not available:",o),await r.auth.signOut(),d("Profil supprimé. Veuillez contacter l'administrateur pour supprimer complètement votre compte.","info",e)):(d("Compte supprimé avec succès. Vous allez être déconnecté et redirigé.","success",e),await r.auth.signOut()),setTimeout((()=>{window.location.href="/"}),3e3)}catch(t){console.error("Error deleting account:",t),d(`Erreur lors de la suppression du compte: ${t.message}`,"error",e)}finally{c("deleteAccountBtn")}}else console.log("User cancelled account deletion.")}))}catch(e){console.error("Profile page initialization error:",e);const t=document.getElementById("profileDetails");t&&(t.innerHTML='<p class="error-message">Impossible de charger les informations du profil. Veuillez réessayer plus tard.</p>')}}document.addEventListener("DOMContentLoaded",u);let m=null;function f(e){m=e;const t=document.getElementById("userStatus"),o=document.getElementById("loginLink"),r=document.getElementById("signupLink"),n=document.getElementById("logoutBtn");e?(t&&(t.classList.remove("hidden"),t.textContent="Votre compte"),o&&o.classList.add("hidden"),r&&r.classList.add("hidden"),n&&n.classList.remove("hidden"),console.log("Header updated: User is authenticated")):(t&&t.classList.add("hidden"),o&&o.classList.remove("hidden"),r&&r.classList.remove("hidden"),n&&n.classList.add("hidden"),console.log("Header updated: User is not authenticated"))}function g(){console.log("Initializing header authentication..."),function(){const e=document.getElementById("logoutBtn");e&&(e.replaceWith(e.cloneNode(!0)),document.getElementById("logoutBtn").addEventListener("click",(async e=>{e.preventDefault(),console.log("Logout initiated from header");try{const{error:e}=await r.auth.signOut();e?(console.error("Error logging out:",e.message),alert("Erreur lors de la déconnexion. Veuillez réessayer.")):console.log("Logout successful, redirecting to home")}catch(e){console.error("Exception during logout:",e),alert("Une erreur inattendue s'est produite lors de la déconnexion.")}})))}(),r.auth.onAuthStateChange(((e,t)=>{const o=t?.user||null;a(o),f(o),"SIGNED_OUT"===e?(console.log("Header auth: User signed out, redirecting to home"),setTimeout((()=>{window.location.href="/"}),100)):"SIGNED_IN"===e?console.log("Header auth: User signed in"):"INITIAL_SESSION"===e?console.log("Header auth: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("Header auth: Token refreshed")})),f(async function(e=!0){if(e&&!i&&await s(),!e&&!n){const e=localStorage.getItem("currentUser");if(e)try{n=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return n}()),console.log("Header authentication initialized")}document.addEventListener("DOMContentLoaded",(()=>{g(),u(),console.log("Profile page and header authentication initialized")}))}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var o=a[e]={exports:{}};return i[e].call(o.exports,o,o.exports,s),o.exports}s.m=i,e=[],s.O=(t,o,r,n)=>{if(!o){var i=1/0;for(d=0;d<e.length;d++){for(var[o,r,n]=e[d],a=!0,l=0;l<o.length;l++)(!1&n||i>=n)&&Object.keys(s.O).every((e=>s.O[e](o[l])))?o.splice(l--,1):(a=!1,n<i&&(i=n));if(a){e.splice(d--,1);var c=r();void 0!==c&&(t=c)}}return t}n=n||0;for(var d=e.length;d>0&&e[d-1][2]>n;d--)e[d]=e[d-1];e[d]=[o,r,n]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var i={};t=t||[null,o({}),o([]),o(o)];for(var a=2&r&&e;"object"==typeof a&&!~t.indexOf(a);a=o(a))Object.getOwnPropertyNames(a).forEach((t=>i[t]=()=>e[t]));return i.default=()=>e,s.d(n,i),n},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,o)=>(s.f[o](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},n="urbandocs_webapp:",s.l=(e,t,o,i)=>{if(r[e])r[e].push(t);else{var a,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+o){a=u;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",n+o),a.src=e),r[e]=[t];var m=(t,o)=>{a.onerror=a.onload=null,clearTimeout(f);var n=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(o))),t)return t(o)},f=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={138:0};s.f.j=(t,o)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)o.push(r[2]);else{var n=new Promise(((o,n)=>r=e[t]=[o,n]));o.push(r[2]=n);var i=s.p+s.u(t),a=new Error;s.l(i,(o=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;a.message="Loading chunk "+t+" failed.\n("+n+": "+i+")",a.name="ChunkLoadError",a.type=n,a.request=i,r[1](a)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,o)=>{var r,n,[i,a,l]=o,c=0;if(i.some((t=>0!==e[t]))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);if(l)var d=l(s)}for(t&&t(o);c<i.length;c++)n=i[c],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(d)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var l=s.O(void 0,[303],(()=>s(331)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,