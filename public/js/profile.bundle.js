(()=>{"use strict";var e,t,n,o,r,s={7647:(e,t,n)=>{var o=n(3715),r=n(9660),s=n(2387);function a(e,t,n){const o=document.getElementById(n);o&&(o.textContent=e,o.className="status-message margin-top-sm",o.classList.add(t),o.classList.remove("hidden"))}async function i(e){const{data:t,error:n}=await r.N.from("profiles").select("first_name, last_name, phone, updated_at, deletion_requested_at, deletion_scheduled_for").eq("id",e).single();if(n&&"PGRST116"!==n.code)throw console.error("Error fetching profile:",n),n;return t}async function c(){if(!await(0,s.Kv)(!1))return;if(!await(0,o.z6)())return;const e=document.getElementById("userEmail"),t=document.getElementById("logoutBtn"),n=document.getElementById("profileForm"),c=document.getElementById("deleteAccountBtn"),d=document.getElementById("memberSince");try{const{data:{session:s}}=await r.N.auth.getSession();if(!s||!s.user)return console.log("No active session or user. Redirecting to login."),void(window.location.href="/");const u=s.user;e&&(e.textContent=u.email),d&&u.created_at&&(d.textContent=new Date(u.created_at).toLocaleDateString("fr-FR")),(0,o.Cs)("saveProfileBtn");const m=await i(u.id);m?(function(e){const t=document.getElementById("firstName"),n=document.getElementById("lastName"),o=document.getElementById("phone");t&&e.first_name&&(t.value=e.first_name),n&&e.last_name&&(n.value=e.last_name),o&&e.phone&&(o.value=e.phone)}(m),m.deletion_scheduled_for&&l(m)):console.log("No profile data found for user, form will be empty."),(0,o.RZ)("saveProfileBtn"),t&&t.addEventListener("click",(async()=>{(0,o.Cs)("logoutBtn");try{const{error:e}=await r.N.auth.signOut();if(e)throw e;a("Déconnexion réussie. Redirection...","success","profileFormStatus"),setTimeout((()=>{window.location.href="/"}),200)}catch(e){console.error("Error signing out:",e),a(`Erreur de déconnexion: ${e.message}`,"error","profileFormStatus")}finally{(0,o.RZ)("logoutBtn")}})),n&&n.addEventListener("submit",(async e=>{e.preventDefault();const t="profileFormStatus";document.getElementById(t).classList.add("hidden"),(0,o.Cs)("saveProfileBtn");try{const e=new FormData(n),o={first_name:e.get("firstName")||null,last_name:e.get("lastName")||null,phone:e.get("phone")||null,updated_at:(new Date).toISOString()};await async function(e,t){const{data:n,error:o}=await r.N.from("profiles").update(t).eq("id",e).select().single();if(o)throw console.error("Error updating profile:",o),o;return n}(u.id,o),a("Profil mis à jour avec succès !","success",t)}catch(e){console.error("Error updating profile:",e),a(`Erreur lors de la mise à jour: ${e.message}`,"error",t)}finally{(0,o.RZ)("saveProfileBtn")}})),c&&c.addEventListener("click",(async()=>{const e="deleteStatusMessage";if(document.getElementById(e).classList.add("hidden"),confirm("Êtes-vous sûr de vouloir programmer la suppression de votre compte ? Votre compte sera supprimé dans 30 secondes pour le test, mais vous pourrez annuler cette action à tout moment avant la suppression définitive.")){(0,o.Cs)("deleteAccountBtn");try{const{data:t}=await r.N.auth.getSession();if(!t?.session?.access_token)throw new Error("No valid session");const n=await fetch(`${r.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.session.access_token}`},body:JSON.stringify({action:"schedule",reason:"User requested account deletion from profile page"})}),o=await n.json();if(!o.success)throw new Error(o.error||"Failed to schedule deletion");a("Suppression de compte programmée pour dans 30 secondes. Vous pouvez annuler cette action à tout moment.","info",e),setTimeout((async()=>{const e=await i(u.id);e&&l(e)}),1e3)}catch(t){console.error("Error scheduling account deletion:",t),a(`Erreur lors de la programmation de suppression: ${t.message}`,"error",e)}finally{(0,o.RZ)("deleteAccountBtn")}}else console.log("User cancelled account deletion.")}))}catch(e){console.error("Profile page initialization error:",e);const t=document.getElementById("profileDetails");t&&(t.innerHTML='<p class="error-message">Impossible de charger les informations du profil. Veuillez réessayer plus tard.</p>')}}function l(e){const t=document.getElementById("deleteAccountSection"),n=document.getElementById("deleteAccountBtn");if(t&&n&&e.deletion_scheduled_for){const n=new Date(e.deletion_scheduled_for),o=new Date,r=Math.ceil((n.getTime()-o.getTime())/1e3);t.innerHTML=`\n      <h3 class="margin-bottom-sm">Suppression de compte programmée</h3>\n      <div class="deletion-warning">\n        <p class="margin-bottom-sm">\n          ⚠️ Votre compte sera supprimé dans <strong>${r} seconde(s)</strong> \n          (le ${n.toLocaleDateString("fr-FR")} à ${n.toLocaleTimeString("fr-FR")}).\n        </p>\n        <p class="margin-bottom-sm">\n          Vous pouvez annuler cette suppression à tout moment avant la date prévue.\n        </p>\n      </div>\n      <div class="deletion-actions">\n        <button id="cancelDeletionBtn" class="btn btn-primary">\n          Annuler la suppression\n        </button>\n        <button id="viewDeletionStatusBtn" class="btn btn-secondary">\n          Voir le statut détaillé\n        </button>\n      </div>\n      <div id="deleteStatusMessage" class="status-message hidden margin-top-sm"></div>\n    `;const s=document.getElementById("cancelDeletionBtn"),a=document.getElementById("viewDeletionStatusBtn");s&&s.addEventListener("click",d),a&&a.addEventListener("click",(()=>{window.location.href="/user/account-deletion-status"}))}}async function d(){if(confirm("Êtes-vous sûr de vouloir annuler la suppression de votre compte ?"))try{const e=document.getElementById("cancelDeletionBtn");e.textContent,e.textContent="Annulation...",e.disabled=!0;const{data:t}=await r.N.auth.getSession();if(!t?.session?.access_token)throw new Error("No valid session");const n=await fetch(`${r.N.supabaseUrl}/functions/v1/account-management`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.session.access_token}`},body:JSON.stringify({action:"cancel"})}),o=await n.json();if(!o.success)throw new Error(o.error||"Failed to cancel deletion");a("Suppression de compte annulée avec succès !","success","deleteStatusMessage"),setTimeout((()=>{const e=document.getElementById("deleteAccountSection");if(e){e.innerHTML='\n          <h3 class="margin-bottom-sm">Supprimer le compte</h3>\n          <p class="margin-bottom-sm">\n            Attention : Cette action programmera la suppression de votre compte dans 30 secondes pour le test. \n            Vous pourrez annuler cette action à tout moment avant la suppression définitive.\n          </p>\n          <button id="deleteAccountBtn" class="btn btn-danger">\n            Programmer la suppression de mon compte\n          </button>\n          <div id="deleteStatusMessage" class="status-message hidden margin-top-sm"></div>\n        ';const t=document.getElementById("deleteAccountBtn");t&&t.addEventListener("click",(async()=>{location.reload()}))}}),2e3)}catch(e){console.error("Error canceling deletion:",e),a("Erreur lors de l'annulation de la suppression","error","deleteStatusMessage");const t=document.getElementById("cancelDeletionBtn");t&&(t.textContent="Annuler la suppression",t.disabled=!1)}}document.addEventListener("DOMContentLoaded",c);var u=n(9251);document.addEventListener("DOMContentLoaded",(()=>{(0,u.Mt)(),c(),console.log("Profile page and header authentication initialized")}))}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return s[e].call(n.exports,n,n.exports,i),n.exports}i.m=s,e=[],i.O=(t,n,o,r)=>{if(!n){var s=1/0;for(d=0;d<e.length;d++){for(var[n,o,r]=e[d],a=!0,c=0;c<n.length;c++)(!1&r||s>=r)&&Object.keys(i.O).every((e=>i.O[e](n[c])))?n.splice(c--,1):(a=!1,r<s&&(s=r));if(a){e.splice(d--,1);var l=o();void 0!==l&&(t=l)}}return t}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[n,o,r]},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(e,o){if(1&o&&(e=this(e)),8&o)return e;if("object"==typeof e&&e){if(4&o&&e.__esModule)return e;if(16&o&&"function"==typeof e.then)return e}var r=Object.create(null);i.r(r);var s={};t=t||[null,n({}),n([]),n(n)];for(var a=2&o&&e;"object"==typeof a&&!~t.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,i.d(r,s),r},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>"js/"+e+".chunk.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o={},r="urbandocs_webapp:",i.l=(e,t,n,s)=>{if(o[e])o[e].push(t);else{var a,c;if(void 0!==n)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+n){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,i.nc&&a.setAttribute("nonce",i.nc),a.setAttribute("data-webpack",r+n),a.src=e),o[e]=[t];var m=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var r=o[e];if(delete o[e],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((e=>e(n))),t)return t(n)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=m.bind(null,a.onerror),a.onload=m.bind(null,a.onload),c&&document.head.appendChild(a)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.j=138,i.p="/",(()=>{var e={138:0};i.f.j=(t,n)=>{var o=i.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var r=new Promise(((n,r)=>o=e[t]=[n,r]));n.push(o[2]=r);var s=i.p+i.u(t),a=new Error;i.l(s,(n=>{if(i.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var r=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",a.name="ChunkLoadError",a.type=r,a.request=s,o[1](a)}}),"chunk-"+t,t)}},i.O.j=t=>0===e[t];var t=(t,n)=>{var o,r,[s,a,c]=n,l=0;if(s.some((t=>0!==e[t]))){for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(c)var d=c(i)}for(t&&t(n);l<s.length;l++)r=s[l],i.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return i.O(d)},n=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var c=i.O(void 0,[76],(()=>i(7647)));c=i.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,