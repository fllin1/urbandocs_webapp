(()=>{"use strict";var e,t,o,n,r,a={331:(e,t,o)=>{const n=(0,o(303).UU)("https://ofeyssipibktmbfebibo.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9mZXlzc2lwaWJrdG1iZmViaWJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM5MjUwOTQsImV4cCI6MjA1OTUwMTA5NH0.w71CAKfolktzRl-TmLVhHYaEbhCfVk4A7YraEUCglrU");let r=null,a=!1;function i(e){r=e,e?localStorage.setItem("currentUser",JSON.stringify(e)):localStorage.removeItem("currentUser")}async function s(){try{const{data:{session:e},error:t}=await n.auth.getSession();if(t||!e)return console.log("No valid session found"),i(null),a=!1,!1;const{error:o}=await n.auth.refreshSession();return o?(console.warn("Session validation failed:",o),await n.auth.signOut(),i(null),a=!1,!1):(i(e.user),a=!0,!0)}catch(e){return console.error("Session validation error:",e),i(null),a=!1,!1}}function l(e,t){const o=document.getElementById(e),n=document.getElementById(t);o&&(o.disabled=!0),n&&n.classList.remove("hidden")}function c(e,t){const o=document.getElementById(e),n=document.getElementById(t);o&&(o.disabled=!1),n&&n.classList.add("hidden")}function d(e,t,o){const n=document.getElementById(o);n&&(n.textContent=e,n.className="status-message margin-top-sm",n.classList.add(t),n.classList.remove("hidden"))}async function u(){if(!await async function(e="/login"){return!!await s()||(window.location.href=e,!1)}())return;const e=document.getElementById("userEmail"),t=document.getElementById("logoutBtn"),o=document.getElementById("profileForm"),r=document.getElementById("deleteAccountBtn"),a=document.getElementById("memberSince");try{const{data:{session:i}}=await n.auth.getSession();if(!i||!i.user)return console.log("No active session or user. Redirecting to login."),void(window.location.href="/login.html");const s=i.user;e&&(e.textContent=s.email),a&&s.created_at&&(a.textContent=new Date(s.created_at).toLocaleDateString("fr-FR")),l("saveProfileBtn");const u=await async function(e){const{data:t,error:o}=await n.from("profiles").select("first_name, last_name, address, city, postal_code, occupation, phone, date_of_birth, updated_at").eq("id",e).single();if(o&&"PGRST116"!==o.code)throw console.error("Error fetching profile:",o),o;return t}(s.id);u?function(e){if(!e)return;document.getElementById("nom").value=e.last_name||"",document.getElementById("prenom").value=e.first_name||"",document.getElementById("adresse").value=e.address||"",document.getElementById("ville").value=e.city||"",document.getElementById("codePostal").value=e.postal_code||"",document.getElementById("occupation").value=e.occupation||"",document.getElementById("telephone").value=e.phone||"",e.date_of_birth&&(document.getElementById("dateNaissance").value=e.date_of_birth);const t=document.getElementById("memberSince");t&&e.updated_at&&(t.textContent=new Date(e.updated_at).toLocaleDateString("fr-FR"))}(u):console.log("No profile data found for user, form will be empty."),c("saveProfileBtn"),t&&t.addEventListener("click",(async()=>{l("logoutBtn");try{const{error:e}=await n.auth.signOut();if(e)throw e;d("Déconnexion réussie. Redirection...","success","profileFormStatus"),setTimeout((()=>{window.location.href="/"}),200)}catch(e){console.error("Error signing out:",e),d(`Erreur de déconnexion: ${e.message}`,"error","profileFormStatus")}finally{c("logoutBtn")}})),o&&o.addEventListener("submit",(async e=>{e.preventDefault(),l("saveProfileBtn");const t="profileFormStatus";document.getElementById(t).classList.add("hidden");const o={id:s.id,last_name:document.getElementById("nom").value.trim(),first_name:document.getElementById("prenom").value.trim(),address:document.getElementById("adresse").value.trim(),city:document.getElementById("ville").value.trim(),postal_code:document.getElementById("codePostal").value.trim(),occupation:document.getElementById("occupation").value.trim(),phone:document.getElementById("telephone").value.trim(),date_of_birth:document.getElementById("dateNaissance").value||null,updated_at:(new Date).toISOString()};Object.keys(o).forEach((e=>{""===o[e]&&"id"!==e&&"updated_at"!==e&&(o[e]=null)}));try{const{error:e}=await n.from("profiles").upsert(o);if(e)throw e;d("Profil mis à jour avec succès !","success",t)}catch(e){console.error("Error updating profile:",e),d(`Erreur lors de la mise à jour: ${e.message}`,"error",t)}finally{c("saveProfileBtn")}})),r&&r.addEventListener("click",(async()=>{const e="deleteStatusMessage";if(document.getElementById(e).classList.add("hidden"),confirm("Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible et toutes vos données seront perdues.")){l("deleteAccountBtn");try{const{error:t}=await n.from("profiles").delete().eq("id",s.id);t&&console.error("Error deleting profile:",t);const{error:o}=await n.rpc("delete_user_account");o?(console.warn("delete_user_account RPC not available:",o),await n.auth.signOut(),d("Profil supprimé. Veuillez contacter l'administrateur pour supprimer complètement votre compte.","info",e)):(d("Compte supprimé avec succès. Vous allez être déconnecté et redirigé.","success",e),await n.auth.signOut()),setTimeout((()=>{window.location.href="/"}),3e3)}catch(t){console.error("Error deleting account:",t),d(`Erreur lors de la suppression du compte: ${t.message}`,"error",e)}finally{c("deleteAccountBtn")}}else console.log("User cancelled account deletion.")}))}catch(e){console.error("Profile page initialization error:",e);const t=document.getElementById("profileDetails");t&&(t.innerHTML='<p class="error-message">Impossible de charger les informations du profil. Veuillez réessayer plus tard.</p>')}}document.addEventListener("DOMContentLoaded",u);let m=null;function g(e){m=e;const t=document.getElementById("userStatus"),o=document.getElementById("loginLink"),n=document.getElementById("signupLink"),r=document.getElementById("logoutBtn");e?(t&&(t.classList.remove("hidden"),t.textContent="Votre compte"),o&&o.classList.add("hidden"),n&&n.classList.add("hidden"),r&&r.classList.remove("hidden"),console.log("Header updated: User is authenticated")):(t&&t.classList.add("hidden"),o&&o.classList.remove("hidden"),n&&n.classList.remove("hidden"),r&&r.classList.add("hidden"),console.log("Header updated: User is not authenticated"))}function f(){console.log("Initializing header authentication..."),function(){const e=document.getElementById("logoutBtn");e&&(e.replaceWith(e.cloneNode(!0)),document.getElementById("logoutBtn").addEventListener("click",(async e=>{e.preventDefault(),console.log("Logout initiated from header");try{const{error:e}=await n.auth.signOut();e?(console.error("Error logging out:",e.message),alert("Erreur lors de la déconnexion. Veuillez réessayer.")):console.log("Logout successful, redirecting to home")}catch(e){console.error("Exception during logout:",e),alert("Une erreur inattendue s'est produite lors de la déconnexion.")}})))}(),n.auth.onAuthStateChange(((e,t)=>{const o=t?.user||null;i(o),g(o),"SIGNED_OUT"===e?(console.log("Header auth: User signed out, redirecting to home"),setTimeout((()=>{window.location.href="/"}),100)):"SIGNED_IN"===e?console.log("Header auth: User signed in"):"INITIAL_SESSION"===e?console.log("Header auth: Initial session loaded"):"TOKEN_REFRESHED"===e&&console.log("Header auth: Token refreshed")})),g(async function(e=!0){if(e&&!a&&await s(),!e&&!r){const e=localStorage.getItem("currentUser");if(e)try{r=JSON.parse(e)}catch(e){console.error("Error retrieving user:",e),localStorage.removeItem("currentUser")}}return r}()),console.log("Header authentication initialized")}document.addEventListener("DOMContentLoaded",(()=>{f(),u(),console.log("Profile page and header authentication initialized")}))}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var o=i[e]={exports:{}};return a[e].call(o.exports,o,o.exports,s),o.exports}s.m=a,e=[],s.O=(t,o,n,r)=>{if(!o){var a=1/0;for(d=0;d<e.length;d++){for(var[o,n,r]=e[d],i=!0,l=0;l<o.length;l++)(!1&r||a>=r)&&Object.keys(s.O).every((e=>s.O[e](o[l])))?o.splice(l--,1):(i=!1,r<a&&(a=r));if(i){e.splice(d--,1);var c=n();void 0!==c&&(t=c)}}return t}r=r||0;for(var d=e.length;d>0&&e[d-1][2]>r;d--)e[d]=e[d-1];e[d]=[o,n,r]},o=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var r=Object.create(null);s.r(r);var a={};t=t||[null,o({}),o([]),o(o)];for(var i=2&n&&e;"object"==typeof i&&!~t.indexOf(i);i=o(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,s.d(r,a),r},s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,o)=>(s.f[o](e,t),t)),[])),s.u=e=>"js/"+e+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="urbandocs_webapp:",s.l=(e,t,o,a)=>{if(n[e])n[e].push(t);else{var i,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==r+o){i=u;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",r+o),i.src=e),n[e]=[t];var m=(t,o)=>{i.onerror=i.onload=null,clearTimeout(g);var r=n[e];if(delete n[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(o))),t)return t(o)},g=setTimeout(m.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=m.bind(null,i.onerror),i.onload=m.bind(null,i.onload),l&&document.head.appendChild(i)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var n=o.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=o[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),(()=>{var e={138:0};s.f.j=(t,o)=>{var n=s.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else{var r=new Promise(((o,r)=>n=e[t]=[o,r]));o.push(n[2]=r);var a=s.p+s.u(t),i=new Error;s.l(a,(o=>{if(s.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var r=o&&("load"===o.type?"missing":o.type),a=o&&o.target&&o.target.src;i.message="Loading chunk "+t+" failed.\n("+r+": "+a+")",i.name="ChunkLoadError",i.type=r,i.request=a,n[1](i)}}),"chunk-"+t,t)}},s.O.j=t=>0===e[t];var t=(t,o)=>{var n,r,[a,i,l]=o,c=0;if(a.some((t=>0!==e[t]))){for(n in i)s.o(i,n)&&(s.m[n]=i[n]);if(l)var d=l(s)}for(t&&t(o);c<a.length;c++)r=a[c],s.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return s.O(d)},o=self.webpackChunkurbandocs_webapp=self.webpackChunkurbandocs_webapp||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})();var l=s.O(void 0,[303],(()=>s(331)));l=s.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,